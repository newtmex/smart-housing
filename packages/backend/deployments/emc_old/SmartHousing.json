{
  "address": "0x5372A122f975F158414aE3737735d918F1CC477a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "projectFunding",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "PRBMathSD59x18__Exp2InputTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "PRBMathSD59x18__LogInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ToInt256CastOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "number",
          "type": "int256"
        }
      ],
      "name": "ToUint256CastOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralId",
          "type": "uint256"
        }
      ],
      "name": "ReferralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectAddress",
          "type": "address"
        }
      ],
      "name": "addProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addProjectRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hstNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newHstNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coinbaseAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "createRefID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "createRefIDViaProxy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionStorage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFunds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectsTotalReceivedRents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastFundsDispatchTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtTotalStakeWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtStakingRewards",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "toShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "checkpoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProjectStakingRewards.Value",
          "name": "projectsStakingRewards",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "team",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "growth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "staking",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectsReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpAndListing",
              "type": "uint256"
            }
          ],
          "internalType": "struct Entities.Value",
          "name": "entityFunds",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "genesis",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getReferrals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            }
          ],
          "internalType": "struct UserModule.ReferralInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getReferrer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hst",
      "outputs": [
        {
          "internalType": "contract HousingStakingToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lkSht",
      "outputs": [
        {
          "internalType": "contract LkSHT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "enum SmartHousing.Permissions",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        }
      ],
      "name": "projectDets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivedRents",
              "type": "uint256"
            }
          ],
          "internalType": "struct Distribution.ProjectDistributionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectFundingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectsToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "payment",
          "type": "tuple"
        }
      ],
      "name": "setUpSHT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shtTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment[]",
          "name": "stakingTokens",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "epochsLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenNonce",
          "type": "uint256"
        }
      ],
      "name": "userCanClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd48d0ebe04e140a4a35088e1a2781d22e57aed88a8b16bcc6e7d3040eb0e08ef",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0x5372A122f975F158414aE3737735d918F1CC477a",
    "transactionIndex": 0,
    "gasUsed": "6164323",
    "logsBloom": "0x
    "blockHash": "0x077ecd43879a63184b140eea63a089e601acba072cd372695d311ab197af1943",
    "transactionHash": "0xd48d0ebe04e140a4a35088e1a2781d22e57aed88a8b16bcc6e7d3040eb0e08ef",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3142351,
        "transactionHash": "0xd48d0ebe04e140a4a35088e1a2781d22e57aed88a8b16bcc6e7d3040eb0e08ef",
        "address": "0x5372A122f975F158414aE3737735d918F1CC477a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x077ecd43879a63184b140eea63a089e601acba072cd372695d311ab197af1943"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3142351,
        "transactionHash": "0xd48d0ebe04e140a4a35088e1a2781d22e57aed88a8b16bcc6e7d3040eb0e08ef",
        "address": "0x839D999054459CC5795ba65f1718Fe74EE1CbA13",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005372a122f975f158414ae3737735d918f1cc477a"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x077ecd43879a63184b140eea63a089e601acba072cd372695d311ab197af1943"
      }
    ],
    "blockNumber": 3142351,
    "cumulativeGasUsed": "6164323",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCB538225d84769a0A1da8CB88396360966f33d19",
    "0x98656048016a6b9f3566dac77371e56Ad4E0ca7c"
  ],
  "numDeployments": 1,
  "solcInputHash": "2ab48957edcdbd6aae4057970ab478a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectFunding\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__LogInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ToInt256CastOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"number\",\"type\":\"int256\"}],\"name\":\"ToUint256CastOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralId\",\"type\":\"uint256\"}],\"name\":\"ReferralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectAddress\",\"type\":\"address\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addProjectRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hstNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newHstNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinbaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"createRefID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"createRefIDViaProxy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectsTotalReceivedRents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFundsDispatchTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtTotalStakeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtStakingRewards\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"toShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"internalType\":\"struct ProjectStakingRewards.Value\",\"name\":\"projectsStakingRewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"growth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectsReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAndListing\",\"type\":\"uint256\"}],\"internalType\":\"struct Entities.Value\",\"name\":\"entityFunds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"genesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"internalType\":\"struct UserModule.ReferralInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hst\",\"outputs\":[{\"internalType\":\"contract HousingStakingToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lkSht\",\"outputs\":[{\"internalType\":\"contract LkSHT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"enum SmartHousing.Permissions\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"}],\"name\":\"projectDets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedRents\",\"type\":\"uint256\"}],\"internalType\":\"struct Distribution.ProjectDistributionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFundingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectsToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"setUpSHT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shtTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment[]\",\"name\":\"stakingTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"epochsLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenNonce\",\"type\":\"uint256\"}],\"name\":\"userCanClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Main contract for the SmartHousing ecosystem. Manages HousingProjects, users, and staking.\",\"kind\":\"dev\",\"methods\":{\"addProject(address)\":{\"params\":{\"projectAddress\":\"Address of the new project.\"}},\"addProjectRent(uint256)\":{\"params\":{\"amount\":\"Amount of rent received.\"}},\"claimRewards(uint256,uint256)\":{\"params\":{\"hstNonce\":\"Nonce of the HST token.\",\"referrerId\":\"Referral ID of the referrer.\"},\"returns\":{\"newHstNonce\":\"New HST nonce.\"}},\"constructor\":{\"params\":{\"coinbase\":\"Address of the coinbase.\",\"projectFunding\":\"Address of the ProjectFunding contract.\"}},\"createRefID(uint256)\":{\"params\":{\"referrerId\":\"The ID of the referrer.\"},\"returns\":{\"_0\":\"The ID of the registered user.\"}},\"createRefIDViaProxy(address,uint256)\":{\"params\":{\"referrerId\":\"Referral ID of the referrer.\",\"userAddr\":\"Address of the user.\"},\"returns\":{\"_0\":\"User ID.\"}},\"getReferrals(address)\":{\"params\":{\"userAddress\":\"The address of the user.\"},\"returns\":{\"_0\":\"referrals An array of `ReferralInfo` structs representing the user's referrals.\"}},\"getReferrer(address)\":{\"params\":{\"userAddress\":\"The address of the user.\"},\"returns\":{\"referrerAddress\":\"The address of the referrer, address(0) if none.\",\"referrerId\":\"The ID of the referrer, 0 if none.\"}},\"getUserId(address)\":{\"params\":{\"userAddress\":\"The address of the user.\"},\"returns\":{\"userId\":\"The ID of the user.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"projectDets(address)\":{\"params\":{\"project\":\"Address of the project.\"},\"returns\":{\"_0\":\"Project distribution data.\"}},\"projectsToken()\":{\"returns\":{\"_0\":\"Array of project token addresses.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setUpSHT((address,uint256))\":{\"params\":{\"payment\":\"Token payment details for SHT setup.\"}},\"stake((address,uint256,uint256)[],uint256,uint256)\":{\"params\":{\"epochsLock\":\"Lock period in epochs.\",\"referrerId\":\"Referral ID of the referrer.\",\"stakingTokens\":\"Array of token payments for staking.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userCanClaim(address,uint256)\":{\"params\":{\"tokenNonce\":\"Nonce of the token.\",\"user\":\"Address of the user.\"},\"returns\":{\"_0\":\"True if the user can claim rewards, otherwise false.\"}}},\"title\":\"SmartHousing\",\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathSD59x18__Exp2InputTooBig(int256)\":[{\"notice\":\"Emitted when the input is greater than 192.\"}],\"PRBMathSD59x18__LogInputTooSmall(int256)\":[{\"notice\":\"Emitted when the input is less than or equal to zero.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"ToInt256CastOverflow(uint256)\":[{\"notice\":\"Emitted when trying to convert a uint256 number that doesn't fit within int256.\"}],\"ToUint256CastOverflow(int256)\":[{\"notice\":\"Emitted when trying to convert a int256 number that doesn't fit within uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addProject(address)\":{\"notice\":\"Add a new project and set its permissions.\"},\"addProjectRent(uint256)\":{\"notice\":\"Add rent to a project and update distribution storage.\"},\"claimRewards(uint256,uint256)\":{\"notice\":\"Claim rewards and update token attributes.\"},\"constructor\":{\"notice\":\"Constructor to initialize SmartHousing.\"},\"createRefID(uint256)\":{\"notice\":\"Register a new user or get the referral ID if already registered.\"},\"createRefIDViaProxy(address,uint256)\":{\"notice\":\"Register a new user or get the referral ID if already registered.\"},\"getReferrals(address)\":{\"notice\":\"Retrieves the referrals of a user.\"},\"getReferrer(address)\":{\"notice\":\"Gets the referrer and referrer ID of a user.\"},\"getUserId(address)\":{\"notice\":\"Gets the user ID for a given address.\"},\"projectDets(address)\":{\"notice\":\"Get project distribution details.\"},\"projectsToken()\":{\"notice\":\"Get the list of project tokens.\"},\"setUpSHT((address,uint256))\":{\"notice\":\"Setup SHT token and distribute funds.\"},\"stake((address,uint256,uint256)[],uint256,uint256)\":{\"notice\":\"Stake tokens for rewards.\"},\"userCanClaim(address,uint256)\":{\"notice\":\"Check if a user can claim rewards.\"}},\"notice\":\"SmartHousing enables real estate tokenization for fractional ownership and investment.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/main/SmartHousing.sol\":\"SmartHousing\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/housing-project/CallsSmartHousing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"../main/Interface.sol\\\";\\n\\nabstract contract CallsSmartHousing {\\n\\t/// @notice The address of the main SmartHousing contract.\\n\\taddress public immutable smartHousingAddr;\\n\\n\\tconstructor(address smartHousingAddr_) {\\n\\t\\tsmartHousingAddr = smartHousingAddr_;\\n\\t}\\n\\n\\t/// @dev Gets the referrer address for a given original owner.\\n\\t/// @param userAddr The original owner of the token.\\n\\t/// @return The referrer address.\\n\\tfunction _getReferrer(\\n\\t\\taddress userAddr\\n\\t) internal view returns (uint256, address) {\\n\\t\\treturn IUserModule(smartHousingAddr).getReferrer(userAddr);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf2e8b5a1636fd49b057f58d003aeb8964900e2aeec4f8cb3ef95718d29cd214f\",\"license\":\"MIT\"},\"contracts/housing-project/HousingProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./RentsModule.sol\\\";\\nimport \\\"./CallsSmartHousing.sol\\\";\\n\\nuint256 constant RENT_SPREAD_RANGE = 365 days;\\n\\n/// @title HousingProject Contract\\n/// @notice Represents a unique real estate project within the SmartHousing ecosystem.\\n/// @dev This contract inherits from RentsModule and Ownable for management functions.\\ncontract HousingProject is RentsModule, Ownable, CallsSmartHousing {\\n\\tusing RewardShares for rewardshares;\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\n\\tuint256 public maxSupply;\\n\\n\\t// State Variables\\n\\tuint256 public rewardsReserve;\\n\\tuint256 public rewardPerShare;\\n\\n\\tuint256 public totalRewardsCollected;\\n\\tuint256 public totalRewardsGenerated;\\n\\tuint256 public rewardsAPR;\\n\\tuint256 public lastRewardGenerateTimestamp;\\n\\tuint256 public endRewardGenerateTimestamp;\\n\\n\\tuint256 public facilityManagementFunds;\\n\\n\\t// Constants\\n\\tuint256 public constant REWARD_PERCENT = 75;\\n\\tuint256 public constant ECOSYSTEM_PERCENT = 18;\\n\\tuint256 public constant FACILITY_PERCENT = 7;\\n\\n\\tHousingSFT public immutable projectSFT;\\n\\tERC20Burnable public immutable housingToken;\\n\\n\\t/// @notice Initializes the HousingProject contract.\\n\\t/// @param smartHousingAddr The address of the main SmartHousing contract.\\n\\t/// @param housingTokenAddr Coinbase contraact address\\n\\t/// @param name The name of the HousingSFT token.\\n\\t/// @param symbol The symbol of the HousingSFT token.\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddr,\\n\\t\\taddress housingTokenAddr\\n\\t) CallsSmartHousing(smartHousingAddr) {\\n\\t\\tprojectSFT = new HousingSFT(name, symbol);\\n\\t\\tmaxSupply = projectSFT.getMaxSupply();\\n\\n\\t\\t// Initialize the housing token\\n\\t\\thousingToken = ERC20Burnable(housingTokenAddr);\\n\\t}\\n\\n\\t/// @notice Receives rent payments, calculates, and distributes rewards.\\n\\t/// @param rentPayment The details of the rent payment.\\n\\tfunction receiveRent(ERC20TokenPayment calldata rentPayment) external {\\n\\t\\tuint256 rentAmount = rentPayment.amount;\\n\\t\\trequire(rentAmount > 0, \\\"RentsModule: Insufficient amount\\\");\\n\\t\\trequire(\\n\\t\\t\\trentPayment.token == housingToken,\\n\\t\\t\\t\\\"RentsModule: Invalid token\\\"\\n\\t\\t);\\n\\n\\t\\trentPayment.receiveERC20();\\n\\n\\t\\t// Calculate reward components\\n\\t\\tuint256 rentReward = (rentAmount * REWARD_PERCENT) / 100;\\n\\t\\tuint256 ecosystemReward = (rentAmount * ECOSYSTEM_PERCENT) / 100;\\n\\t\\tuint256 facilityReward = (rentAmount * FACILITY_PERCENT) / 100;\\n\\n\\t\\t// Initialize reward generation if it's the first rent payment\\n\\t\\tif (totalRewardsCollected == 0) {\\n\\t\\t\\tlastRewardGenerateTimestamp = block.timestamp;\\n\\t\\t}\\n\\n\\t\\t// Update rewards and reserve\\n\\t\\tendRewardGenerateTimestamp = block.timestamp + RENT_SPREAD_RANGE;\\n\\t\\ttotalRewardsCollected += rentReward;\\n\\t\\trewardsAPR =\\n\\t\\t\\t((totalRewardsCollected - totalRewardsGenerated) *\\n\\t\\t\\t\\tDIVISION_SAFETY_CONST) /\\n\\t\\t\\tmaxSupply /\\n\\t\\t\\t(endRewardGenerateTimestamp - lastRewardGenerateTimestamp);\\n\\n\\t\\tfacilityManagementFunds += facilityReward;\\n\\n\\t\\t// Burn ecosystem reward and notify SmartHousing contract\\n\\t\\thousingToken.burn(ecosystemReward);\\n\\t\\tISmartHousing(smartHousingAddr).addProjectRent(rentAmount);\\n\\t}\\n\\n\\t/// @notice Generates rewards based on elapsed time since the last generation.\\n\\t/// @return generatedRewards The total rewards generated during the elapsed time.\\n\\t/// @return rpsIncrement The increment to be added to rewardPerShare.\\n\\tfunction _generateRewards()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 generatedRewards, uint256 rpsIncrement)\\n\\t{\\n\\t\\tuint256 timeElapsed = _min(\\n\\t\\t\\tendRewardGenerateTimestamp,\\n\\t\\t\\tblock.timestamp\\n\\t\\t) - lastRewardGenerateTimestamp;\\n\\n\\t\\tif (timeElapsed > 0) {\\n\\t\\t\\tgeneratedRewards =\\n\\t\\t\\t\\t(rewardsAPR * maxSupply * timeElapsed) /\\n\\t\\t\\t\\tDIVISION_SAFETY_CONST;\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t(totalRewardsGenerated + generatedRewards) <=\\n\\t\\t\\t\\t\\ttotalRewardsCollected,\\n\\t\\t\\t\\t\\\"HousingProject: Rewards generated overflowed\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\trpsIncrement =\\n\\t\\t\\t\\t(generatedRewards * DIVISION_SAFETY_CONST) /\\n\\t\\t\\t\\tmaxSupply;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Claims rent rewards for a given token and updates attributes.\\n\\t/// @param nonce The nonce of the token to claim rewards for.\\n\\t/// @return attr The updated HousingAttributes.\\n\\t/// @return rewardShares The computed reward shares.\\n\\t/// @return newNonce The new nonce after updating the token.\\n\\tfunction claimRentReward(\\n\\t\\tuint256 nonce\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tHousingAttributes memory attr,\\n\\t\\t\\trewardshares memory rewardShares,\\n\\t\\t\\tuint256 newNonce\\n\\t\\t)\\n\\t{\\n\\t\\t// Generate rewards and increment reward per share\\n\\t\\t{\\n\\t\\t\\t(\\n\\t\\t\\t\\tuint256 generatedRewards,\\n\\t\\t\\t\\tuint256 rpsIncrement\\n\\t\\t\\t) = _generateRewards();\\n\\t\\t\\tif (generatedRewards > 0) {\\n\\t\\t\\t\\trewardPerShare += rpsIncrement;\\n\\t\\t\\t\\trewardsReserve += generatedRewards;\\n\\t\\t\\t\\ttotalRewardsGenerated += generatedRewards;\\n\\t\\t\\t\\tlastRewardGenerateTimestamp = _min(\\n\\t\\t\\t\\t\\tendRewardGenerateTimestamp,\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\t// Fetch user attributes and compute rewards\\n\\t\\tattr = projectSFT.getUserSFT(caller, nonce);\\n\\t\\trewardShares = _computeRewardShares(attr, rewardPerShare);\\n\\n\\t\\tuint256 totalReward = rewardShares.total();\\n\\t\\tif (totalReward == 0) {\\n\\t\\t\\treturn (attr, rewardShares, nonce);\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\trewardsReserve >= totalReward,\\n\\t\\t\\t\\\"RentsModule: Insufficient rewards reserve\\\"\\n\\t\\t);\\n\\t\\trewardsReserve -= totalReward;\\n\\n\\t\\t// Transfer or burn referrer reward\\n\\t\\tuint256 referrerValue = rewardShares.referrerValue;\\n\\t\\tif (referrerValue > 0) {\\n\\t\\t\\t(, address referrer) = _getReferrer(attr.originalOwner);\\n\\t\\t\\tif (referrer != address(0)) {\\n\\t\\t\\t\\thousingToken.transfer(referrer, referrerValue);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thousingToken.burn(referrerValue);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Update user attributes and transfer reward\\n\\t\\tattr.rewardsPerShare = rewardPerShare;\\n\\t\\tnewNonce = projectSFT.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\tnonce,\\n\\t\\t\\tprojectSFT.balanceOf(caller, nonce),\\n\\t\\t\\tabi.encode(attr)\\n\\t\\t);\\n\\t\\thousingToken.transfer(caller, rewardShares.userValue);\\n\\n\\t\\treturn (attr, rewardShares, newNonce);\\n\\t}\\n\\n\\t/// @notice Helper function to calculate the minimum of two values.\\n\\t/// @param a The first value.\\n\\t/// @param b The second value.\\n\\t/// @return The minimum of the two values.\\n\\tfunction _min(uint256 a, uint256 b) private pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n\\n\\t/// @notice Returns the maximum supply of the HousingSFT token.\\n\\t/// @return The maximum supply of the HousingSFT token.\\n\\tfunction getMaxSupply() external view returns (uint256) {\\n\\t\\treturn projectSFT.getMaxSupply();\\n\\t}\\n\\n\\t/// @notice Calculates the amount of rent claimable for a given token.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return The amount of rent claimable.\\n\\tfunction rentClaimable(\\n\\t\\tHousingAttributes memory attr\\n\\t) public view returns (uint256) {\\n\\t\\t(, uint256 rpsIncrement) = _generateRewards();\\n\\n\\t\\treturn\\n\\t\\t\\t_computeRewardShares(attr, rewardPerShare + rpsIncrement).userValue;\\n\\t}\\n}\\n\",\"keccak256\":\"0x24e0d01332e845f30e3cf1e3e011f4d15ff78188ab69d1198e9e312a90b29eee\",\"license\":\"MIT\"},\"contracts/housing-project/HousingSFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../modules/SFT.sol\\\";\\n\\nstruct HousingAttributes {\\n\\tuint256 rewardsPerShare;\\n\\taddress originalOwner;\\n\\tuint256 tokenWeight;\\n}\\n\\n/// @title Housing SFT\\n/// @notice This contract represents a semi-fungible token (SFT) for housing projects.\\n/// @dev This contract will be inherited by the HousingProject contract.\\ncontract HousingSFT is SFT {\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\tusing Address for address;\\n\\n\\tstruct HousingSFTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tHousingAttributes attributes;\\n\\t}\\n\\n\\t/// @notice Maximum supply of tokens for this housing project.\\n\\tuint256 public constant MAX_SUPPLY = 1_000_000;\\n\\n\\t/// @notice The amount of fungible tokens collected from investors to finance the development of this housing project.\\n\\tuint256 public amountRaised;\\n\\n\\t/// @notice The current amount out of the `MAX_SUPPLY` of tokens minted.\\n\\tuint256 public totalSupply;\\n\\n\\t/// @param name_ Name of the SFT.\\n\\t/// @param symbol_ Symbol of the SFT.\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\t/// @notice Sets the amount raised for the housing project.\\n\\t/// @param amountRaised_ The amount raised during the token sale.\\n\\tfunction setAmountRaised(uint256 amountRaised_) external canMint {\\n\\t\\tamountRaised = amountRaised_;\\n\\t}\\n\\n\\t/// @dev Modifier to ensure only the SFT owner (i.e., the owner of the owner of this contract, which is the ProjectFunding Contract) can mint new tokens.\\n\\tmodifier canMint() {\\n\\t\\taddress sftOwner = owner();\\n\\n\\t\\trequire(\\n\\t\\t\\tOwnable(sftOwner).owner() == _msgSender(),\\n\\t\\t\\t\\\"not allowed to mint\\\"\\n\\t\\t);\\n\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Mints SFT tokens for a depositor based on the amount of deposit.\\n\\t/// @param depositAmt The amount of fungible token deposited.\\n\\t/// @param depositor The address of the depositor.\\n\\t/// @return The ID of the newly minted SFT.\\n\\tfunction mintSFT(\\n\\t\\tuint256 depositAmt,\\n\\t\\taddress depositor\\n\\t) external canMint returns (uint256) {\\n\\t\\tuint256 maxShares = MAX_SUPPLY;\\n\\t\\trequire(amountRaised > 0, \\\"HousingSFT: No deposits recorded\\\");\\n\\n\\t\\tuint256 mintShare = (depositAmt * maxShares) / amountRaised;\\n\\t\\trequire(mintShare > 0, \\\"HousingSFT: Computed token shares invalid\\\");\\n\\n\\t\\ttotalSupply += mintShare;\\n\\t\\trequire(totalSupply <= MAX_SUPPLY, \\\"HousingSFT: Max supply exceeded\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tHousingAttributes({\\n\\t\\t\\t\\trewardsPerShare: 0, // Initial rewards per share\\n\\t\\t\\t\\toriginalOwner: depositor,\\n\\t\\t\\t\\ttokenWeight: mintShare\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\treturn _mint(depositor, mintShare, attributes);\\n\\t}\\n\\n\\t/// @notice Retrieves the SFT attributes for a given owner and nonce.\\n\\t/// @param owner The address to check the balance of.\\n\\t/// @param nonce The specific nonce to check.\\n\\t/// @return The attributes associated with the specified SFT.\\n\\tfunction getUserSFT(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce\\n\\t) public view returns (HousingAttributes memory) {\\n\\t\\trequire(\\n\\t\\t\\thasSFT(owner, nonce),\\n\\t\\t\\t\\\"HousingSFT: No tokens found for user at nonce\\\"\\n\\t\\t);\\n\\n\\t\\treturn abi.decode(_getRawTokenAttributes(nonce), (HousingAttributes));\\n\\t}\\n\\n\\t/// @notice Returns the maximum supply of the HousingSFT tokens.\\n\\t/// @return The maximum supply of tokens.\\n\\tfunction getMaxSupply() public pure returns (uint256) {\\n\\t\\treturn MAX_SUPPLY;\\n\\t}\\n\\n\\t/// @notice Returns the SFT balance of a user including detailed attributes.\\n\\t/// @param user The address of the user to check.\\n\\t/// @return An array of `HousingSFTBalance` containing the user's balance details.\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (HousingSFTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tHousingSFTBalance[] memory balance = new HousingSFTBalance[](\\n\\t\\t\\t_sftBals.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = HousingSFTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (HousingAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/// @notice Retrieves the token details including name, symbol, and max supply.\\n\\t/// @return A tuple containing the token's name, symbol, and max supply.\\n\\tfunction tokenDetails()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (string memory, string memory, uint256)\\n\\t{\\n\\t\\treturn (name(), symbol(), getMaxSupply());\\n\\t}\\n}\\n\",\"keccak256\":\"0x4bfb6bc254987d9243abf83f748a16abfb3b1c6daa6b595cdbfda7bb8f1239a0\",\"license\":\"MIT\"},\"contracts/housing-project/NewHousingProjectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport { HousingProject } from \\\"./HousingProject.sol\\\";\\n\\n/// @title NewHousingProject Library\\n/// @notice This library provides a function to deploy new HousingProject contracts.\\n/// @dev This is a lightweight library intended for contract creation and can be expanded with additional functionality.\\nlibrary NewHousingProject {\\n\\t/// @notice Deploys a new instance of the HousingProject contract.\\n\\t/// @param name The name of the HousingProject token.\\n\\t/// @param symbol The symbol of the HousingProject token.\\n\\t/// @param coinbase Coinbase contraact address\\n\\t/// @param smartHousingAddr The address of the SmartHousing contract that will own the new HousingProject.\\n\\t/// @return The address of the newly created HousingProject contract.\\n\\tfunction deployHousingProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddr,\\n\\t\\taddress coinbase\\n\\t) external returns (HousingProject) {\\n\\t\\treturn new HousingProject(name, symbol, smartHousingAddr, coinbase);\\n\\t}\\n}\\n\",\"keccak256\":\"0x6773e84e7f7ce797c7da8eb504d304d4aba554cb6849af61fc6e96208e23ca1d\",\"license\":\"MIT\"},\"contracts/housing-project/RentsModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"./HousingSFT.sol\\\";\\nimport \\\"./RewardSharing.sol\\\";\\nimport \\\"../lib/TokenPayments.sol\\\";\\n\\n/// @title Rents Module\\n/// @notice Manages rent payments, reward calculations, and distribution for housing projects.\\n/// @dev This abstract contract should be inherited by the HousingProject contract.\\nabstract contract RentsModule {\\n\\t/// @dev Computes the reward shares for a given token based on its attributes.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return rewardShares The computed RewardShares.\\n\\tfunction _computeRewardShares(\\n\\t\\tHousingAttributes memory attr,\\n\\t\\tuint256 currentRPS\\n\\t) internal pure returns (rewardshares memory) {\\n\\t\\tif (currentRPS == 0 || attr.rewardsPerShare >= currentRPS) {\\n\\t\\t\\treturn rewardshares({ userValue: 0, referrerValue: 0 });\\n\\t\\t}\\n\\n\\t\\tuint256 reward = _computeReward(attr, currentRPS);\\n\\t\\treturn _splitReward(reward);\\n\\t}\\n\\n\\t/// @dev Calculates the reward for a given token based on its attributes and current reward per share.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @param currentRPS The current reward per share.\\n\\t/// @return The computed reward.\\n\\tfunction _computeReward(\\n\\t\\tHousingAttributes memory attr,\\n\\t\\tuint256 currentRPS\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t((currentRPS - attr.rewardsPerShare) * attr.tokenWeight) /\\n\\t\\t\\tDIVISION_SAFETY_CONST;\\n\\t}\\n\\n\\t/// @dev Splits the computed reward into user and referrer shares.\\n\\t/// @param reward The total computed reward.\\n\\t/// @return rewardShares The split reward shares.\\n\\tfunction _splitReward(\\n\\t\\tuint256 reward\\n\\t) internal pure returns (rewardshares memory) {\\n\\t\\tuint256 referrerShare = (reward * 30) / 100_00;\\n\\t\\tuint256 userShare = reward - referrerShare;\\n\\n\\t\\treturn\\n\\t\\t\\trewardshares({\\n\\t\\t\\t\\tuserValue: userShare,\\n\\t\\t\\t\\treferrerValue: referrerShare\\n\\t\\t\\t});\\n\\t}\\n}\\n\",\"keccak256\":\"0x7d38e7779fe71af36714c045704d971f1b76975c33fa546a19ce3460e5196b0d\",\"license\":\"MIT\"},\"contracts/housing-project/RewardSharing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./HousingSFT.sol\\\";\\n\\n// Constants\\nuint256 constant DIVISION_SAFETY_CONST = 1_000_000_000_000_000_000;\\n\\n// Structs\\nstruct rewardshares {\\n\\tuint256 userValue;\\n\\tuint256 referrerValue;\\n}\\n\\n// Library for managing reward shares\\nlibrary RewardShares {\\n\\t/// @notice Calculates the total reward value (user + referrer).\\n\\t/// @param self The rewardshares struct containing user and referrer values.\\n\\t/// @return The total reward value.\\n\\tfunction total(rewardshares memory self) internal pure returns (uint256) {\\n\\t\\treturn self.userValue + self.referrerValue;\\n\\t}\\n}\\n\\n// Utility functions\\n\\n/// @notice Splits a reward amount into user and referrer shares.\\n/// @param reward The total reward amount to be split.\\n/// @return The rewardshares struct with user and referrer values.\\nfunction splitReward(uint256 reward) pure returns (rewardshares memory) {\\n\\tuint256 referrerValue = (reward * 666) / 10000; // Approximately 6.66% of the total reward\\n\\tuint256 userValue = reward - referrerValue;\\n\\n\\treturn rewardshares(userValue, referrerValue);\\n}\\n\\n/// @notice Computes the reward for a given token based on its attributes and the current reward per share.\\n/// @param attr The attributes of the token.\\n/// @param contractRPS The current reward per share.\\n/// @return The computed reward amount.\\nfunction computeReward(\\n\\tHousingAttributes memory attr,\\n\\tuint256 contractRPS\\n) pure returns (uint256) {\\n\\t// Return 0 if the current reward per share is less than or equal to the token's recorded reward per share\\n\\tif (contractRPS <= attr.rewardsPerShare) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\treturn\\n\\t\\t((contractRPS - attr.rewardsPerShare) * attr.tokenWeight) /\\n\\t\\tDIVISION_SAFETY_CONST;\\n}\\n\",\"keccak256\":\"0x36b630089dcd987e1b72683c2f9e7d972fc214a72cf84848da64867940ccd049\",\"license\":\"MIT\"},\"contracts/lib/Epochs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/// @title Epochs Management Library\\n/// @notice Provides functions to manage and calculate epochs based on a genesis timestamp and epoch length.\\n/// @dev The epoch length is specified in seconds\\nlibrary Epochs {\\n\\t// Struct to store epoch management parameters\\n\\tstruct Storage {\\n\\t\\tuint256 genesis; // The genesis timestamp\\n\\t\\tuint256 epochLength; // Length of each epoch in seconds\\n\\t}\\n\\n\\t// Initialization Functions\\n\\n\\t/// @notice Initializes the storage with the current timestamp as the genesis and sets the epoch length.\\n\\t/// @param self The storage struct to initialize.\\n\\t/// @param _epochLength The length of an epoch in seconds.\\n\\t/// @dev This function should be called in the contract constructor to set the initial genesis timestamp and epoch length.\\n\\tfunction initialize(Storage storage self, uint256 _epochLength) internal {\\n\\t\\tself.genesis = block.timestamp;\\n\\t\\tself.epochLength = _epochLength;\\n\\n\\t\\trequire(self.epochLength > 0, \\\"Invalid Epoch length\\\");\\n\\t}\\n\\n\\t// View Functions\\n\\n\\t/// @notice Returns the current epoch based on the genesis timestamp and epoch length.\\n\\t/// @param self The storage struct containing the genesis timestamp and epoch length.\\n\\t/// @return The current epoch number.\\n\\t/// @dev The epoch is calculated by dividing the time elapsed since genesis by the epoch length in seconds.\\n\\tfunction currentEpoch(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\treturn computeEpoch(self, block.timestamp);\\n\\t}\\n\\n\\tfunction computeEpoch(\\n\\t\\tStorage storage self,\\n\\t\\tuint256 timestamp\\n\\t) internal view returns (uint256) {\\n\\t\\trequire(self.genesis > 0, \\\"Invalid genesis timestamp\\\");\\n\\t\\trequire(timestamp > 0, \\\"Invalid timestamp\\\");\\n\\t\\trequire(self.epochLength > 0, \\\"Invalid Epoch length\\\");\\n\\n\\t\\treturn (timestamp - self.genesis) / self.epochLength;\\n\\t}\\n\\n\\tfunction epochEdgeTimestamps(\\n\\t\\tStorage memory self,\\n\\t\\tuint256 epoch\\n\\t) internal pure returns (uint256 epochStart, uint256 epochEnd) {\\n\\t\\tepochStart = self.genesis + (epoch * self.epochLength);\\n\\t\\tepochEnd = epochStart + self.epochLength - 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0xbfc45ceaa024f3d6f524c80ab7f203cf6e7a58295f41eb8b33d20351086e058b\",\"license\":\"MIT\"},\"contracts/lib/LkSHTAttributes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title LkSHTAttributes\\n/// @dev Library for handling attributes and unlocking of the Locked SmartHousing Token (LkSHT).\\nlibrary LkSHTAttributes {\\n\\tusing SafeMath for uint256;\\n\\n\\t// Constants\\n\\t// Duration for which tokens are locked (e.g., 3 years in production, 3 weeks for testing)\\n\\tuint256 constant LOCK_DURATION = 3 weeks;\\n\\n\\t// Struct to represent attributes of Locked SmartHousing Tokens\\n\\tstruct Attributes {\\n\\t\\tuint256 initialAmount; // Initial amount of tokens locked\\n\\t\\tuint256 amount; // Remaining amount of tokens locked\\n\\t\\tuint256 startTimestamp; // Timestamp when the lock started\\n\\t\\tuint256 endTimestamp; // Timestamp when the lock ends\\n\\t}\\n\\n\\t// Initialization Functions\\n\\n\\t/// @dev Creates new attributes for a Locked SmartHousing Token.\\n\\t/// @param startTimestamp The start time of the lock.\\n\\t/// @param amount The amount of SmartHousing Tokens locked.\\n\\t/// @return attributes The initialized attributes.\\n\\tfunction newAttributes(\\n\\t\\tuint256 startTimestamp,\\n\\t\\tuint256 amount\\n\\t) internal pure returns (Attributes memory) {\\n\\t\\treturn\\n\\t\\t\\tAttributes({\\n\\t\\t\\t\\tinitialAmount: amount,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tstartTimestamp: startTimestamp,\\n\\t\\t\\t\\tendTimestamp: startTimestamp.add(LOCK_DURATION)\\n\\t\\t\\t});\\n\\t}\\n\\n\\t// View Functions\\n\\n\\t/// @dev Calculates and deducts the unlocked amount based on the elapsed time.\\n\\t/// @param self The attributes to update.\\n\\t/// @return unlockedAmount The amount of tokens unlocked.\\n\\t/// @return newSelf The updated attributes with the deducted amount.\\n\\tfunction unlockMatured(\\n\\t\\tAttributes memory self\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 unlockedAmount, Attributes memory newSelf)\\n\\t{\\n\\t\\tuint256 elapsed = elapsedTime(self);\\n\\t\\tunlockedAmount = self.amount.mul(elapsed).div(LOCK_DURATION);\\n\\n\\t\\tself.amount = self.amount.sub(unlockedAmount);\\n\\t\\tnewSelf = self;\\n\\t}\\n\\n\\t/// @dev Calculates the elapsed time since the lock started.\\n\\t/// @param self The attributes to use.\\n\\t/// @return elapsedTime The elapsed time in seconds.\\n\\tfunction elapsedTime(\\n\\t\\tAttributes memory self\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 currentTime = block.timestamp;\\n\\t\\tif (currentTime >= self.endTimestamp) {\\n\\t\\t\\treturn LOCK_DURATION;\\n\\t\\t} else {\\n\\t\\t\\treturn currentTime.sub(self.startTimestamp);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x7091e3e3b18360fa51a7a07492d0f71d6c3b60d895e28302de807c0b84de4d7d\",\"license\":\"MIT\"},\"contracts/lib/ProjectStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenPayments.sol\\\";\\nimport { HousingSFT } from \\\"../housing-project/HousingSFT.sol\\\";\\n\\n/// @title ProjectStorage\\n/// @dev Library for managing project data, funding, and deposit retrieval.\\nlibrary ProjectStorage {\\n\\tusing SafeMath for uint256;\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing ProjectStorage for Data;\\n\\n\\t// Enum representing the status of a project\\n\\tenum Status {\\n\\t\\tFundingPeriod, // Project is currently in the funding period\\n\\t\\tSuccessful, // Project has met its funding goal\\n\\t\\tFailed // Project has failed to meet its funding goal\\n\\t}\\n\\n\\t// Struct to hold project data\\n\\tstruct Data {\\n\\t\\tuint256 id; // Unique identifier for the project\\n\\t\\taddress tokenAddress; // Address of the token associated with the project\\n\\t\\taddress projectAddress; // Address of the deployed HousingProject contract\\n\\t\\tuint256 fundingGoal; // Target funding amount for the project\\n\\t\\tuint256 fundingDeadline; // Deadline timestamp for the project funding\\n\\t\\taddress fundingToken; // Address of the ERC20 token used for funding\\n\\t\\tuint256 collectedFunds; // Amount of funds collected for the project\\n\\t\\tuint256 minDeposit; // Least amount of funding to receive\\n\\t}\\n\\n\\t// View Functions\\n\\n\\t/// @dev Returns the current status of the project based on collected funds and deadline.\\n\\t/// @param self The memory struct containing project data.\\n\\t/// @return The status of the project.\\n\\tfunction status(Data memory self) internal view returns (Status) {\\n\\t\\tif (self.collectedFunds >= self.fundingGoal) {\\n\\t\\t\\treturn Status.Successful;\\n\\t\\t} else if (block.timestamp < self.fundingDeadline) {\\n\\t\\t\\treturn Status.FundingPeriod;\\n\\t\\t} else {\\n\\t\\t\\treturn Status.Failed;\\n\\t\\t}\\n\\t}\\n\\n\\t// Initialization Functions\\n\\n\\t/// @dev Creates and initializes a new project.\\n\\t/// @param projects The mapping of project IDs to project data.\\n\\t/// @param projectsId The mapping of project addresses to project IDs.\\n\\t/// @param projectCount The current number of projects.\\n\\t/// @param fundingGoal The target funding amount.\\n\\t/// @param fundingDeadline The deadline for funding.\\n\\t/// @param fundingToken The address of the ERC20 token used for funding.\\n\\t/// @param projectAddress The address of the HousingProject contract.\\n\\t/// @param tokenAddress The address of the token associated with the project.\\n\\t/// @return newProjectData The newly created project data.\\n\\tfunction createNew(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage projectsId,\\n\\t\\tuint256 projectCount,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline,\\n\\t\\taddress fundingToken,\\n\\t\\taddress projectAddress,\\n\\t\\taddress tokenAddress\\n\\t) internal returns (Data memory) {\\n\\t\\trequire(fundingGoal > 0, \\\"Funding goal must be more than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tfundingDeadline > block.timestamp,\\n\\t\\t\\t\\\"Deadline can't be in the past\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 newId = projectCount.add(1);\\n\\n\\t\\tuint256 tokenMaxSupply = HousingSFT(tokenAddress).getMaxSupply();\\n\\n\\t\\tData memory newProjectData = Data({\\n\\t\\t\\tid: newId,\\n\\t\\t\\tprojectAddress: projectAddress,\\n\\t\\t\\tfundingGoal: fundingGoal,\\n\\t\\t\\tfundingDeadline: fundingDeadline,\\n\\t\\t\\tfundingToken: fundingToken,\\n\\t\\t\\tcollectedFunds: 0,\\n\\t\\t\\ttokenAddress: tokenAddress,\\n\\t\\t\\tminDeposit: fundingGoal / tokenMaxSupply\\n\\t\\t});\\n\\n\\t\\tprojects[newId] = newProjectData;\\n\\t\\tprojectsId[newProjectData.projectAddress] = newProjectData.id;\\n\\n\\t\\treturn newProjectData;\\n\\t}\\n\\n\\t// Funding Functions\\n\\n\\t/// @dev Funds a project with tokens.\\n\\t/// @param projects The mapping of project IDs to project data.\\n\\t/// @param usersDeposit The mapping of depositor addresses to their deposit amounts.\\n\\t/// @param projectId The ID of the project to fund.\\n\\t/// @param depositor The address of the person funding the project.\\n\\t/// @param payment The details of the token payment.\\n\\tfunction fund(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage usersDeposit,\\n\\t\\tuint256 projectId,\\n\\t\\taddress depositor,\\n\\t\\tTokenPayment calldata payment\\n\\t) internal returns (uint256) {\\n\\t\\tData storage project = projects[projectId];\\n\\n\\t\\trequire(\\n\\t\\t\\tpayment.amount >= project.minDeposit &&\\n\\t\\t\\t\\tpayment.amount <= project.fundingGoal,\\n\\t\\t\\t\\\"Invalid funding amount\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tproject.status() == Status.FundingPeriod,\\n\\t\\t\\t\\\"Cannot fund project after deadline\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\taddress(payment.token) == project.fundingToken,\\n\\t\\t\\t\\\"Wrong token payment\\\"\\n\\t\\t);\\n\\n\\t\\tpayment.receiveToken();\\n\\n\\t\\tproject.collectedFunds = project.collectedFunds.add(payment.amount);\\n\\t\\tusersDeposit[depositor] = usersDeposit[depositor].add(payment.amount);\\n\\n\\t\\treturn project.collectedFunds;\\n\\t}\\n\\n\\t// Deposit Functions\\n\\n\\t/// @dev Retrieves and updates the user's deposit for a specific project.\\n\\t/// @param projects The mapping of project IDs to project data.\\n\\t/// @param usersDeposit The mapping of depositor addresses to their deposit amounts.\\n\\t/// @param projectId The ID of the project to retrieve the deposit for.\\n\\t/// @param depositor The address of the depositor.\\n\\t/// @return project The project data.\\n\\t/// @return depositAmount The amount of deposit for the user.\\n\\tfunction takeDeposit(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage usersDeposit,\\n\\t\\tuint256 projectId,\\n\\t\\taddress depositor\\n\\t) internal returns (Data memory project, uint256 depositAmount) {\\n\\t\\tproject = projects[projectId];\\n\\t\\trequire(project.id != 0, \\\"Invalid project ID\\\");\\n\\t\\trequire(\\n\\t\\t\\tproject.status() == Status.Successful,\\n\\t\\t\\t\\\"Project not yet successful\\\"\\n\\t\\t);\\n\\n\\t\\tdepositAmount = usersDeposit[depositor];\\n\\t\\trequire(depositAmount > 0, \\\"No deposit found\\\");\\n\\n\\t\\t// Update the deposit amount to zero\\n\\t\\tusersDeposit[depositor] = 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x78cc757d4cc7a34b6f7627244c3005ad592564cfa70e170a440e521717d4fe5a\",\"license\":\"MIT\"},\"contracts/lib/TokenPayments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SFT } from \\\"../modules/SFT.sol\\\";\\n\\n// @title ERC20TokenPayment\\n// @dev Struct to define a payment with ERC20 tokens\\nstruct ERC20TokenPayment {\\n\\tIERC20 token; // The ERC20 token contract address\\n\\tuint256 amount; // The amount of tokens to be transferred\\n}\\n\\n// @title TokenPayment\\n// @dev Struct to define a payment with different token types including Native tokens\\nstruct TokenPayment {\\n\\taddress token; // Address of the token contract (0 address for Native tokens)\\n\\tuint256 amount; // The amount of tokens to be transferred\\n\\tuint256 nonce; // Nonce for SFTs (0 for ERC20)\\n}\\n\\n/**\\n * @title TokenPayments Library\\n * @dev This library provides functions for handling payments in various token types, including ERC20 tokens,\\n *      SFT (Semi-Fungible Tokens), and Native tokens (ETH). It includes methods for receiving and transferring\\n *      tokens from different sources. The library is designed to handle payments securely and ensure that\\n *      the correct amount of tokens is transferred to the contract.\\n *\\n * The library handles:\\n * - ERC20 token payments\\n * - SFT (Semi-Fungible Token) payments\\n * - Native (ETH) payments\\n *\\n * Note: ERC20 tokens and SFTs must be approved for transfer before calling these functions.\\n */\\nlibrary TokenPayments {\\n\\t/**\\n\\t * @notice Accepts an ERC20TokenPayment and transfers the tokens from the sender\\n\\t * @param self The ERC20TokenPayment struct containing token and amount to transfer\\n\\t * @dev Calls `receiveERC20` with the sender as the source of funds\\n\\t */\\n\\tfunction accept(ERC20TokenPayment calldata self) internal {\\n\\t\\tTokenPayments.receiveERC20(self, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives ERC20 tokens from the sender and transfers them to the contract\\n\\t * @param payment The ERC20TokenPayment struct containing token and amount to transfer\\n\\t * @dev Transfers ERC20 tokens from the sender to the contract address\\n\\t */\\n\\tfunction receiveERC20(ERC20TokenPayment calldata payment) internal {\\n\\t\\tTokenPayments.receiveERC20(payment, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives ERC20 tokens from a specified address\\n\\t * @param payment The ERC20TokenPayment struct containing token and amount to transfer\\n\\t * @param from The address from which tokens will be transferred\\n\\t * @dev Transfers ERC20 tokens from the given address to the contract address\\n\\t */\\n\\tfunction receiveERC20(\\n\\t\\tERC20TokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\tpayment.token.transferFrom(from, address(this), payment.amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives payments of Native tokens, ERC20 tokens, or SFTs\\n\\t * @param payment The TokenPayment struct containing token address, amount, and nonce\\n\\t * @dev Handles Native tokens (ETH), ERC20 tokens, and SFT tokens based on the token address and nonce\\n\\t *      - For Native tokens, ensures the sent amount matches the expected amount\\n\\t *      - For ERC20 tokens, transfers tokens from the specified address\\n\\t *      - For SFT tokens, transfers tokens using the SFT contract\\n\\t */\\n\\tfunction receiveToken(TokenPayment memory payment) internal {\\n\\t\\treceiveToken(payment, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives payments of Native tokens, ERC20 tokens, or SFTs from a specified address\\n\\t * @param payment The TokenPayment struct containing token address, amount, and nonce\\n\\t * @param from The address from which tokens will be transferred\\n\\t * @dev Handles Native tokens (ETH), ERC20 tokens, and SFT tokens based on the token address and nonce\\n\\t *      - For Native tokens, ensures the sent amount matches the expected amount and sender is correct\\n\\t *      - For ERC20 tokens, transfers tokens from the given address\\n\\t *      - For SFT tokens, transfers tokens using the SFT contract\\n\\t */\\n\\tfunction receiveToken(TokenPayment memory payment, address from) internal {\\n\\t\\tif (payment.token == address(0)) {\\n\\t\\t\\t// Handling Native token payment (ETH)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpayment.amount == msg.value,\\n\\t\\t\\t\\t\\\"Expected payment amount must equal the sent amount\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfrom == msg.sender,\\n\\t\\t\\t\\t\\\"Can receive native payment only from caller\\\"\\n\\t\\t\\t);\\n\\t\\t\\t// No additional actions are required as the Ethereum Virtual Machine handles balance movements\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\t// Handling ERC20 token payment\\n\\t\\t\\tIERC20(payment.token).transferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.amount\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// Handling SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x667e200a73a109b3d650ea42edbfe61e1afe872f3c34ca4a4159769618527d7d\",\"license\":\"MIT\"},\"contracts/main/HST.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { TokenPayment } from \\\"../lib/TokenPayments.sol\\\";\\nimport { SFT } from \\\"../modules/SFT.sol\\\";\\n\\nlibrary NewHousingStakingToken {\\n\\tfunction create() external returns (HousingStakingToken) {\\n\\t\\treturn new HousingStakingToken();\\n\\t}\\n}\\n\\nstruct HstAttributes {\\n\\tTokenPayment[] projectTokens;\\n\\tuint256 projectsShareCheckpoint;\\n\\tuint256 shtRewardPerShare;\\n\\tuint256 shtAmount;\\n\\tuint256 stakeWeight;\\n\\tuint256 lkDuration;\\n\\tuint256[] lkShtNonces;\\n}\\n\\nuint256 constant MIN_EPOCHS_LOCK = 180;\\nuint256 constant MAX_EPOCHS_LOCK = 1080;\\n\\ncontract HousingStakingToken is SFT {\\n\\tusing SafeMath for uint256;\\n\\n\\tstruct HSTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tHstAttributes attributes;\\n\\t}\\n\\n\\tevent MintHstToken(\\n\\t\\taddress indexed to,\\n\\t\\tuint256 nonce,\\n\\t\\tHstAttributes attributes\\n\\t);\\n\\n\\tconstructor() SFT(\\\"Housing Staking Token\\\", \\\"HST\\\") {}\\n\\n\\t/// @notice Mints a new Housing Staking Token (HST) with specified attributes.\\n\\t/// @param projectTokens Array of project tokens associated with the HST.\\n\\t/// @param projectsShareCheckpoint The checkpoint for project share calculations.\\n\\t/// @param shtRewardPerShare The reward per share of SHT.\\n\\t/// @param lkDuration Duration of the lock in epochs.\\n\\t/// @param shtAmount Amount of SHT to be associated with the token.\\n\\t/// @param lkShtNonces Array of nonces associated with locked SHT.\\n\\t/// @param caller Address of the caller requesting the minting.\\n\\t/// @return attr The attributes associated with the minted token.\\n\\tfunction mint(\\n\\t\\tTokenPayment[] calldata projectTokens,\\n\\t\\tuint256 projectsShareCheckpoint,\\n\\t\\tuint256 shtRewardPerShare,\\n\\t\\tuint256 lkDuration,\\n\\t\\tuint256 shtAmount,\\n\\t\\tuint256[] memory lkShtNonces,\\n\\t\\taddress caller\\n\\t) external onlyOwner returns (HstAttributes memory attr) {\\n\\t\\t// Validate lock duration\\n\\t\\trequire(\\n\\t\\t\\tlkDuration >= MIN_EPOCHS_LOCK && lkDuration <= MAX_EPOCHS_LOCK,\\n\\t\\t\\t\\\"Invalid lock duration\\\"\\n\\t\\t);\\n\\n\\t\\trequire(shtAmount > 0 || lkShtNonces.length > 0, \\\"Must send SHT\\\");\\n\\n\\t\\tuint256 projectTokenCount = projectTokens.length;\\n\\t\\trequire(\\n\\t\\t\\tprojectTokenCount > 0 && projectTokenCount <= 10,\\n\\t\\t\\t\\\"Must send approved number of project tokens\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 stakeWeight = shtAmount.mul(lkDuration);\\n\\t\\tattr = HstAttributes({\\n\\t\\t\\tprojectTokens: projectTokens,\\n\\t\\t\\tprojectsShareCheckpoint: projectsShareCheckpoint,\\n\\t\\t\\tshtRewardPerShare: shtRewardPerShare,\\n\\t\\t\\tshtAmount: shtAmount,\\n\\t\\t\\tstakeWeight: stakeWeight,\\n\\t\\t\\tlkDuration: lkDuration,\\n\\t\\t\\tlkShtNonces: lkShtNonces\\n\\t\\t});\\n\\n\\t\\t// Mint the HST token\\n\\t\\tuint256 nonce = _mint(caller, 1, abi.encode(attr));\\n\\n\\t\\temit MintHstToken(caller, nonce, attr);\\n\\t}\\n\\n\\tfunction getAttribute(uint256 nonce) external view returns (HstAttributes memory) {\\n\\t\\treturn abi.decode(\\n\\t\\t\\t_getRawTokenAttributes(nonce),\\n\\t\\t\\t(HstAttributes)\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Retrieves the balance of HST tokens for a specified user.\\n\\t/// @param user Address of the user whose balance is to be retrieved.\\n\\t/// @return balance Array of HSTBalance representing the user's HST holdings.\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (HSTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tHSTBalance[] memory balance = new HSTBalance[](_sftBals.length);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = HSTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (HstAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4b496123e178ddc0e1893dbdf7c99d0eef27367b552d9d1340f00420b8c88b97\",\"license\":\"MIT\"},\"contracts/main/Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"../lib/TokenPayments.sol\\\";\\n\\n/// @title SmartHousing Interface\\n/// @notice Interface for interacting with the SmartHousing contract.\\ninterface ISmartHousing {\\n\\t/// @notice Adds rent payment to the project.\\n\\t/// @param amount The amount of rent to add.\\n\\tfunction addProjectRent(uint256 amount) external;\\n\\n\\t/// @notice Creates a referral ID via a proxy.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The newly created referral ID.\\n\\tfunction createRefIDViaProxy(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) external returns (uint256);\\n\\n\\t/// @notice Adds a new project to the SmartHousing system.\\n\\t/// @param projectAddress The address of the new project.\\n\\tfunction addProject(address projectAddress) external;\\n\\n\\t/// @notice Sets up the SmartHousingToken (SHT) using the provided payment details.\\n\\t/// @param payment The payment details for setting up SHT.\\n\\tfunction setUpSHT(ERC20TokenPayment calldata payment) external;\\n}\\n\\n/// @title User Module Interface\\n/// @notice Interface for interacting with the user module to retrieve referrer information.\\ninterface IUserModule {\\n\\t/// @notice Retrieves the referrer information for a given user.\\n\\t/// @param user The address of the user.\\n\\t/// @return A tuple containing the referrer ID and the referrer address.\\n\\tfunction getReferrer(address user) external view returns (uint256, address);\\n}\\n\",\"keccak256\":\"0xb7263cd1533cfc04e6ca66c894cd411e6e766c4ec1fda2fafe9fe01a6d6d60e0\",\"license\":\"MIT\"},\"contracts/main/SmartHousing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"../lib/TokenPayments.sol\\\";\\nimport \\\"../modules/sht-module/SHT.sol\\\";\\nimport \\\"../project-funding/ProjectFunding.sol\\\";\\nimport \\\"./Interface.sol\\\";\\nimport \\\"./User.sol\\\";\\n\\nimport { Distribution } from \\\"./distribution/Storage.sol\\\";\\nimport { Epochs } from \\\"../lib/Epochs.sol\\\";\\nimport { HousingStakingToken, NewHousingStakingToken, MIN_EPOCHS_LOCK, MAX_EPOCHS_LOCK, HstAttributes } from \\\"./HST.sol\\\";\\nimport { HousingProject } from \\\"../housing-project/HousingProject.sol\\\";\\nimport { rewardshares } from \\\"../housing-project/RewardSharing.sol\\\";\\nimport { LkSHT } from \\\"../modules/LockedSmartHousingToken.sol\\\";\\n\\n/// @title SmartHousing\\n/// @notice SmartHousing enables real estate tokenization for fractional ownership and investment.\\n/// @dev Main contract for the SmartHousing ecosystem. Manages HousingProjects, users, and staking.\\ncontract SmartHousing is ISmartHousing, Ownable, UserModule, ERC1155Holder {\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\tusing Distribution for Distribution.Storage;\\n\\tusing Epochs for Epochs.Storage;\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing SafeMath for uint256;\\n\\n\\t// Contract addresses and instances\\n\\taddress public projectFundingAddress;\\n\\taddress public coinbaseAddress;\\n\\taddress public shtTokenAddress;\\n\\tHousingStakingToken public hst;\\n\\tLkSHT public lkSht;\\n\\n\\t// Storage for distribution and epochs\\n\\tDistribution.Storage public distributionStorage;\\n\\tEpochs.Storage public epochs;\\n\\n\\t// Permission management\\n\\tenum Permissions {\\n\\t\\tNONE,\\n\\t\\tHOUSING_PROJECT\\n\\t}\\n\\tmapping(address => Permissions) public permissions;\\n\\tEnumerableSet.AddressSet private _projectsToken; // List of project SFT addresses\\n\\n\\t/// @notice Constructor to initialize SmartHousing.\\n\\t/// @param coinbase Address of the coinbase.\\n\\t/// @param projectFunding Address of the ProjectFunding contract.\\n\\tconstructor(address coinbase, address projectFunding) {\\n\\t\\tcoinbaseAddress = coinbase;\\n\\t\\tprojectFundingAddress = projectFunding;\\n\\t\\thst = NewHousingStakingToken.create();\\n\\t\\tlkSht = ProjectFunding(projectFundingAddress).lkSht();\\n\\n\\t\\t// Initialize epochs and periods (24 hours for mainnet, 30 minutes for testing)\\n\\t\\tepochs.initialize(30 minutes);\\n\\t}\\n\\n\\t/// @notice Register a new user or get the referral ID if already registered.\\n\\t/// @param userAddr Address of the user.\\n\\t/// @param referrerId Referral ID of the referrer.\\n\\t/// @return User ID.\\n\\tfunction createRefIDViaProxy(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) external onlyProjectFunding returns (uint256) {\\n\\t\\treturn _createOrGetUserId(userAddr, referrerId);\\n\\t}\\n\\n\\t/// @notice Setup SHT token and distribute funds.\\n\\t/// @param payment Token payment details for SHT setup.\\n\\tfunction setUpSHT(ERC20TokenPayment calldata payment) external {\\n\\t\\trequire(msg.sender == coinbaseAddress, \\\"Unauthorized\\\");\\n\\t\\trequire(shtTokenAddress == address(0), \\\"SHT already set\\\");\\n\\t\\tshtTokenAddress = address(payment.token);\\n\\t\\trequire(\\n\\t\\t\\tpayment.amount == SHT.ECOSYSTEM_DISTRIBUTION_FUNDS,\\n\\t\\t\\t\\\"Incorrect SHT amount\\\"\\n\\t\\t);\\n\\t\\tpayment.accept();\\n\\n\\t\\tdistributionStorage.setTotalFunds(payment.amount);\\n\\t}\\n\\n\\t/// @notice Add a new project and set its permissions.\\n\\t/// @param projectAddress Address of the new project.\\n\\tfunction addProject(address projectAddress) external onlyProjectFunding {\\n\\t\\t_setPermissions(projectAddress, Permissions.HOUSING_PROJECT);\\n\\t\\tHousingProject project = HousingProject(projectAddress);\\n\\t\\taddress projectSFTaddress = address(project.projectSFT());\\n\\t\\t_projectsToken.add(projectSFTaddress);\\n\\n\\t\\tdistributionStorage.addProject(\\n\\t\\t\\tprojectAddress,\\n\\t\\t\\tprojectSFTaddress,\\n\\t\\t\\tproject.getMaxSupply()\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Add rent to a project and update distribution storage.\\n\\t/// @param amount Amount of rent received.\\n\\tfunction addProjectRent(uint256 amount) external onlyHousingProject {\\n\\t\\taddress projectAddress = msg.sender;\\n\\t\\tdistributionStorage.addProjectRent(projectAddress, amount);\\n\\t}\\n\\n\\t/// @notice Stake tokens for rewards.\\n\\t/// @param stakingTokens Array of token payments for staking.\\n\\t/// @param epochsLock Lock period in epochs.\\n\\t/// @param referrerId Referral ID of the referrer.\\n\\tfunction stake(\\n\\t\\tTokenPayment[] calldata stakingTokens,\\n\\t\\tuint256 epochsLock,\\n\\t\\tuint256 referrerId\\n\\t) external {\\n\\t\\trequire(\\n\\t\\t\\tepochsLock >= MIN_EPOCHS_LOCK && epochsLock <= MAX_EPOCHS_LOCK,\\n\\t\\t\\t\\\"Invalid epochs lock period\\\"\\n\\t\\t);\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\t_createOrGetUserId(caller, referrerId);\\n\\t\\tdistributionStorage.generateRewards(epochs);\\n\\n\\t\\tHstAttributes memory newAttr = _mintHstToken(\\n\\t\\t\\tstakingTokens,\\n\\t\\t\\tdistributionStorage.projectsStakingRewards.checkpoint,\\n\\t\\t\\tdistributionStorage.shtRewardPerShare,\\n\\t\\t\\tepochsLock,\\n\\t\\t\\taddress(lkSht)\\n\\t\\t);\\n\\n\\t\\tdistributionStorage.enterStaking(newAttr.stakeWeight);\\n\\t}\\n\\n\\t/// @notice Check if a user can claim rewards.\\n\\t/// @param user Address of the user.\\n\\t/// @param tokenNonce Nonce of the token.\\n\\t/// @return True if the user can claim rewards, otherwise false.\\n\\tfunction userCanClaim(\\n\\t\\taddress user,\\n\\t\\tuint256 tokenNonce\\n\\t) public view returns (bool) {\\n\\t\\tbool hasSft = hst.hasSFT(user, tokenNonce);\\n\\t\\tif (!hasSft) return false;\\n\\n\\t\\tbool rewardsCanBeGenerated = distributionStorage\\n\\t\\t\\t.lastFundsDispatchTimestamp < block.timestamp;\\n\\t\\tif (rewardsCanBeGenerated) return true;\\n\\n\\t\\tHstAttributes memory hstAttr = hst.getAttribute(tokenNonce);\\n\\t\\treturn\\n\\t\\t\\thstAttr.shtRewardPerShare < distributionStorage.shtRewardPerShare;\\n\\t}\\n\\n\\t/// @notice Claim rewards and update token attributes.\\n\\t/// @param hstNonce Nonce of the HST token.\\n\\t/// @param referrerId Referral ID of the referrer.\\n\\t/// @return newHstNonce New HST nonce.\\n\\tfunction claimRewards(\\n\\t\\tuint256 hstNonce,\\n\\t\\tuint256 referrerId\\n\\t) external returns (uint256 newHstNonce) {\\n\\t\\taddress caller = msg.sender;\\n\\t\\t_createOrGetUserId(caller, referrerId);\\n\\n\\t\\tuint256 callerHstBal = hst.balanceOf(caller, hstNonce);\\n\\t\\trequire(callerHstBal > 0, \\\"No HST token balance at nonce\\\");\\n\\n\\t\\tdistributionStorage.generateRewards(epochs);\\n\\t\\t(uint256 claimedSHT, HstAttributes memory hstAttr) = distributionStorage\\n\\t\\t\\t.claimRewards(hst.getAttribute(hstNonce));\\n\\t\\tuint256 rentRewards = 0;\\n\\n\\t\\t// Claim rent rewards from HousingProjects\\n\\t\\tfor (uint256 i = 0; i < hstAttr.projectTokens.length; i++) {\\n\\t\\t\\tTokenPayment memory projectToken = hstAttr.projectTokens[i];\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tprojectToken.token != address(0),\\n\\t\\t\\t\\t\\\"Invalid project address\\\"\\n\\t\\t\\t);\\n\\t\\t\\taddress projectAddress = distributionStorage\\n\\t\\t\\t\\t.projectSftToProjectAddress[projectToken.token];\\n\\n\\t\\t\\t// Call the external contract's claimRentReward function\\n\\t\\t\\t(\\n\\t\\t\\t\\t,\\n\\t\\t\\t\\trewardshares memory rewardShares,\\n\\t\\t\\t\\tuint256 newNonce\\n\\t\\t\\t) = HousingProject(projectAddress).claimRentReward(\\n\\t\\t\\t\\t\\tprojectToken.nonce\\n\\t\\t\\t\\t);\\n\\t\\t\\thstAttr.projectTokens[i].nonce = newNonce;\\n\\n\\t\\t\\trentRewards = rentRewards.add(rewardShares.userValue);\\n\\t\\t}\\n\\n\\t\\t// Update the attributes in the hst token\\n\\t\\tnewHstNonce = hst.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\thstNonce,\\n\\t\\t\\tcallerHstBal,\\n\\t\\t\\tabi.encode(hstAttr)\\n\\t\\t);\\n\\n\\t\\tERC20Burnable shtToken = ERC20Burnable(shtTokenAddress);\\n\\t\\tif (claimedSHT > 0) {\\n\\t\\t\\tuint256 referrerValue = claimedSHT.mul(25).div(1000);\\n\\t\\t\\tclaimedSHT = claimedSHT.sub(referrerValue);\\n\\t\\t\\t(, address referrerAddr) = getReferrer(caller);\\n\\t\\t\\tif (referrerAddr != address(0)) {\\n\\t\\t\\t\\tshtToken.transfer(referrerAddr, referrerValue);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tshtToken.burn(referrerValue);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tshtToken.transfer(caller, claimedSHT.add(rentRewards));\\n\\t}\\n\\n\\t/// @notice Get project distribution details.\\n\\t/// @param project Address of the project.\\n\\t/// @return Project distribution data.\\n\\tfunction projectDets(\\n\\t\\taddress project\\n\\t) public view returns (Distribution.ProjectDistributionData memory) {\\n\\t\\treturn distributionStorage.projectDets[project];\\n\\t}\\n\\n\\t/// @notice Get the list of project tokens.\\n\\t/// @return Array of project token addresses.\\n\\tfunction projectsToken() public view returns (address[] memory) {\\n\\t\\treturn _projectsToken.values();\\n\\t}\\n\\n\\t// Internal functions\\n\\n\\t/// @notice Set permissions for an address.\\n\\t/// @param addr Address to set permissions for.\\n\\t/// @param perm Permissions to set.\\n\\tfunction _setPermissions(address addr, Permissions perm) internal {\\n\\t\\tpermissions[addr] = perm;\\n\\t}\\n\\n\\tfunction _prepareProjectTokensAndLkShtNonces(\\n\\t\\tTokenPayment[] calldata payments,\\n\\t\\taddress lkShtAddress\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tTokenPayment[] memory projectTokens,\\n\\t\\t\\tuint256[] memory lkShtNonces\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 projectTokensCount = 0;\\n\\t\\tuint256 lkShtNoncesCount = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < payments.length; i++) {\\n\\t\\t\\tTokenPayment memory payment = payments[i];\\n\\n\\t\\t\\tif (payment.token == shtTokenAddress) {\\n\\t\\t\\t\\t// Do nothing\\n\\t\\t\\t} else if (payment.token == lkShtAddress) {\\n\\t\\t\\t\\tlkShtNoncesCount++;\\n\\t\\t\\t} else if (_projectsToken.contains(payment.token)) {\\n\\t\\t\\t\\tprojectTokensCount++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"Invalid Sent Token\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tprojectTokens = new TokenPayment[](projectTokensCount);\\n\\t\\tlkShtNonces = new uint256[](lkShtNoncesCount);\\n\\t}\\n\\n\\t/// @notice Prepare project tokens and LkSHT for staking.\\n\\t/// @param payments Array of tokens to prepare.\\n\\t/// @param epochsLock Number of epochs to lock.\\n\\t/// @param projectsShareCheckpoint Number of epochs to lock.\\n\\t/// @param lkShtAddress Address of the LkSHT token.\\n\\t/// @return Attributes of the new HST token.\\n\\tfunction _mintHstToken(\\n\\t\\tTokenPayment[] calldata payments,\\n\\t\\tuint256 projectsShareCheckpoint,\\n\\t\\tuint256 shtRewardPerShare,\\n\\t\\tuint256 epochsLock,\\n\\t\\taddress lkShtAddress\\n\\t) internal returns (HstAttributes memory) {\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\tuint256 projectTokenCount = 0;\\n\\t\\tuint256 lkShtNoncesCount = 0;\\n\\t\\tuint256 shtAmount = 0;\\n\\n\\t\\t(\\n\\t\\t\\tTokenPayment[] memory projectTokens,\\n\\t\\t\\tuint256[] memory lkShtNonces\\n\\t\\t) = _prepareProjectTokensAndLkShtNonces(payments, lkShtAddress);\\n\\t\\trequire(\\n\\t\\t\\t(projectTokens.length + lkShtNonces.length) < 10,\\n\\t\\t\\t\\\"Max SFT tokens exceeded\\\"\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < payments.length; i++) {\\n\\t\\t\\tTokenPayment memory payment = payments[i];\\n\\n\\t\\t\\tif (payment.token == shtTokenAddress) {\\n\\t\\t\\t\\tshtAmount = shtAmount.add(payment.amount);\\n\\t\\t\\t} else if (payment.token == lkShtAddress) {\\n\\t\\t\\t\\tuint256 lkShtBal = lkSht.balanceOf(caller, payment.nonce);\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tlkShtBal == payment.amount,\\n\\t\\t\\t\\t\\t\\\"Must send all LkSHT balance\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tshtAmount = shtAmount.add(lkShtBal);\\n\\t\\t\\t\\tlkShtNonces[lkShtNoncesCount] = payment.nonce;\\n\\t\\t\\t\\tlkShtNoncesCount++;\\n\\t\\t\\t} else if (_projectsToken.contains(payment.token)) {\\n\\t\\t\\t\\tprojectTokens[projectTokenCount] = payment;\\n\\t\\t\\t\\tprojectTokenCount++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"Invalid Sent Token\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tpayment.receiveToken(caller);\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\thst.mint(\\n\\t\\t\\t\\tprojectTokens,\\n\\t\\t\\t\\tprojectsShareCheckpoint,\\n\\t\\t\\t\\tshtRewardPerShare,\\n\\t\\t\\t\\tepochsLock,\\n\\t\\t\\t\\tshtAmount,\\n\\t\\t\\t\\tlkShtNonces,\\n\\t\\t\\t\\tcaller\\n\\t\\t\\t);\\n\\t}\\n\\n\\t// Modifiers\\n\\n\\t/// @notice Modifier to check if caller is authorized to interact with the contract.\\n\\tmodifier onlyProjectFunding() {\\n\\t\\trequire(msg.sender == projectFundingAddress, \\\"Not authorized\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Modifier to check if caller is a housing project.\\n\\tmodifier onlyHousingProject() {\\n\\t\\trequire(\\n\\t\\t\\tpermissions[msg.sender] == Permissions.HOUSING_PROJECT,\\n\\t\\t\\t\\\"Not authorized\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0x804bcf0fa61f24cf97f093795d4f17826b26bf0fdf7badae4a2a3f3f119264a8\",\"license\":\"MIT\"},\"contracts/main/User.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./Interface.sol\\\";\\n\\nabstract contract UserModule is IUserModule {\\n\\tstruct ReferralInfo {\\n\\t\\tuint256 id;\\n\\t\\taddress referralAddress;\\n\\t}\\n\\n\\tstruct User {\\n\\t\\tuint256 id;\\n\\t\\taddress addr;\\n\\t\\tuint256 referrerId;\\n\\t\\tuint256[] referrals;\\n\\t}\\n\\n\\tuint256 public userCount;\\n\\tmapping(address => User) public users;\\n\\tmapping(uint256 => address) public userIdToAddress;\\n\\n\\tevent UserRegistered(\\n\\t\\tuint256 userId,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 referrerId\\n\\t);\\n\\tevent ReferralAdded(uint256 referrerId, uint256 referralId);\\n\\n\\t/// @notice Register a new user or get the referral ID if already registered.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The ID of the registered user.\\n\\tfunction createRefID(uint256 referrerId) external returns (uint256) {\\n\\t\\taddress userAddr = msg.sender;\\n\\t\\treturn _createOrGetUserId(userAddr, referrerId);\\n\\t}\\n\\n\\t/// @notice Gets the referrer and referrer ID of a user.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return referrerId The ID of the referrer, 0 if none.\\n\\t/// @return referrerAddress The address of the referrer, address(0) if none.\\n\\tfunction getReferrer(\\n\\t\\taddress userAddress\\n\\t) public view returns (uint256 referrerId, address referrerAddress) {\\n\\t\\tUser storage user = users[userAddress];\\n\\t\\treferrerId = user.referrerId;\\n\\t\\treferrerAddress = userIdToAddress[referrerId];\\n\\t}\\n\\n\\t/// @notice Gets the user ID for a given address.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return userId The ID of the user.\\n\\tfunction getUserId(\\n\\t\\taddress userAddress\\n\\t) external view returns (uint256 userId) {\\n\\t\\treturn users[userAddress].id;\\n\\t}\\n\\n\\t/// @notice Retrieves the referrals of a user.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return referrals An array of `ReferralInfo` structs representing the user's referrals.\\n\\tfunction getReferrals(\\n\\t\\taddress userAddress\\n\\t) external view returns (ReferralInfo[] memory) {\\n\\t\\tuint256[] memory referralIds = users[userAddress].referrals;\\n\\t\\tReferralInfo[] memory referrals = new ReferralInfo[](\\n\\t\\t\\treferralIds.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < referralIds.length; i++) {\\n\\t\\t\\tuint256 id = referralIds[i];\\n\\t\\t\\taddress refAddr = userIdToAddress[id];\\n\\t\\t\\treferrals[i] = ReferralInfo({ id: id, referralAddress: refAddr });\\n\\t\\t}\\n\\n\\t\\treturn referrals;\\n\\t}\\n\\n\\t/// @notice Internal function to create or get the user ID.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The ID of the user.\\n\\tfunction _createOrGetUserId(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) internal returns (uint256) {\\n\\t\\tUser storage user = users[userAddr];\\n\\n\\t\\t// If user already exists, return the existing ID\\n\\t\\tif (user.id != 0) {\\n\\t\\t\\treturn user.id;\\n\\t\\t}\\n\\n\\t\\t// Increment user count and assign new user ID\\n\\t\\tuserCount++;\\n\\t\\tusers[userAddr] = User({\\n\\t\\t\\tid: userCount,\\n\\t\\t\\taddr: userAddr,\\n\\t\\t\\treferrerId: referrerId,\\n\\t\\t\\treferrals: new uint256[](0)\\n\\t\\t});\\n\\t\\tuserIdToAddress[userCount] = userAddr;\\n\\n\\t\\t// Add user to referrer's referrals list, if applicable\\n\\t\\tif (\\n\\t\\t\\treferrerId != 0 &&\\n\\t\\t\\treferrerId != userCount &&\\n\\t\\t\\tuserIdToAddress[referrerId] != address(0)\\n\\t\\t) {\\n\\t\\t\\tusers[userIdToAddress[referrerId]].referrals.push(userCount);\\n\\t\\t\\temit ReferralAdded(referrerId, userCount);\\n\\t\\t}\\n\\n\\t\\temit UserRegistered(userCount, userAddr, referrerId);\\n\\t\\treturn userCount;\\n\\t}\\n}\\n\",\"keccak256\":\"0x03282c2f6767d7cd20c6331e559b41dcfea2b27447bf974b330c7a3fe4c4459e\",\"license\":\"MIT\"},\"contracts/main/distribution/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../lib/Epochs.sol\\\";\\nimport \\\"../../housing-project/HousingProject.sol\\\";\\nimport \\\"../../modules/sht-module/Economics.sol\\\";\\n\\nimport { HstAttributes } from \\\"../HST.sol\\\";\\n\\nlibrary ProjectStakingRewards {\\n\\t/// @notice Structure to track staking rewards.\\n\\t/// @param toShare The amount available for distribution.\\n\\t/// @param checkpoint The checkpoint to track distributed rewards.\\n\\tstruct Value {\\n\\t\\tuint256 toShare;\\n\\t\\tuint256 checkpoint;\\n\\t}\\n\\n\\t/// @notice Adds a specified value to staking rewards.\\n\\t/// @param self The storage struct containing staking rewards.\\n\\t/// @param rhs The value to add to staking rewards.\\n\\tfunction add(Value storage self, uint256 rhs) internal {\\n\\t\\tself.toShare += rhs;\\n\\t\\tself.checkpoint += rhs;\\n\\t}\\n\\n\\t/// @notice Subtracts a specified value from staking rewards.\\n\\t/// @param self The storage struct containing staking rewards.\\n\\t/// @param rhs The value to subtract from staking rewards.\\n\\tfunction sub(Value storage self, uint256 rhs) internal {\\n\\t\\tself.toShare -= rhs;\\n\\t}\\n}\\n\\n/// @title Distribution Library for SmartHousing Contract\\n/// @notice This library manages the distribution of staking rewards and project rent across housing projects within the SmartHousing ecosystem.\\n/// @dev The library handles the allocation of received rents to specific housing projects, computes staking rewards, and allows users to claim their rewards.\\nlibrary Distribution {\\n\\tusing Epochs for Epochs.Storage;\\n\\tusing Entities for Entities.Value;\\n\\tusing ProjectStakingRewards for ProjectStakingRewards.Value;\\n\\n\\tstruct Storage {\\n\\t\\tuint256 totalFunds; // Total funds available for distribution\\n\\t\\tuint256 projectsTotalReceivedRents; // Total rents received across all projects\\n\\t\\tmapping(address => ProjectDistributionData) projectDets; // Project-specific distribution data\\n\\t\\tmapping(address => address) projectSftToProjectAddress; // Mapping of project SFT to project addresses\\n\\t\\tuint256 lastFundsDispatchTimestamp; // Timestamp of the last fund distribution\\n\\t\\tuint256 shtTotalStakeWeight; // Total weight of all staked SHT tokens\\n\\t\\tuint256 shtRewardPerShare; // Reward per share for SHT stakers\\n\\t\\tuint256 shtStakingRewards; // Total rewards allocated for SHT staking\\n\\t\\tProjectStakingRewards.Value projectsStakingRewards; // Accumulated staking rewards for projects\\n\\t\\tEntities.Value entityFunds; // Funds allocated to entities\\n\\t}\\n\\n\\tstruct ProjectDistributionData {\\n\\t\\tuint256 maxShares; // Maximum supply of shares for the project\\n\\t\\tuint256 receivedRents; // Total rents received for the project\\n\\t}\\n\\n\\t/// @notice Sets the total funds for distribution and the genesis epoch. Can only be called once.\\n\\t/// @param self The storage struct to set the total funds and genesis epoch.\\n\\t/// @param amount The amount of total funds to set.\\n\\tfunction setTotalFunds(Storage storage self, uint256 amount) internal {\\n\\t\\trequire(self.totalFunds == 0, \\\"Total funds already set\\\");\\n\\t\\tself.totalFunds = amount;\\n\\t\\tself.lastFundsDispatchTimestamp = block.timestamp;\\n\\t}\\n\\n\\t/// @notice Returns the total funds available for distribution.\\n\\t/// @param self The storage struct containing the total funds.\\n\\t/// @return The total funds.\\n\\tfunction getTotalFunds(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\treturn self.totalFunds;\\n\\t}\\n\\n\\t/// @notice Adds rent received for a specific project and updates the total received rents and project-specific data.\\n\\t/// @dev Updates the total amount of rent received across all projects and updates the specific project data.\\n\\t/// If the `maxShares` for the project has not been set, it retrieves and sets it from the `HousingProject` contract.\\n\\t/// @param self The storage struct for the `Distribution` contract where project and rent data is stored.\\n\\t/// @param projectAddress The address of the project whose rent is being added.\\n\\t/// @param amount The amount of rent received to be added to the project and total received rents.\\n\\tfunction addProjectRent(\\n\\t\\tStorage storage self,\\n\\t\\taddress projectAddress,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\tself.projectsTotalReceivedRents += amount;\\n\\n\\t\\tProjectDistributionData storage projectData = self.projectDets[\\n\\t\\t\\tprojectAddress\\n\\t\\t];\\n\\n\\t\\t// If the maxShares for the project hasn't been set, retrieve and set it from the HousingProject contract.\\n\\t\\tif (projectData.maxShares == 0) {\\n\\t\\t\\tprojectData.maxShares = HousingProject(projectAddress)\\n\\t\\t\\t\\t.getMaxSupply();\\n\\t\\t}\\n\\n\\t\\tprojectData.receivedRents += amount;\\n\\t}\\n\\n\\t/// @notice Adds a new project to the distribution system.\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param projectAddress The address of the new project.\\n\\t/// @param projectSFTaddress The address of the project's SFT token.\\n\\t/// @param maxShares The maximum shares for the project.\\n\\tfunction addProject(\\n\\t\\tStorage storage self,\\n\\t\\taddress projectAddress,\\n\\t\\taddress projectSFTaddress,\\n\\t\\tuint256 maxShares\\n\\t) internal {\\n\\t\\tself.projectDets[projectAddress].maxShares = maxShares;\\n\\t\\tself.projectSftToProjectAddress[projectSFTaddress] = projectAddress;\\n\\t}\\n\\n\\t/// @notice Computes emissions for a specific epoch based on provided timestamps.\\n\\t/// @param epochs The storage struct containing epoch information.\\n\\t/// @param epoch The epoch for which to compute emissions.\\n\\t/// @param lastTimestamp The timestamp of the last reward generation.\\n\\t/// @param latestTimestamp The current timestamp.\\n\\t/// @return The computed emissions for the specified time range within the epoch.\\n\\tfunction _computeEdgeEmissions(\\n\\t\\tEpochs.Storage memory epochs,\\n\\t\\tuint256 epoch,\\n\\t\\tuint256 lastTimestamp,\\n\\t\\tuint256 latestTimestamp\\n\\t) private pure returns (uint256) {\\n\\t\\t(uint256 startTimestamp, uint256 endTimestamp) = epochs\\n\\t\\t\\t.epochEdgeTimestamps(epoch);\\n\\n\\t\\t// Determine the bounds for emission calculation.\\n\\t\\tuint256 upperBoundTime;\\n\\t\\tuint256 lowerBoundTime;\\n\\n\\t\\t// Case 1: The latest timestamp is within the epoch.\\n\\t\\tif (\\n\\t\\t\\tstartTimestamp <= latestTimestamp && latestTimestamp <= endTimestamp\\n\\t\\t) {\\n\\t\\t\\tupperBoundTime = latestTimestamp;\\n\\t\\t\\tlowerBoundTime = startTimestamp;\\n\\t\\t}\\n\\t\\t// Case 2: The last timestamp is within the epoch.\\n\\t\\telse if (\\n\\t\\t\\tstartTimestamp <= lastTimestamp && lastTimestamp <= endTimestamp\\n\\t\\t) {\\n\\t\\t\\tupperBoundTime = latestTimestamp <= endTimestamp\\n\\t\\t\\t\\t? latestTimestamp\\n\\t\\t\\t\\t: endTimestamp;\\n\\t\\t\\tlowerBoundTime = lastTimestamp;\\n\\t\\t}\\n\\t\\t// Case 3: Invalid timestamps.\\n\\t\\telse {\\n\\t\\t\\trevert(\\\"Router._computeEdgeEmissions: Invalid timestamps\\\");\\n\\t\\t}\\n\\n\\t\\t// Calculate emissions based on the time range.\\n\\t\\treturn\\n\\t\\t\\tEmission.throughTimeRange(\\n\\t\\t\\t\\tepoch,\\n\\t\\t\\t\\tupperBoundTime - lowerBoundTime,\\n\\t\\t\\t\\tepochs.epochLength\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice Generates rewards for the elapsed epochs since the last funds dispatch.\\n\\t/// @dev The rewards are computed per second for precision and distributed across the system.\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param epochs The storage struct containing epoch information.\\n\\tfunction generateRewards(\\n\\t\\tStorage storage self,\\n\\t\\tEpochs.Storage storage epochs\\n\\t) internal {\\n\\t\\tuint256 currentTimestamp = block.timestamp;\\n\\t\\tuint256 lastTimestamp = self.lastFundsDispatchTimestamp;\\n\\n\\t\\t// Return early if no time has passed since the last dispatch.\\n\\t\\tif (currentTimestamp <= lastTimestamp) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 lastGenerateEpoch = epochs.computeEpoch(lastTimestamp);\\n\\t\\tuint256 toDispatch = _computeEdgeEmissions(\\n\\t\\t\\tepochs,\\n\\t\\t\\tlastGenerateEpoch,\\n\\t\\t\\tlastTimestamp,\\n\\t\\t\\tcurrentTimestamp\\n\\t\\t);\\n\\n\\t\\tuint256 currentEpoch = epochs.currentEpoch();\\n\\t\\tif (currentEpoch > lastGenerateEpoch) {\\n\\t\\t\\tuint256 intermediateEpochs = currentEpoch - lastGenerateEpoch - 1;\\n\\n\\t\\t\\t// Include rewards for all intermediate epochs.\\n\\t\\t\\tif (intermediateEpochs > 1) {\\n\\t\\t\\t\\ttoDispatch += Emission.throughEpochRange(\\n\\t\\t\\t\\t\\tlastGenerateEpoch,\\n\\t\\t\\t\\t\\tlastGenerateEpoch + intermediateEpochs\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\ttoDispatch += _computeEdgeEmissions(\\n\\t\\t\\t\\tepochs,\\n\\t\\t\\t\\tcurrentEpoch,\\n\\t\\t\\t\\tlastTimestamp,\\n\\t\\t\\t\\tcurrentTimestamp\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Convert the total dispatched value into entity-specific funds.\\n\\t\\tEntities.Value memory entitiesValue = Entities.fromTotalValue(\\n\\t\\t\\ttoDispatch\\n\\t\\t);\\n\\n\\t\\t// Allocate staking rewards and update entity funds.\\n\\t\\tuint256 stakingRewards = entitiesValue.staking;\\n\\t\\tentitiesValue.staking = 0;\\n\\t\\tself.entityFunds.add(entitiesValue);\\n\\n\\t\\t// Calculate and distribute the share for SHT stakers.\\n\\t\\tuint256 shtStakersShare = (stakingRewards * 7) / 10;\\n\\n\\t\\tuint256 totalShtWeight = self.shtTotalStakeWeight;\\n\\t\\tif (totalShtWeight > 0) {\\n\\t\\t\\t// Increase reward per share based on the stakers' share.\\n\\t\\t\\tuint256 rpsIncrease = (shtStakersShare * DIVISION_SAFETY_CONST) /\\n\\t\\t\\t\\ttotalShtWeight;\\n\\t\\t\\tself.shtRewardPerShare += rpsIncrease;\\n\\t\\t}\\n\\n\\t\\tself.shtStakingRewards += shtStakersShare;\\n\\t\\tself.projectsStakingRewards.add(stakingRewards - shtStakersShare);\\n\\n\\t\\t// Update the last funds dispatch timestamp to the current timestamp.\\n\\t\\tself.lastFundsDispatchTimestamp = currentTimestamp;\\n\\t}\\n\\n\\t/// @notice Claims staking rewards for SHT holders based on their stake and updates their rewards balance.\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param attr The attributes struct for which rewards are being claimed.\\n\\t/// @return The total amount of rewards claimed and the updated attributes struct.\\n\\tfunction claimRewards(\\n\\t\\tStorage storage self,\\n\\t\\tHstAttributes memory attr\\n\\t) internal returns (uint256, HstAttributes memory) {\\n\\t\\tuint256 shtClaimed = 0;\\n\\n\\t\\t// Retrieve the checkpoint value for project token staking rewards.\\n\\t\\tuint256 ptRewardCheckpoint = self.projectsStakingRewards.checkpoint;\\n\\n\\t\\t// If there are project staking rewards available, calculate the rewards for each project token.\\n\\t\\tif (ptRewardCheckpoint > 0) {\\n\\t\\t\\t// Iterate through each project token associated with the user.\\n\\t\\t\\tfor (uint256 i = 0; i < attr.projectTokens.length; i++) {\\n\\t\\t\\t\\t// Compute the reward for the project token based on the user's share and the current checkpoint.\\n\\t\\t\\t\\tshtClaimed += computeRewardForPT(\\n\\t\\t\\t\\t\\tself,\\n\\t\\t\\t\\t\\tattr.projectTokens[i],\\n\\t\\t\\t\\t\\tattr.projectsShareCheckpoint,\\n\\t\\t\\t\\t\\tptRewardCheckpoint\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Ensure that the claimed rewards do not exceed the available staking rewards for the projects.\\n\\t\\t\\tif (self.projectsStakingRewards.toShare < shtClaimed) {\\n\\t\\t\\t\\tshtClaimed = self.projectsStakingRewards.toShare;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Deduct the claimed rewards from the total available project staking rewards.\\n\\t\\t\\tself.projectsStakingRewards.toShare -= shtClaimed;\\n\\t\\t}\\n\\n\\t\\t// Retrieve the current reward per share for SHT stakers.\\n\\t\\tuint256 shtRPS = self.shtRewardPerShare;\\n\\n\\t\\t// If the current reward per share is greater than the last recorded reward per share for the user, calculate the additional rewards.\\n\\t\\tif (shtRPS > 0 && attr.shtRewardPerShare < shtRPS) {\\n\\t\\t\\tuint256 shtReward = ((shtRPS - attr.shtRewardPerShare) *\\n\\t\\t\\t\\tattr.stakeWeight) / DIVISION_SAFETY_CONST;\\n\\n\\t\\t\\t// Ensure that the reward calculated does not exceed the available SHT staking rewards.\\n\\t\\t\\tif (self.shtStakingRewards < shtReward) {\\n\\t\\t\\t\\tshtClaimed = self.shtStakingRewards;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Deduct the claimed SHT rewards from the total available SHT staking rewards.\\n\\t\\t\\tself.shtStakingRewards -= shtReward;\\n\\n\\t\\t\\t// Add the SHT rewards to the total claimed rewards.\\n\\t\\t\\tshtClaimed += shtReward;\\n\\t\\t}\\n\\n\\t\\t// Update the user's attributes with the latest reward per share and project share checkpoint values.\\n\\t\\tattr.shtRewardPerShare = shtRPS;\\n\\t\\tattr.projectsShareCheckpoint = ptRewardCheckpoint;\\n\\n\\t\\t// Return the total claimed rewards and the updated attributes.\\n\\t\\treturn (shtClaimed, attr);\\n\\t}\\n\\n\\t/// @notice Computes the reward for a given PT (Housing Project Token).\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param tokenPayment The token payment of the housing project.\\n\\t/// @param stakingCheckPoint The previous checkpoint value.\\n\\t/// @param tokenCheckPoint The new checkpoint value.\\n\\t/// @return reward The computed reward for the given PT.\\n\\tfunction computeRewardForPT(\\n\\t\\tStorage storage self,\\n\\t\\tTokenPayment memory tokenPayment,\\n\\t\\tuint256 stakingCheckPoint,\\n\\t\\tuint256 tokenCheckPoint\\n\\t) internal view returns (uint256 reward) {\\n\\t\\tif (\\n\\t\\t\\tstakingCheckPoint >= tokenCheckPoint ||\\n\\t\\t\\tself.projectsTotalReceivedRents == 0\\n\\t\\t) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\taddress projectAddress = self.projectSftToProjectAddress[\\n\\t\\t\\ttokenPayment.token\\n\\t\\t];\\n\\t\\trequire(\\n\\t\\t\\tprojectAddress != address(0),\\n\\t\\t\\t\\\"Project Address for token not set\\\"\\n\\t\\t);\\n\\n\\t\\tProjectDistributionData storage projectData = self.projectDets[\\n\\t\\t\\tprojectAddress\\n\\t\\t];\\n\\t\\trequire(\\n\\t\\t\\ttokenPayment.amount <= projectData.maxShares,\\n\\t\\t\\t\\\"Project token amount too large\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 shareIncrease = tokenCheckPoint - (stakingCheckPoint);\\n\\t\\tuint256 projectAllocation = (shareIncrease *\\n\\t\\t\\t(projectData.receivedRents)) / (self.projectsTotalReceivedRents);\\n\\n\\t\\treward =\\n\\t\\t\\t(projectAllocation * (tokenPayment.amount)) /\\n\\t\\t\\t(projectData.maxShares);\\n\\t}\\n\\n\\t/// @notice Enters staking for the given attributes.\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param stakeWeight The stake weight to be added.\\n\\tfunction enterStaking(Storage storage self, uint256 stakeWeight) internal {\\n\\t\\tself.shtTotalStakeWeight += (stakeWeight);\\n\\t}\\n}\\n\",\"keccak256\":\"0x3ca5b0032329cc3c2a8d0b0683b65b8fc00c64faa11d1e2f72e731352dd49b64\",\"license\":\"MIT\"},\"contracts/modules/LockedSmartHousingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../lib/LkSHTAttributes.sol\\\";\\nimport \\\"../lib/TokenPayments.sol\\\";\\nimport \\\"../modules/SFT.sol\\\";\\n\\nlibrary NewLkSHT {\\n\\tfunction create() external returns (LkSHT) {\\n\\t\\treturn new LkSHT(\\\"Locked Housing Token\\\", \\\"LkSHT\\\");\\n\\t}\\n}\\n\\n/// @title LockedSmartHousingToken\\n/// @dev SFT token that locks SmartHousing Tokens (SHT) during ICO.\\n/// Allows transfers only to whitelisted addresses.\\ncontract LkSHT is SFT {\\n\\tusing SafeMath for uint256;\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\n\\tstruct LkSHTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tLkSHTAttributes.Attributes attributes;\\n\\t}\\n\\n\\t/// @dev Record the block timestamp when the contract is deployed\\n\\tuint256 immutable startTimestamp = block.timestamp;\\n\\n\\t/// @dev Constructor to initialize the token with name and symbol\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\t/// @dev Event emitted when tokens are minted\\n\\tevent TokensMinted(address indexed to, uint256 amount);\\n\\n\\t/// @dev Returns the balance of the user along with attributes\\n\\t/// @param user The address of the user.\\n\\t/// @return Array of LkSHTBalance containing nonce, amount, and attributes\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (LkSHTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tLkSHTBalance[] memory balance = new LkSHTBalance[](_sftBals.length);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = LkSHTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(\\n\\t\\t\\t\\t\\t_sftBal.attributes,\\n\\t\\t\\t\\t\\t(LkSHTAttributes.Attributes)\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/// @dev Mints new Locked SmartHousing Tokens (LkSHT) by locking SHT.\\n\\t/// @param amount The amount of SHT to lock.\\n\\t/// @param to The address to mint the tokens to.\\n\\tfunction mint(uint256 amount, address to) external onlyOwner {\\n\\t\\trequire(amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tLkSHTAttributes.newAttributes(startTimestamp, amount)\\n\\t\\t);\\n\\n\\t\\tsuper._mint(to, amount, attributes);\\n\\n\\t\\temit TokensMinted(to, amount);\\n\\t}\\n\\n\\tfunction getAttribute(\\n\\t\\tuint256 nonce\\n\\t) external view returns (LkSHTAttributes.Attributes memory) {\\n\\t\\treturn\\n\\t\\t\\tabi.decode(\\n\\t\\t\\t\\t_getRawTokenAttributes(nonce),\\n\\t\\t\\t\\t(LkSHTAttributes.Attributes)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x6752c224955877e1cc9d95fb5c639f58454d0b88eafb0374ff02de8608c93ef0\",\"license\":\"MIT\"},\"contracts/modules/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SFT Contract\\n * @dev Semi-Fungible Token (SFT) contract that extends ERC1155. This contract allows minting, updating, and\\n *      managing tokens with attributes. It also tracks token ownership and provides methods for querying\\n *      token information and balances.\\n *\\n * The contract uses:\\n * - `Counters` for incrementing and managing nonces.\\n * - `EnumerableSet` for tracking nonces owned by addresses.\\n */\\ncontract SFT is ERC1155, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\t/**\\n\\t * @dev Struct representing the balance of an SFT with its attributes.\\n\\t * @param nonce The unique identifier for the token.\\n\\t * @param amount The amount of tokens held.\\n\\t * @param attributes The token's attributes as a bytes array.\\n\\t */\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\tCounters.Counter private _nonceCounter;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t// Mapping from nonce to token attributes as bytes\\n\\tmapping(uint256 => bytes) private _tokenAttributes;\\n\\n\\t// Mapping from address to list of owned token nonces\\n\\tmapping(address => EnumerableSet.UintSet) private _addressToNonces;\\n\\n\\t/**\\n\\t * @dev Constructor to initialize the SFT contract with a name and symbol.\\n\\t * @param name_ The name of the token.\\n\\t * @param symbol_ The symbol of the token.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) ERC1155(\\\"\\\") {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Internal function to mint new tokens with attributes and store the nonce.\\n\\t * @param to The address to receive the minted tokens.\\n\\t * @param amount The amount of tokens to mint.\\n\\t * @param attributes The attributes of the minted tokens.\\n\\t * @return nonce The unique identifier (nonce) of the newly minted tokens.\\n\\t */\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes\\n\\t) internal returns (uint256 nonce) {\\n\\t\\t_nonceCounter.increment();\\n\\t\\tnonce = _nonceCounter.current();\\n\\n\\t\\t// Store the attributes\\n\\t\\t_tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, \\\"\\\");\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t_addressToNonces[to].add(nonce);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the name of the token.\\n\\t * @return The name of the token.\\n\\t */\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the symbol of the token.\\n\\t * @return The symbol of the token.\\n\\t */\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the token name and symbol.\\n\\t * @return name The name of the token.\\n\\t * @return symbol The symbol of the token.\\n\\t */\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (_name, _symbol);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns raw token attributes by nonce.\\n\\t * @param nonce The nonce of the token.\\n\\t * @return Attributes in bytes.\\n\\t */\\n\\tfunction _getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) internal view returns (bytes memory) {\\n\\t\\treturn _tokenAttributes[nonce];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the list of nonces owned by an address.\\n\\t * @param owner The address of the token owner.\\n\\t * @return Array of nonces.\\n\\t */\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _addressToNonces[owner].values();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if the address owns a specific nonce.\\n\\t * @param owner The address of the token owner.\\n\\t * @param nonce The nonce to check.\\n\\t * @return True if the address owns the nonce, otherwise false.\\n\\t */\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Burns the tokens of a specific nonce and mints new tokens with updated attributes.\\n\\t * @param user The address of the token holder.\\n\\t * @param nonce The nonce of the token to update.\\n\\t * @param amount The amount of tokens to mint.\\n\\t * @param attr The new attributes to assign.\\n\\t * @return The new nonce for the minted tokens.\\n\\t */\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) external onlyOwner returns (uint256) {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\treturn amount > 0 ? _mint(user, amount, attr) : 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the balance of the user with their token attributes.\\n\\t * @param user The address of the user.\\n\\t * @return Array of SftBalance containing nonce, amount, and attributes.\\n\\t */\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _tokenAttributes[nonce];\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Override _beforeTokenTransfer to handle address-to-nonce mapping.\\n\\t * @param operator The address performing the transfer.\\n\\t * @param from The address sending tokens.\\n\\t * @param to The address receiving tokens.\\n\\t * @param ids The token IDs being transferred.\\n\\t * @param amounts The amounts of tokens being transferred.\\n\\t * @param data Additional data.\\n\\t * @dev Updates the nonce mappings for the from and to addresses before token transfer.\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\n\\t\\t\\t_addressToNonces[from].remove(id);\\n\\t\\t\\t_addressToNonces[to].add(id);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x5c44589467f6fad831c7c6b3ab2d44a8525eb4101bae9d71f9bea68e0e5ec687\",\"license\":\"MIT\"},\"contracts/modules/sht-module/Economics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\n\\n/// @notice Emitted when trying to convert a uint256 number that doesn't fit within int256.\\nerror ToInt256CastOverflow(uint256 number);\\n\\n/// @notice Emitted when trying to convert a int256 number that doesn't fit within uint256.\\nerror ToUint256CastOverflow(int256 number);\\n\\n/// @notice Safe cast from uint256 to int256\\nfunction toInt256(uint256 x) pure returns (int256 result) {\\n\\tif (x > uint256(type(int256).max)) {\\n\\t\\trevert ToInt256CastOverflow(x);\\n\\t}\\n\\tresult = int256(x);\\n}\\n\\n/// @notice Safe cast from int256 to uint256\\nfunction toUint256(int256 x) pure returns (uint256 result) {\\n\\tif (x < 0) {\\n\\t\\trevert ToUint256CastOverflow(x);\\n\\t}\\n\\tresult = uint256(x);\\n}\\n\\n/// @dev see https://github.com/PaulRBerg/prb-math/discussions/50\\nlibrary Emission {\\n\\tusing PRBMathSD59x18 for int256;\\n\\n\\tint256 private constant DECAY_RATE = 9998e14; // 0.9998 with 18 decimals\\n\\tint256 private constant E0 = 2729727036845720116116; // Epoch 0 emission\\n\\n\\t/// @notice Computes emission at a specific epoch\\n\\t/// @param epoch The epoch to compute emission for\\n\\t/// @return Emission value at the given epoch\\n\\tfunction atEpoch(uint256 epoch) internal pure returns (uint256) {\\n\\t\\tint256 decayFactor = PRBMathSD59x18.pow(DECAY_RATE, toInt256(epoch));\\n\\t\\treturn toUint256((E0 * decayFactor) / 1e18);\\n\\t}\\n\\n\\t/// @notice Computes E0 * (0.9998^epochStart \\u2212 0.9998^epochEnd) / ln(0.9998)\\n\\t/// @param epochStart the starting epoch\\n\\t/// @param epochEnd the end epoch\\n\\t/// @return Total emission through the epoch range\\n\\tfunction throughEpochRange(\\n\\t\\tuint256 epochStart,\\n\\t\\tuint256 epochEnd\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(epochEnd > epochStart, \\\"Invalid epoch range\\\");\\n\\n\\t\\tint256 startFactor = epochDecayFactor(epochStart);\\n\\t\\tint256 endFactor = epochDecayFactor(epochEnd);\\n\\n\\t\\tint256 totalEmission = (E0 * (startFactor - endFactor)) /\\n\\t\\t\\tDECAY_RATE.ln();\\n\\n\\t\\t// return the absolute value of totalEmission as uint256\\n\\t\\treturn toUint256(totalEmission * -1);\\n\\t}\\n\\n\\tfunction throughTimeRange(\\n\\t\\tuint256 epoch,\\n\\t\\tuint256 timeRange,\\n\\t\\tuint256 epochLength\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (atEpoch(epoch) * timeRange) / epochLength;\\n\\t}\\n\\n\\tfunction epochDecayFactor(uint256 epoch) private pure returns (int256) {\\n\\t\\treturn\\n\\t\\t\\tPRBMathSD59x18.pow(\\n\\t\\t\\t\\tDECAY_RATE,\\n\\t\\t\\t\\t// Extrapolate epoch to size with decimal places of DECAY_RATE\\n\\t\\t\\t\\ttoInt256(epoch) * 1e18\\n\\t\\t\\t);\\n\\t}\\n}\\n\\nlibrary Entities {\\n\\tuint32 public constant UNITY = 100_00;\\n\\n\\tuint32 public constant TEAM_AND_ADVISORS_RATIO = 23_05;\\n\\tuint32 public constant PROTOCOL_DEVELOPMENT_RATIO = 30_05;\\n\\tuint32 public constant GROWTH_RATIO = 15_35;\\n\\tuint32 public constant STAKING_RATIO = 16_55;\\n\\tuint32 public constant PROJECTS_RESERVE_RATIO = 8_00;\\n\\tuint32 public constant LP_AND_LISTINGS_RATIO = 7_00;\\n\\n\\tstruct Value {\\n\\t\\tuint256 team;\\n\\t\\tuint256 protocol;\\n\\t\\tuint256 growth;\\n\\t\\tuint256 staking;\\n\\t\\tuint256 projectsReserve;\\n\\t\\tuint256 lpAndListing;\\n\\t}\\n\\n\\t/// @notice Allocates total value based on predefined ratios.\\n\\t/// @param totalValue The total value to be allocated.\\n\\t/// @return Allocated values for each category.\\n\\tfunction fromTotalValue(\\n\\t\\tuint256 totalValue\\n\\t) internal pure returns (Value memory) {\\n\\t\\tuint256 othersTotal = (totalValue *\\n\\t\\t\\t(UNITY - PROTOCOL_DEVELOPMENT_RATIO)) / UNITY;\\n\\n\\t\\tuint256 team = (othersTotal * TEAM_AND_ADVISORS_RATIO) / UNITY;\\n\\t\\tuint256 growth = (othersTotal * GROWTH_RATIO) / UNITY;\\n\\t\\tuint256 staking = (othersTotal * STAKING_RATIO) / UNITY;\\n\\t\\tuint256 projectsReserve = (othersTotal * PROJECTS_RESERVE_RATIO) /\\n\\t\\t\\tUNITY;\\n\\t\\tuint256 lpAndListing = (othersTotal * LP_AND_LISTINGS_RATIO) / UNITY;\\n\\n\\t\\tuint256 protocol = totalValue -\\n\\t\\t\\t(team + growth + staking + projectsReserve + lpAndListing);\\n\\n\\t\\treturn\\n\\t\\t\\tValue({\\n\\t\\t\\t\\tteam: team,\\n\\t\\t\\t\\tprotocol: protocol,\\n\\t\\t\\t\\tgrowth: growth,\\n\\t\\t\\t\\tstaking: staking,\\n\\t\\t\\t\\tprojectsReserve: projectsReserve,\\n\\t\\t\\t\\tlpAndListing: lpAndListing\\n\\t\\t\\t});\\n\\t}\\n\\n\\t/// @notice Computes the total value from individual allocations.\\n\\t/// @param value The `Value` struct containing allocations.\\n\\t/// @return The total value.\\n\\tfunction total(Value memory value) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tvalue.team +\\n\\t\\t\\tvalue.protocol +\\n\\t\\t\\tvalue.growth +\\n\\t\\t\\tvalue.staking +\\n\\t\\t\\tvalue.projectsReserve +\\n\\t\\t\\tvalue.lpAndListing;\\n\\t}\\n\\n\\t/// @notice Adds another `Value` struct to the current one.\\n\\t/// @param self The current `Value` struct.\\n\\t/// @param rhs The `Value` struct to add.\\n\\tfunction add(Value storage self, Value memory rhs) internal {\\n\\t\\tself.team += rhs.team;\\n\\t\\tself.protocol += rhs.protocol;\\n\\t\\tself.growth += rhs.growth;\\n\\t\\tself.staking += rhs.staking;\\n\\t\\tself.projectsReserve += rhs.projectsReserve;\\n\\t\\tself.lpAndListing += rhs.lpAndListing;\\n\\t}\\n}\\n\",\"keccak256\":\"0x654f477487889a81f967fcbc6d8d0d56c40230516b63584fff63a85b0e229254\",\"license\":\"MIT\"},\"contracts/modules/sht-module/SHT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/// @title SHT Library\\n/// @notice Contains constants related to the Smart Housing Token (SHT)\\nlibrary SHT {\\n\\t/// @dev Number of decimal places for the token\\n\\tuint256 public constant DECIMALS = 18;\\n\\n\\t/// @dev 1 unit of token in its smallest unit, considering DECIMALS\\n\\tuint256 public constant ONE = 10 ** DECIMALS;\\n\\n\\t/// @dev Maximum supply of the SHT token\\n\\tuint256 public constant MAX_SUPPLY = 21_000_000 * ONE;\\n\\n\\t/// @dev Funds allocated for ecosystem distribution\\n\\tuint256 public constant ECOSYSTEM_DISTRIBUTION_FUNDS =\\n\\t\\t(13_650_000 * ONE) + 2_248_573_618_499_339;\\n\\n\\t/// @dev Funds allocated for ICO (Initial Coin Offering)\\n\\tuint256 public constant ICO_FUNDS =\\n\\t\\tMAX_SUPPLY - ECOSYSTEM_DISTRIBUTION_FUNDS;\\n}\\n\",\"keccak256\":\"0xd470b5ab0ad759997b456a75628f1739c910c02061dd4a0546a1c5b0e0364c4d\",\"license\":\"MIT\"},\"contracts/project-funding/ProjectFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../lib/ProjectStorage.sol\\\";\\nimport \\\"../lib/LkSHTAttributes.sol\\\";\\n\\nimport \\\"../main/Interface.sol\\\";\\n\\nimport \\\"../modules/LockedSmartHousingToken.sol\\\";\\nimport \\\"../modules/sht-module/SHT.sol\\\";\\n\\nimport { HousingSFT } from \\\"../housing-project/HousingSFT.sol\\\";\\nimport { TokenPayment } from \\\"../lib/TokenPayments.sol\\\";\\nimport { NewHousingProject, HousingProject } from \\\"../housing-project/NewHousingProjectLib.sol\\\";\\n\\n/// @title ProjectFunding\\n/// @dev Manages and deploys housing projects, handles funding, and distributes tokens.\\ncontract ProjectFunding is Ownable {\\n\\tusing SafeMath for uint256;\\n\\tusing ProjectStorage for mapping(uint256 => ProjectStorage.Data);\\n\\tusing ProjectStorage for ProjectStorage.Data;\\n\\tusing LkSHTAttributes for LkSHTAttributes.Attributes;\\n\\n\\t// State variables\\n\\taddress public coinbase; // Address authorized to initialize the first project\\n\\taddress public smartHousingAddress; // Address of the SmartHousing contract\\n\\tmapping(uint256 => ProjectStorage.Data) public projects; // Mapping of project ID to ProjectData\\n\\tmapping(address => uint256) public projectsId; // Mapping of project address to project ID\\n\\tuint256 public projectCount; // Counter for the total number of projects\\n\\tmapping(uint256 => mapping(address => uint256)) public usersProjectDeposit; // User deposits per project\\n\\tIERC20 public housingToken; // Token used for funding projects\\n\\tLkSHT public lkSht; // Instance of the locked SmartHousing Token (LkSHT)\\n\\n\\t// Events\\n\\tevent ProjectDeployed(address indexed projectAddress);\\n\\tevent ProjectFunded(\\n\\t\\tuint256 indexed projectId,\\n\\t\\taddress indexed depositor,\\n\\t\\tTokenPayment payment\\n\\t);\\n\\tevent ProjectTokensClaimed(\\n\\t\\taddress indexed depositor,\\n\\t\\tuint256 projectId,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t/// @param _coinbase Address authorized to initialize the first project\\n\\tconstructor(address _coinbase) {\\n\\t\\tcoinbase = _coinbase;\\n\\t\\tlkSht = NewLkSHT.create();\\n\\t}\\n\\n\\t/// @dev Internal function to deploy a new HousingProject contract\\n\\t/// @param name Name of the project\\n\\t/// @param symbol Symbol of the project\\n\\t/// @param fundingToken Address of the ERC20 token used for funding\\n\\t/// @param fundingGoal The funding goal for the new project\\n\\t/// @param fundingDeadline The deadline for the project funding\\n\\tfunction _deployProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) internal returns (address) {\\n\\t\\tHousingProject newProject = NewHousingProject.deployHousingProject(\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tsmartHousingAddress,\\n\\t\\t\\tcoinbase\\n\\t\\t);\\n\\t\\tProjectStorage.Data memory projectData = projects.createNew(\\n\\t\\t\\tprojectsId,\\n\\t\\t\\tprojectCount,\\n\\t\\t\\tfundingGoal,\\n\\t\\t\\tfundingDeadline,\\n\\t\\t\\tfundingToken,\\n\\t\\t\\taddress(newProject),\\n\\t\\t\\taddress(newProject.projectSFT())\\n\\t\\t);\\n\\t\\tprojectCount = projectData.id;\\n\\n\\t\\temit ProjectDeployed(projectData.projectAddress);\\n\\n\\t\\treturn projectData.projectAddress;\\n\\t}\\n\\n\\t/// @dev Initializes the first project\\n\\t/// This function must be called by the coinbase address and can only be called once\\n\\t/// @param shtPayment Payment details for the Smart Housing Token (SHT)\\n\\t/// @param name Name of the first project\\n\\t/// @param symbol Symbol of the first project\\n\\t/// @param smartHousingAddress_ Address of the Smart Housing contract\\n\\t/// @param fundingToken Address of the ERC20 token used for funding\\n\\t/// @param fundingGoal The funding goal for the new project\\n\\t/// @param fundingDeadline The deadline for the project funding\\n\\tfunction initFirstProject(\\n\\t\\tERC20TokenPayment calldata shtPayment,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddress_,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) external returns (address) {\\n\\t\\trequire(msg.sender == coinbase, \\\"Caller is not the coinbase\\\");\\n\\t\\trequire(projectCount == 0, \\\"Project already initialized\\\");\\n\\n\\t\\tTokenPayments.receiveERC20(shtPayment);\\n\\t\\thousingToken = shtPayment.token;\\n\\n\\t\\tsmartHousingAddress = smartHousingAddress_;\\n\\n\\t\\treturn\\n\\t\\t\\t_deployProject(\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tsymbol,\\n\\t\\t\\t\\tfundingToken,\\n\\t\\t\\t\\tfundingGoal,\\n\\t\\t\\t\\tfundingDeadline\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @dev Deploys a new project\\n\\t/// This function can be called multiple times to deploy additional projects\\n\\t/// @param name Name of the project\\n\\t/// @param symbol Symbol of the project\\n\\t/// @param fundingToken Address of the ERC20 token used for funding\\n\\t/// @param fundingGoal The funding goal for the new project\\n\\t/// @param fundingDeadline The deadline for the project funding\\n\\tfunction deployProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) public onlyOwner returns (address) {\\n\\t\\treturn\\n\\t\\t\\t_deployProject(\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tsymbol,\\n\\t\\t\\t\\tfundingToken,\\n\\t\\t\\t\\tfundingGoal,\\n\\t\\t\\t\\tfundingDeadline\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @dev Allows users to fund a project\\n\\t/// @param depositPayment Payment details for the funding\\n\\t/// @param projectId ID of the project to fund\\n\\t/// @param referrerId ID of the referrer (if applicable)\\n\\tfunction fundProject(\\n\\t\\tTokenPayment calldata depositPayment,\\n\\t\\tuint256 projectId,\\n\\t\\tuint256 referrerId\\n\\t) external payable {\\n\\t\\trequire(\\n\\t\\t\\tprojectId > 0 && projectId <= projectCount,\\n\\t\\t\\t\\\"Invalid project ID\\\"\\n\\t\\t);\\n\\n\\t\\taddress depositor = msg.sender;\\n\\n\\t\\t// Register user with referrer (if needed)\\n\\t\\tISmartHousing(smartHousingAddress).createRefIDViaProxy(\\n\\t\\t\\tdepositor,\\n\\t\\t\\treferrerId\\n\\t\\t);\\n\\n\\t\\t// Update project funding\\n\\t\\tuint256 totalCollected = projects.fund(\\n\\t\\t\\tusersProjectDeposit[projectId],\\n\\t\\t\\tprojectId,\\n\\t\\t\\tdepositor,\\n\\t\\t\\tdepositPayment\\n\\t\\t);\\n\\n\\t\\t// Set the amount raised in the project SFT\\n\\t\\tHousingSFT projectSFT = HousingSFT(\\n\\t\\t\\tgetProjectData(projectId).tokenAddress\\n\\t\\t);\\n\\t\\tprojectSFT.setAmountRaised(totalCollected);\\n\\n\\t\\temit ProjectFunded(projectId, depositor, depositPayment);\\n\\t}\\n\\n\\t/// @dev Sets the project once funding is successful\\n\\t/// @param projectId ID of the project\\n\\tfunction addProjectToEcosystem(uint256 projectId) external onlyOwner {\\n\\t\\tProjectStorage.Data storage project = projects[projectId];\\n\\n\\t\\tISmartHousing(smartHousingAddress).addProject(project.projectAddress);\\n\\t}\\n\\n\\t/// @dev Claims project tokens for a given project ID\\n\\t/// @param projectId ID of the project to claim tokens from\\n\\tfunction claimProjectTokens(uint256 projectId) external {\\n\\t\\taddress depositor = msg.sender;\\n\\n\\t\\t// Retrieve the project and deposit amount\\n\\t\\t(ProjectStorage.Data memory project, uint256 depositAmount) = projects\\n\\t\\t\\t.takeDeposit(usersProjectDeposit[projectId], projectId, depositor);\\n\\n\\t\\tHousingSFT(project.tokenAddress).mintSFT(depositAmount, depositor);\\n\\n\\t\\t// Mint LkSHT tokens if the project ID is 1\\n\\t\\tif (project.id == 1) {\\n\\t\\t\\tuint256 shtAmount = depositAmount.mul(SHT.ICO_FUNDS).div(\\n\\t\\t\\t\\tproject.collectedFunds\\n\\t\\t\\t);\\n\\n\\t\\t\\tlkSht.mint(shtAmount, depositor);\\n\\t\\t}\\n\\n\\t\\temit ProjectTokensClaimed(depositor, projectId, depositAmount);\\n\\t}\\n\\n\\t/// @dev Unlocks SHT tokens by updating the nonce and transferring unlocked tokens to the user\\n\\t/// @param nonce Nonce of the LkSHT token to unlock\\n\\t/// @return newNonce New nonce for the updated LkSHT token\\n\\tfunction unlockSHT(uint256 nonce) external returns (uint256 newNonce) {\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\tuint256 lkShtBal = lkSht.balanceOf(caller, nonce);\\n\\t\\trequire(lkShtBal > 0, \\\"ProjectFunding: Nothing to unlock\\\");\\n\\n\\t\\tLkSHTAttributes.Attributes memory attr = lkSht.getAttribute(nonce);\\n\\t\\t(\\n\\t\\t\\tuint256 totalUnlockedAmount,\\n\\t\\t\\tLkSHTAttributes.Attributes memory newAttr\\n\\t\\t) = attr.unlockMatured();\\n\\n\\t\\tnewNonce = lkSht.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\tnonce,\\n\\t\\t\\tlkShtBal.sub(totalUnlockedAmount),\\n\\t\\t\\tabi.encode(newAttr)\\n\\t\\t);\\n\\n\\t\\t// Transfer the total unlocked SHT tokens to the user's address\\n\\t\\tif (totalUnlockedAmount > 0) {\\n\\t\\t\\thousingToken.transfer(caller, totalUnlockedAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns an array of all project IDs and their associated data\\n\\t/// @return projectList An array of tuples containing project details\\n\\tfunction allProjects() public view returns (ProjectStorage.Data[] memory) {\\n\\t\\tProjectStorage.Data[] memory projectList = new ProjectStorage.Data[](\\n\\t\\t\\tprojectCount\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tprojectList[i - 1] = projects[i];\\n\\t\\t}\\n\\n\\t\\treturn projectList;\\n\\t}\\n\\n\\t/// @dev Returns the address of the HousingProject contract for a given project ID\\n\\t/// @param projectId ID of the project\\n\\t/// @return projectAddress Address of the HousingProject contract\\n\\tfunction getProjectAddress(\\n\\t\\tuint256 projectId\\n\\t) public view returns (address projectAddress) {\\n\\t\\trequire(\\n\\t\\t\\tprojectId > 0 && projectId <= projectCount,\\n\\t\\t\\t\\\"Invalid project ID\\\"\\n\\t\\t);\\n\\t\\tprojectAddress = projects[projectId].projectAddress;\\n\\t}\\n\\n\\t/// @dev Returns detailed information about a project by its ID\\n\\t/// @param projectId ID of the project\\n\\t/// @return projectData Project data struct\\n\\tfunction getProjectData(\\n\\t\\tuint256 projectId\\n\\t) public view returns (ProjectStorage.Data memory projectData) {\\n\\t\\trequire(\\n\\t\\t\\tprojectId > 0 && projectId <= projectCount,\\n\\t\\t\\t\\\"Invalid project ID\\\"\\n\\t\\t);\\n\\t\\tprojectData = projects[projectId];\\n\\t}\\n}\\n\",\"keccak256\":\"0x348a8bfd0b44730a20a9d8ddbbc8b2754901b13223a4aba6be01ec16023b9f3b\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200458238038062004582833981016040819052620000349162000269565b6200003f33620001a0565b600580546001600160a01b038085166001600160a01b031992831617909255600480549284169290911691909117815560408051633bf206a360e21b81529051730467F7E18a8Cb24ed55446925D9706f5557662D09263efc81a8c928082019260209290918290030181865af4158015620000be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e49190620002a8565b600780546001600160a01b0319166001600160a01b039283161790556004805460408051632873b64760e11b8152905191909316926350e76c8e92818101926020929091908290030181865afa15801562000143573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001699190620002a8565b600880546001600160a01b0319166001600160a01b0392909216919091179055620001986019610708620001f0565b5050620002cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b42825560018201819055806200024c5760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642045706f6368206c656e677468000000000000000000000000604482015260640160405180910390fd5b5050565b6001600160a01b03811681146200026657600080fd5b50565b600080604083850312156200027d57600080fd5b82516200028a8162000250565b60208401519092506200029d8162000250565b809150509250929050565b600060208284031215620002bb57600080fd5b8151620002c88162000250565b9392505050565b6142a380620002df6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063b1695201116100a2578063f23a6e6111610071578063f23a6e611461058b578063f2fde38b146105aa578063f7157af6146105bd578063fdc052a31461061f57600080fd5b8063b169520114610504578063bc197c811461052d578063c398bf3a14610565578063d73ca9d31461057857600080fd5b80637d42082c116100de5780637d42082c146103fd5780638da5cb5b14610410578063a476941c14610421578063a87430ba146104a757600080fd5b8063715018a6146103cd5780637c373a50146103d55780637c56b798146103ea57600080fd5b806341a0894d1161017c578063553c99121161014b578063553c99121461037157806358152d0714610384578063594dd432146103a7578063610bdf5d146103ba57600080fd5b806341a0894d146102ce5780634a9fefc7146102ee57806350e76c8e1461034b5780635218f4c41461035e57600080fd5b806319585612116101b8578063195856121461025257806325da499a146102675780632b956ff7146102925780632fd2b55f146102bb57600080fd5b806301e88208146101df57806301ffc9a71461021857806307973ccf1461023b575b600080fd5b6102026101ed3660046135c6565b601b6020526000908152604090205460ff1681565b60405161020f91906135f9565b60405180910390f35b61022b610226366004613621565b610632565b604051901515815260200161020f565b61024460015481565b60405190815260200161020f565b61026561026036600461364b565b610669565b005b60045461027a906001600160a01b031681565b6040516001600160a01b03909116815260200161020f565b6102446102a03660046135c6565b6001600160a01b031660009081526002602052604090205490565b6102656102c9366004613664565b6106c6565b6102e16102dc3660046135c6565b610815565b60405161020f919061367c565b61032e6102fc3660046135c6565b6001600160a01b0390811660009081526002602081815260408084209092015480845260039091529120549092911690565b604080519283526001600160a01b0390911660208301520161020f565b60085461027a906001600160a01b031681565b61022b61036c3660046136d4565b61096c565b60055461027a906001600160a01b031681565b601954601a54610392919082565b6040805192835260208301919091520161020f565b6102446103b5366004613700565b610a93565b60075461027a906001600160a01b031681565b610265610fea565b6103dd610ffe565b60405161020f9190613722565b6102656103f83660046135c6565b61100f565b61024461040b3660046136d4565b611167565b6000546001600160a01b031661027a565b600954600a54600d54600e54600f546010546040805180820182526011548152601254602080830191909152825160c081018452601354815260145491810191909152601554928101929092526016546060830152601754608083015260185460a08301526104939796959493929188565b60405161020f98979695949392919061376f565b6104e16104b53660046135c6565b60026020819052600091825260409091208054600182015491909201546001600160a01b039091169083565b604080519384526001600160a01b0390921660208401529082015260600161020f565b61027a61051236600461364b565b6003602052600090815260409020546001600160a01b031681565b61054c61053b36600461398d565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161020f565b61024461057336600461364b565b6111a5565b610265610586366004613a3a565b6111b2565b61054c610599366004613abb565b63f23a6e6160e01b95945050505050565b6102656105b83660046135c6565b611271565b6106126105cb3660046135c6565b6040805180820190915260008082526020820152506001600160a01b03166000908152600b6020908152604091829020825180840190935280548352600101549082015290565b60405161020f9190613b23565b60065461027a906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061066357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001336000908152601b602052604090205460ff16600181111561068f5761068f6135e3565b146106b55760405162461bcd60e51b81526004016106ac90613b3a565b60405180910390fd5b336106c2600982846112e7565b5050565b6005546001600160a01b0316331461070f5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016106ac565b6006546001600160a01b03161561075a5760405162461bcd60e51b815260206004820152600f60248201526e14d21508185b1c9958591e481cd95d608a1b60448201526064016106ac565b61076760208201826135c6565b600680546001600160a01b0319166001600160a01b03929092169190911790556107936012600a613c5c565b6107a09062d04850613c68565b6107b1906607fd10d7c82f0b613c7f565b8160200135146107fa5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd0814d21508185b5bdd5b9d60621b60448201526064016106ac565b610803816113a7565b610812600960208301356113b1565b50565b6001600160a01b038116600090815260026020908152604080832060030180548251818502810185019093528083526060949383018282801561087757602002820191906000526020600020905b815481526020019060010190808311610863575b50505050509050600081516001600160401b03811115610899576108996137fc565b6040519080825280602002602001820160405280156108de57816020015b60408051808201909152600080825260208201528152602001906001900390816108b75790505b50905060005b825181101561096457600083828151811061090157610901613c92565b6020908102919091018101516000818152600383526040908190205481518083019092528282526001600160a01b031692810183905285519193509085908590811061094f5761094f613c92565b602090810291909101015250506001016108e4565b509392505050565b600754604051634fa3d25d60e01b81526001600160a01b038481166004830152602482018490526000928392911690634fa3d25d90604401602060405180830381865afa1580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e59190613ca8565b9050806109f6576000915050610663565b600d5442118015610a0c57600192505050610663565b60075460405163493fe80f60e01b8152600481018690526000916001600160a01b03169063493fe80f90602401600060405180830381865afa158015610a56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7e9190810190613dc6565b600f5460409091015110935050505092915050565b600033610aa0818461140b565b50600754604051627eeac760e11b81526001600160a01b03838116600483015260248201879052600092169062fdd58e90604401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190613e88565b905060008111610b675760405162461bcd60e51b815260206004820152601d60248201527f4e6f2048535420746f6b656e2062616c616e6365206174206e6f6e636500000060448201526064016106ac565b610b736009601961162c565b60075460405163493fe80f60e01b8152600481018790526000918291610bf3916001600160a01b03169063493fe80f90602401600060405180830381865afa158015610bc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610beb9190810190613dc6565b6009906117d0565b915091506000805b825151811015610d5957600083600001518281518110610c1d57610c1d613c92565b602090810291909101015180519091506001600160a01b0316610c825760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642070726f6a656374206164647265737300000000000000000060448201526064016106ac565b80516001600160a01b039081166000908152600c60205260408082205481850151915163f59002e360e01b81529316928291849163f59002e391610ccc9160040190815260200190565b60c0604051808303816000875af1158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f9190613ea1565b92509250508087600001518681518110610d2b57610d2b613c92565b6020908102919091010151604001528151610d47908790611940565b95505060019093019250610bfb915050565b506007546040516001600160a01b039091169063d8938f269087908b908890610d86908890602001613fd8565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610db4949392919061404d565b6020604051808303816000875af1158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df79190613e88565b6006549096506001600160a01b03168315610f54576000610e256103e8610e1f87601961194c565b90611958565b9050610e318582611964565b94506000610e6b886001600160a01b0390811660009081526002602081815260408084209092015480845260039091529120549092911690565b9150506001600160a01b03811615610ef65760405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef09190613ca8565b50610f51565b604051630852cd8d60e31b8152600481018390526001600160a01b038416906342966c6890602401600060405180830381600087803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b505050505b50505b6001600160a01b03811663a9059cbb87610f6e8786611940565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190613ca8565b5050505050505092915050565b610ff2611970565b610ffc60006119ca565b565b606061100a601c611a1a565b905090565b6004546001600160a01b031633146110395760405162461bcd60e51b81526004016106ac90613b3a565b611044816001611a27565b60008190506000816001600160a01b031663800151526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ad91906140ba565b90506110ba601c82611a64565b506111628382846001600160a01b0316634c0f38c26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190613e88565b6001600160a01b039283166000818152600b6020908152604080832094909455949093168352600c909352902080546001600160a01b0319169091179055565b505050565b6004546000906001600160a01b031633146111945760405162461bcd60e51b81526004016106ac90613b3a565b61119e838361140b565b9392505050565b60003361119e818461140b565b60b482101580156111c557506104388211155b6112115760405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642065706f636873206c6f636b20706572696f6400000000000060448201526064016106ac565b3361121c818361140b565b506112296009601961162c565b601254600f5460085460009261124f9289928992919089906001600160a01b0316611a79565b905061126981608001516009611dee90919063ffffffff16565b505050505050565b611279611970565b6001600160a01b0381166112de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ac565b610812816119ca565b808360010160008282546112fb9190613c7f565b90915550506001600160a01b03821660009081526002840160205260408120805490910361138857826001600160a01b0316634c0f38c26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190613e88565b81555b8181600101600082825461139c9190613c7f565b909155505050505050565b6108128133611e0b565b8154156114005760405162461bcd60e51b815260206004820152601760248201527f546f74616c2066756e647320616c72656164792073657400000000000000000060448201526064016106ac565b815542600490910155565b6001600160a01b038216600090815260026020526040812080541561143257549050610663565b60018054906000611442836140d7565b90915550506040805160808101825260015481526001600160a01b038616602082015290810184905260608101600060405190808252806020026020018201604052801561149a578160200160208202803683370190505b5090526001600160a01b0385811660009081526002602081815260409283902085518155858201516001820180546001600160a01b03191691909616179094559184015190830155606083015180516114f9926003850192019061355a565b5050600154600090815260036020526040902080546001600160a01b0319166001600160a01b03871617905550821580159061153757506001548314155b801561155957506000838152600360205260409020546001600160a01b031615155b156115d6576000838152600360208181526040808420546001600160a01b0316845260028252808420600180549190940180548086018255908652948390209094019390935590548251868152918201527fa8b1f3acfefae9dbf6c7ffd8c16eda5db6950c383b34ca999d98f9998721c50c910160405180910390a15b600154604080519182526001600160a01b038616602083015281018490527fb58d46e66658e855773af8232237e606476d7f0ad98813c081b540e6f435ea3e9060600160405180910390a1505060015492915050565b600482015442908082116116405750505050565b600061164c8483611e97565b60408051808201909152855481526001860154602082015290915060009061167690838587611f92565b905060006116838661207d565b905082811115611702576000600161169b85846140f0565b6116a591906140f0565b905060018111156116d0576116c3846116be8382613c7f565b612089565b6116cd9084613c7f565b92505b6040805180820190915287548152600188015460208201526116f490838789611f92565b6116fe9084613c7f565b9250505b600061170d83612144565b6060810180516000909152909150611728600a8a01836122a7565b6000600a611737836007613c68565b6117419190614119565b60058b0154909150801561178b57600081611764670de0b6b3a764000085613c68565b61176e9190614119565b9050808c60060160008282546117849190613c7f565b9091555050505b818b600701600082825461179f9190613c7f565b909155506117bc90506117b283856140f0565b60088d0190612351565b505050506004909601939093555050505050565b60006118126040518060e00160405280606081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b600984015460009080156118a05760005b85515181101561186e5761185a878760000151838151811061184757611847613c92565b6020026020010151886020015185612380565b6118649084613c7f565b9250600101611823565b50600886015482111561188357600886015491505b8186600801600001600082825461189a91906140f0565b90915550505b600686015480158015906118b75750808660400151105b1561192e576000670de0b6b3a764000087608001518860400151846118dc91906140f0565b6118e69190613c68565b6118f09190614119565b9050808860070154101561190657876007015493505b8088600701600082825461191a91906140f0565b9091555061192a90508185613c7f565b9350505b60408601526020850152949293505050565b600061119e8284613c7f565b600061119e8284613c68565b600061119e8284614119565b600061119e82846140f0565b6000546001600160a01b03163314610ffc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061119e836124d7565b6001600160a01b0382166000908152601b60205260409020805482919060ff191660018381811115611a5b57611a5b6135e3565b02179055505050565b600061119e836001600160a01b038416612533565b611ab96040518060e00160405280606081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b33600080808080611acb8d8d8a612582565b91509150600a81518351611adf9190613c7f565b10611b2c5760405162461bcd60e51b815260206004820152601760248201527f4d61782053465420746f6b656e7320657863656564656400000000000000000060448201526064016106ac565b60005b8c811015611d595760008e8e83818110611b4b57611b4b613c92565b905060600201803603810190611b61919061412d565b60065481519192506001600160a01b03908116911603611b92576020810151611b8b908690611940565b9450611d46565b80516001600160a01b03808c16911603611cc5576008546040808301519051627eeac760e11b81526000926001600160a01b03169162fdd58e91611bee918d916004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2f9190613e88565b905081602001518114611c845760405162461bcd60e51b815260206004820152601b60248201527f4d7573742073656e6420616c6c204c6b5348542062616c616e6365000000000060448201526064016106ac565b611c8e8682611940565b95508160400151848881518110611ca757611ca7613c92565b602090810291909101015286611cbc816140d7565b97505050611d46565b8051611cd390601c906126ef565b15611d095780848881518110611ceb57611ceb613c92565b60200260200101819052508680611d01906140d7565b975050611d46565b60405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21029b2b73a102a37b5b2b760711b60448201526064016106ac565b611d508189612711565b50600101611b2f565b50600754604051637eed5c1160e11b81526001600160a01b039091169063fddab82290611d969085908f908f908f908a9089908f90600401614171565b6000604051808303816000875af1158015611db5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ddd9190810190613dc6565b9d9c50505050505050505050505050565b80826005016000828254611e029190613c7f565b90915550505050565b611e1860208301836135c6565b6040516323b872dd60e01b81526001600160a01b0383811660048301523060248301526020850135604483015291909116906323b872dd906064015b6020604051808303816000875af1158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190613ca8565b8154600090611ee85760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642067656e657369732074696d657374616d700000000000000060448201526064016106ac565b60008211611f2c5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b60448201526064016106ac565b6000836001015411611f775760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c8408ae0dec6d040d8cadccee8d60631b60448201526064016106ac565b60018301548354611f8890846140f0565b61119e9190614119565b60008080611fa087876128d1565b91509150600080858411158015611fb75750828611155b15611fc6575084905082612056565b868411158015611fd65750828711155b15611ff55782861115611fe95782611feb565b855b9150869050612056565b60405162461bcd60e51b815260206004820152603060248201527f526f757465722e5f636f6d7075746545646765456d697373696f6e733a20496e60448201526f76616c69642074696d657374616d707360801b60648201526084016106ac565b61206e8861206483856140f0565b8b60200151612917565b9450505050505b949350505050565b60006106638242611e97565b60008282116120d05760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642065706f63682072616e676560681b60448201526064016106ac565b60006120db84612938565b905060006120e884612938565b905060006120fd670de000cd866f8000612966565b61210783856141cb565b61211a906893fa92954c28c89b946141f2565b6121249190614222565b905061213a612135826000196141f2565b612998565b9695505050505050565b61217d6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061271061218e610bbd82614250565b61219e9063ffffffff1685613c68565b6121a89190614119565b905060006127106121bb61090184613c68565b6121c59190614119565b905060006127106121d86105ff85613c68565b6121e29190614119565b905060006127106121f561067786613c68565b6121ff9190614119565b9050600061271061221261032087613c68565b61221c9190614119565b9050600061271061222f6102bc88613c68565b6122399190614119565b9050600081838561224a888a613c7f565b6122549190613c7f565b61225e9190613c7f565b6122689190613c7f565b612272908a6140f0565b6040805160c08101825297885260208801919091528601949094526060850192909252608084015260a0830152509392505050565b8051825483906000906122bb908490613c7f565b909155505060208101516001830180546000906122d9908490613c7f565b909155505060408101516002830180546000906122f7908490613c7f565b90915550506060810151600383018054600090612315908490613c7f565b90915550506080810151600483018054600090612333908490613c7f565b909155505060a0810151600583018054600090611e02908490613c7f565b808260000160008282546123659190613c7f565b9250508190555080826001016000828254611e029190613c7f565b6000818310158061239357506001850154155b156123a057506000612075565b83516001600160a01b03908116600090815260038701602052604090205416806124165760405162461bcd60e51b815260206004820152602160248201527f50726f6a656374204164647265737320666f7220746f6b656e206e6f742073656044820152601d60fa1b60648201526084016106ac565b6001600160a01b03811660009081526002870160209081526040909120805491870151909110156124895760405162461bcd60e51b815260206004820152601e60248201527f50726f6a65637420746f6b656e20616d6f756e7420746f6f206c61726765000060448201526064016106ac565b600061249586866140f0565b9050600088600101548360010154836124ae9190613c68565b6124b89190614119565b835460208a0151919250906124cd9083613c68565b61206e9190614119565b60608160000180548060200260200160405190810160405280929190818152602001828054801561252757602002820191906000526020600020905b815481526020019060010190808311612513575b50505050509050919050565b600081815260018301602052604081205461257a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610663565b506000610663565b60608060008060005b868110156126275760008888838181106125a7576125a7613c92565b9050606002018036038101906125bd919061412d565b60065481519192506001600160a01b0391821691161461261e5780516001600160a01b038089169116036125fd57826125f5816140d7565b93505061261e565b805161260b90601c906126ef565b15611d09578361261a816140d7565b9450505b5060010161258b565b50816001600160401b03811115612640576126406137fc565b60405190808252806020026020018201604052801561269e57816020015b61268b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b81526020019060019003908161265e5790505b509350806001600160401b038111156126b9576126b96137fc565b6040519080825280602002602001820160405280156126e2578160200160208202803683370190505b5092505050935093915050565b6001600160a01b0381166000908152600183016020526040812054151561119e565b81516001600160a01b03166127fa573482602001511461278e5760405162461bcd60e51b815260206004820152603260248201527f4578706563746564207061796d656e7420616d6f756e74206d75737420657175604482015271185b081d1a19481cd95b9d08185b5bdd5b9d60721b60648201526084016106ac565b6001600160a01b03811633146106c25760405162461bcd60e51b815260206004820152602b60248201527f43616e2072656365697665206e6174697665207061796d656e74206f6e6c792060448201526a333937b69031b0b63632b960a91b60648201526084016106ac565b816040015160000361284957815160208301516040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd90606401611e54565b815160408084015160208501519151637921219560e11b81526001600160a01b0385811660048301523060248301526044820192909252606481019290925260a06084830152600060a48301529091169063f242432a9060c401600060405180830381600087803b1580156128bd57600080fd5b505af1158015611269573d6000803e3d6000fd5b6000808360200151836128e49190613c68565b84516128f09190613c7f565b915060018460200151836129049190613c7f565b61290e91906140f0565b90509250929050565b60008183612924866129c2565b61292e9190613c68565b6120759190614119565b6000610663670de000cd866f800061294f84612a05565b61296190670de0b6b3a76400006141f2565b612a32565b60006714057b7ef767814f670de0b6b3a764000061298384612a74565b028161299157612991614103565b0592915050565b6000808212156129be57604051635afb78ad60e11b8152600481018390526024016106ac565b5090565b6000806129da670de000cd866f800061296185612a05565b905061119e670de0b6b3a76400006129fb836893fa92954c28c89b946141f2565b6121359190614222565b60006001600160ff1b038211156129be5760405163322efb3360e21b8152600481018390526024016106ac565b600082600003612a5a578115612a49576000612a53565b670de0b6b3a76400005b9050610663565b61119e612a6f612a6985612a74565b84612b59565b612c1e565b6000808213612a995760405163309fa7dd60e11b8152600481018390526024016106ac565b6000670de0b6b3a76400008312612ab257506001612acc565b6000199050826ec097ce7bc90715b34b9f10000000000492505b6000612ae1670de0b6b3a76400008505612cb4565b670de0b6b3a764000081029350905083811d670de0b6b3a763ffff198101612b0b57505002919050565b6706f05b59d3b200005b6000811315612b5057670de0b6b3a7640000828002059150671bc16d674ec800008212612b48579384019360019190911d905b60011d612b15565b50505002919050565b6000600160ff1b831480612b705750600160ff1b82145b15612b8e57604051630d01a11b60e21b815260040160405180910390fd5b60008060008512612b9f5784612ba4565b846000035b915060008412612bb45783612bb9565b836000035b90506000612bc78383612d98565b90506001600160ff1b03811115612bf45760405163bf79e8d960e01b8152600481018290526024016106ac565b600019808713908613808218600114612c0d5782612c12565b826000035b98975050505050505050565b600080821215612c6b5768033dd1780914b9711419821215612c4257506000919050565b612c4e82600003612c1e565b6ec097ce7bc90715b34b9f10000000008161299157612991614103565b680a688906bd8b0000008212612c975760405163e69458f960e01b8152600481018390526024016106ac565b670de0b6b3a7640000604083901b0461119e81612e5e565b919050565b6000600160801b8210612cd457608091821c91612cd19082613c7f565b90505b680100000000000000008210612cf757604091821c91612cf49082613c7f565b90505b6401000000008210612d1657602091821c91612d139082613c7f565b90505b620100008210612d3357601091821c91612d309082613c7f565b90505b6101008210612d4f57600891821c91612d4c9082613c7f565b90505b60108210612d6a57600491821c91612d679082613c7f565b90505b60048210612d8557600291821c91612d829082613c7f565b90505b60028210612caf57610663600182613c7f565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612ddc5760405163698d9a0160e11b8152600481018290526024016106ac565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003612e1a5780670de0b6b3a7640000850401945050505050610663565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b678000000000000000821615612e825768016a09e667f3bcc9090260401c5b674000000000000000821615612ea1576801306fe0a31b7152df0260401c5b672000000000000000821615612ec0576801172b83c7d517adce0260401c5b671000000000000000821615612edf5768010b5586cf9890f62a0260401c5b670800000000000000821615612efe576801059b0d31585743ae0260401c5b670400000000000000821615612f1d57680102c9a3e778060ee70260401c5b670200000000000000821615612f3c5768010163da9fb33356d80260401c5b670100000000000000821615612f5b57680100b1afa5abcbed610260401c5b6680000000000000821615612f795768010058c86da1c09ea20260401c5b6640000000000000821615612f97576801002c605e2e8cec500260401c5b6620000000000000821615612fb557680100162f3904051fa10260401c5b6610000000000000821615612fd3576801000b175effdc76ba0260401c5b6608000000000000821615612ff157680100058ba01fb9f96d0260401c5b660400000000000082161561300f5768010002c5cc37da94920260401c5b660200000000000082161561302d576801000162e525ee05470260401c5b660100000000000082161561304b5768010000b17255775c040260401c5b65800000000000821615613068576801000058b91b5bc9ae0260401c5b6540000000000082161561308557680100002c5c89d5ec6d0260401c5b652000000000008216156130a25768010000162e43f4f8310260401c5b651000000000008216156130bf57680100000b1721bcfc9a0260401c5b650800000000008216156130dc5768010000058b90cf1e6e0260401c5b650400000000008216156130f9576801000002c5c863b73f0260401c5b6502000000000082161561311657680100000162e430e5a20260401c5b65010000000000821615613133576801000000b1721835510260401c5b64800000000082161561314f57680100000058b90c0b490260401c5b64400000000082161561316b5768010000002c5c8601cc0260401c5b642000000000821615613187576801000000162e42fff00260401c5b6410000000008216156131a35768010000000b17217fbb0260401c5b6408000000008216156131bf576801000000058b90bfce0260401c5b6404000000008216156131db57680100000002c5c85fe30260401c5b6402000000008216156131f75768010000000162e42ff10260401c5b64010000000082161561321357680100000000b17217f80260401c5b638000000082161561322e5768010000000058b90bfc0260401c5b6340000000821615613249576801000000002c5c85fe0260401c5b632000000082161561326457680100000000162e42ff0260401c5b631000000082161561327f576801000000000b17217f0260401c5b630800000082161561329a57680100000000058b90c00260401c5b63040000008216156132b55768010000000002c5c8600260401c5b63020000008216156132d0576801000000000162e4300260401c5b63010000008216156132eb5768010000000000b172180260401c5b62800000821615613305576801000000000058b90c0260401c5b6240000082161561331f57680100000000002c5c860260401c5b622000008216156133395768010000000000162e430260401c5b6210000082161561335357680100000000000b17210260401c5b6208000082161561336d5768010000000000058b910260401c5b62040000821615613387576801000000000002c5c80260401c5b620200008216156133a157680100000000000162e40260401c5b620100008216156133bb576801000000000000b1720260401c5b6180008216156133d457680100000000000058b90260401c5b6140008216156133ed5768010000000000002c5d0260401c5b612000821615613406576801000000000000162e0260401c5b61100082161561341f5768010000000000000b170260401c5b610800821615613438576801000000000000058c0260401c5b61040082161561345157680100000000000002c60260401c5b61020082161561346a57680100000000000001630260401c5b61010082161561348357680100000000000000b10260401c5b608082161561349b57680100000000000000590260401c5b60408216156134b3576801000000000000002c0260401c5b60208216156134cb57680100000000000000160260401c5b60108216156134e3576801000000000000000b0260401c5b60088216156134fb57680100000000000000060260401c5b600482161561351357680100000000000000030260401c5b600282161561352b57680100000000000000010260401c5b600182161561354357680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b828054828255906000526020600020908101928215613595579160200282015b8281111561359557825182559160200191906001019061357a565b506129be9291505b808211156129be576000815560010161359d565b6001600160a01b038116811461081257600080fd5b6000602082840312156135d857600080fd5b813561119e816135b1565b634e487b7160e01b600052602160045260246000fd5b602081016002831061361b57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561363357600080fd5b81356001600160e01b03198116811461119e57600080fd5b60006020828403121561365d57600080fd5b5035919050565b60006040828403121561367657600080fd5b50919050565b602080825282518282018190526000919060409081850190868401855b828110156136c7578151805185528601516001600160a01b0316868501529284019290850190600101613699565b5091979650505050505050565b600080604083850312156136e757600080fd5b82356136f2816135b1565b946020939093013593505050565b6000806040838503121561371357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156137635783516001600160a01b03168352928401929184019160010161373e565b50909695505050505050565b60006101c0820190508982528860208301528760408301528660608301528560808301528460a08301526137b060c083018580518252602090810151910152565b8251610100830152602083015161012083015260408301516101408301526060830151610160830152608083015161018083015260a08301516101a08301529998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715613834576138346137fc565b60405290565b60405160e081016001600160401b0381118282101715613834576138346137fc565b604051601f8201601f191681016001600160401b0381118282101715613884576138846137fc565b604052919050565b60006001600160401b038211156138a5576138a56137fc565b5060051b60200190565b600082601f8301126138c057600080fd5b813560206138d56138d08361388c565b61385c565b8083825260208201915060208460051b8701019350868411156138f757600080fd5b602086015b8481101561391357803583529183019183016138fc565b509695505050505050565b600082601f83011261392f57600080fd5b81356001600160401b03811115613948576139486137fc565b61395b601f8201601f191660200161385c565b81815284602083860101111561397057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156139a557600080fd5b85356139b0816135b1565b945060208601356139c0816135b1565b935060408601356001600160401b03808211156139dc57600080fd5b6139e889838a016138af565b945060608801359150808211156139fe57600080fd5b613a0a89838a016138af565b93506080880135915080821115613a2057600080fd5b50613a2d8882890161391e565b9150509295509295909350565b60008060008060608587031215613a5057600080fd5b84356001600160401b0380821115613a6757600080fd5b818701915087601f830112613a7b57600080fd5b813581811115613a8a57600080fd5b886020606083028501011115613a9f57600080fd5b6020928301999098509187013596604001359550909350505050565b600080600080600060a08688031215613ad357600080fd5b8535613ade816135b1565b94506020860135613aee816135b1565b9350604086013592506060860135915060808601356001600160401b03811115613b1757600080fd5b613a2d8882890161391e565b815181526020808301519082015260408101610663565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115613bb3578160001904821115613b9957613b99613b62565b80851615613ba657918102915b93841c9390800290613b7d565b509250929050565b600082613bca57506001610663565b81613bd757506000610663565b8160018114613bed5760028114613bf757613c13565b6001915050610663565b60ff841115613c0857613c08613b62565b50506001821b610663565b5060208310610133831016604e8410600b8410161715613c36575081810a610663565b613c408383613b78565b8060001904821115613c5457613c54613b62565b029392505050565b600061119e8383613bbb565b808202811582820484141761066357610663613b62565b8082018082111561066357610663613b62565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613cba57600080fd5b8151801515811461119e57600080fd5b600082601f830112613cdb57600080fd5b81516020613ceb6138d08361388c565b82815260609283028501820192828201919087851115613d0a57600080fd5b8387015b85811015613d5a5781818a031215613d265760008081fd5b613d2e613812565b8151613d39816135b1565b81528186015186820152604080830151908201528452928401928101613d0e565b5090979650505050505050565b600082601f830112613d7857600080fd5b81516020613d886138d08361388c565b8083825260208201915060208460051b870101935086841115613daa57600080fd5b602086015b848110156139135780518352918301918301613daf565b600060208284031215613dd857600080fd5b81516001600160401b0380821115613def57600080fd5b9083019060e08286031215613e0357600080fd5b613e0b61383a565b825182811115613e1a57600080fd5b613e2687828601613cca565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115613e6d57600080fd5b613e7987828601613d67565b60c08301525095945050505050565b600060208284031215613e9a57600080fd5b5051919050565b600080600083850360c0811215613eb757600080fd5b6060811215613ec557600080fd5b613ecd613812565b855181526020860151613edf816135b1565b806020830152506040808701518183015281955080605f1984011215613f0457600080fd5b8051925080830191508282106001600160401b0383111715613f2857613f286137fc565b52606085015181526080850151602082015260a09094015192959394509192915050565b60008151808452602080850194506020840160005b83811015613f9c57815180516001600160a01b0316885283810151848901526040908101519088015260609096019590820190600101613f61565b509495945050505050565b60008151808452602080850194506020840160005b83811015613f9c57815187529582019590820190600101613fbc565b602081526000825160e06020840152613ff5610100840182613f4c565b9050602084015160408401526040840151606084015260608401516080840152608084015160a084015260a084015160c084015260c0840151601f198483030160e08501526140448282613fa7565b95945050505050565b60018060a01b03851681526000602085602084015284604084015260806060840152835180608085015260005b818110156140965785810183015185820160a00152820161407a565b50600060a0828601015260a0601f19601f8301168501019250505095945050505050565b6000602082840312156140cc57600080fd5b815161119e816135b1565b6000600182016140e9576140e9613b62565b5060010190565b8181038181111561066357610663613b62565b634e487b7160e01b600052601260045260246000fd5b60008261412857614128614103565b500490565b60006060828403121561413f57600080fd5b614147613812565b8235614152816135b1565b8152602083810135908201526040928301359281019290925250919050565b60e08152600061418460e083018a613f4c565b88602084015287604084015286606084015285608084015282810360a08401526141ae8186613fa7565b91505060018060a01b03831660c083015298975050505050505050565b81810360008312801583831316838312821617156141eb576141eb613b62565b5092915050565b80820260008212600160ff1b8414161561420e5761420e613b62565b818105831482151761066357610663613b62565b60008261423157614231614103565b600160ff1b82146000198414161561424b5761424b613b62565b500590565b63ffffffff8281168282160390808211156141eb576141eb613b6256fea2646970667358221220e815d4473ae5d62355e5447155476d6110e7b4c701771da5623718a77d29226864736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063715018a611610104578063b1695201116100a2578063f23a6e6111610071578063f23a6e611461058b578063f2fde38b146105aa578063f7157af6146105bd578063fdc052a31461061f57600080fd5b8063b169520114610504578063bc197c811461052d578063c398bf3a14610565578063d73ca9d31461057857600080fd5b80637d42082c116100de5780637d42082c146103fd5780638da5cb5b14610410578063a476941c14610421578063a87430ba146104a757600080fd5b8063715018a6146103cd5780637c373a50146103d55780637c56b798146103ea57600080fd5b806341a0894d1161017c578063553c99121161014b578063553c99121461037157806358152d0714610384578063594dd432146103a7578063610bdf5d146103ba57600080fd5b806341a0894d146102ce5780634a9fefc7146102ee57806350e76c8e1461034b5780635218f4c41461035e57600080fd5b806319585612116101b8578063195856121461025257806325da499a146102675780632b956ff7146102925780632fd2b55f146102bb57600080fd5b806301e88208146101df57806301ffc9a71461021857806307973ccf1461023b575b600080fd5b6102026101ed3660046135c6565b601b6020526000908152604090205460ff1681565b60405161020f91906135f9565b60405180910390f35b61022b610226366004613621565b610632565b604051901515815260200161020f565b61024460015481565b60405190815260200161020f565b61026561026036600461364b565b610669565b005b60045461027a906001600160a01b031681565b6040516001600160a01b03909116815260200161020f565b6102446102a03660046135c6565b6001600160a01b031660009081526002602052604090205490565b6102656102c9366004613664565b6106c6565b6102e16102dc3660046135c6565b610815565b60405161020f919061367c565b61032e6102fc3660046135c6565b6001600160a01b0390811660009081526002602081815260408084209092015480845260039091529120549092911690565b604080519283526001600160a01b0390911660208301520161020f565b60085461027a906001600160a01b031681565b61022b61036c3660046136d4565b61096c565b60055461027a906001600160a01b031681565b601954601a54610392919082565b6040805192835260208301919091520161020f565b6102446103b5366004613700565b610a93565b60075461027a906001600160a01b031681565b610265610fea565b6103dd610ffe565b60405161020f9190613722565b6102656103f83660046135c6565b61100f565b61024461040b3660046136d4565b611167565b6000546001600160a01b031661027a565b600954600a54600d54600e54600f546010546040805180820182526011548152601254602080830191909152825160c081018452601354815260145491810191909152601554928101929092526016546060830152601754608083015260185460a08301526104939796959493929188565b60405161020f98979695949392919061376f565b6104e16104b53660046135c6565b60026020819052600091825260409091208054600182015491909201546001600160a01b039091169083565b604080519384526001600160a01b0390921660208401529082015260600161020f565b61027a61051236600461364b565b6003602052600090815260409020546001600160a01b031681565b61054c61053b36600461398d565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161020f565b61024461057336600461364b565b6111a5565b610265610586366004613a3a565b6111b2565b61054c610599366004613abb565b63f23a6e6160e01b95945050505050565b6102656105b83660046135c6565b611271565b6106126105cb3660046135c6565b6040805180820190915260008082526020820152506001600160a01b03166000908152600b6020908152604091829020825180840190935280548352600101549082015290565b60405161020f9190613b23565b60065461027a906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061066357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001336000908152601b602052604090205460ff16600181111561068f5761068f6135e3565b146106b55760405162461bcd60e51b81526004016106ac90613b3a565b60405180910390fd5b336106c2600982846112e7565b5050565b6005546001600160a01b0316331461070f5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016106ac565b6006546001600160a01b03161561075a5760405162461bcd60e51b815260206004820152600f60248201526e14d21508185b1c9958591e481cd95d608a1b60448201526064016106ac565b61076760208201826135c6565b600680546001600160a01b0319166001600160a01b03929092169190911790556107936012600a613c5c565b6107a09062d04850613c68565b6107b1906607fd10d7c82f0b613c7f565b8160200135146107fa5760405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd0814d21508185b5bdd5b9d60621b60448201526064016106ac565b610803816113a7565b610812600960208301356113b1565b50565b6001600160a01b038116600090815260026020908152604080832060030180548251818502810185019093528083526060949383018282801561087757602002820191906000526020600020905b815481526020019060010190808311610863575b50505050509050600081516001600160401b03811115610899576108996137fc565b6040519080825280602002602001820160405280156108de57816020015b60408051808201909152600080825260208201528152602001906001900390816108b75790505b50905060005b825181101561096457600083828151811061090157610901613c92565b6020908102919091018101516000818152600383526040908190205481518083019092528282526001600160a01b031692810183905285519193509085908590811061094f5761094f613c92565b602090810291909101015250506001016108e4565b509392505050565b600754604051634fa3d25d60e01b81526001600160a01b038481166004830152602482018490526000928392911690634fa3d25d90604401602060405180830381865afa1580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e59190613ca8565b9050806109f6576000915050610663565b600d5442118015610a0c57600192505050610663565b60075460405163493fe80f60e01b8152600481018690526000916001600160a01b03169063493fe80f90602401600060405180830381865afa158015610a56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7e9190810190613dc6565b600f5460409091015110935050505092915050565b600033610aa0818461140b565b50600754604051627eeac760e11b81526001600160a01b03838116600483015260248201879052600092169062fdd58e90604401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190613e88565b905060008111610b675760405162461bcd60e51b815260206004820152601d60248201527f4e6f2048535420746f6b656e2062616c616e6365206174206e6f6e636500000060448201526064016106ac565b610b736009601961162c565b60075460405163493fe80f60e01b8152600481018790526000918291610bf3916001600160a01b03169063493fe80f90602401600060405180830381865afa158015610bc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610beb9190810190613dc6565b6009906117d0565b915091506000805b825151811015610d5957600083600001518281518110610c1d57610c1d613c92565b602090810291909101015180519091506001600160a01b0316610c825760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642070726f6a656374206164647265737300000000000000000060448201526064016106ac565b80516001600160a01b039081166000908152600c60205260408082205481850151915163f59002e360e01b81529316928291849163f59002e391610ccc9160040190815260200190565b60c0604051808303816000875af1158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f9190613ea1565b92509250508087600001518681518110610d2b57610d2b613c92565b6020908102919091010151604001528151610d47908790611940565b95505060019093019250610bfb915050565b506007546040516001600160a01b039091169063d8938f269087908b908890610d86908890602001613fd8565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610db4949392919061404d565b6020604051808303816000875af1158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df79190613e88565b6006549096506001600160a01b03168315610f54576000610e256103e8610e1f87601961194c565b90611958565b9050610e318582611964565b94506000610e6b886001600160a01b0390811660009081526002602081815260408084209092015480845260039091529120549092911690565b9150506001600160a01b03811615610ef65760405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef09190613ca8565b50610f51565b604051630852cd8d60e31b8152600481018390526001600160a01b038416906342966c6890602401600060405180830381600087803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b505050505b50505b6001600160a01b03811663a9059cbb87610f6e8786611940565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190613ca8565b5050505050505092915050565b610ff2611970565b610ffc60006119ca565b565b606061100a601c611a1a565b905090565b6004546001600160a01b031633146110395760405162461bcd60e51b81526004016106ac90613b3a565b611044816001611a27565b60008190506000816001600160a01b031663800151526040518163ffffffff1660e01b8152600401602060405180830381865afa158015611089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ad91906140ba565b90506110ba601c82611a64565b506111628382846001600160a01b0316634c0f38c26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190613e88565b6001600160a01b039283166000818152600b6020908152604080832094909455949093168352600c909352902080546001600160a01b0319169091179055565b505050565b6004546000906001600160a01b031633146111945760405162461bcd60e51b81526004016106ac90613b3a565b61119e838361140b565b9392505050565b60003361119e818461140b565b60b482101580156111c557506104388211155b6112115760405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642065706f636873206c6f636b20706572696f6400000000000060448201526064016106ac565b3361121c818361140b565b506112296009601961162c565b601254600f5460085460009261124f9289928992919089906001600160a01b0316611a79565b905061126981608001516009611dee90919063ffffffff16565b505050505050565b611279611970565b6001600160a01b0381166112de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ac565b610812816119ca565b808360010160008282546112fb9190613c7f565b90915550506001600160a01b03821660009081526002840160205260408120805490910361138857826001600160a01b0316634c0f38c26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113859190613e88565b81555b8181600101600082825461139c9190613c7f565b909155505050505050565b6108128133611e0b565b8154156114005760405162461bcd60e51b815260206004820152601760248201527f546f74616c2066756e647320616c72656164792073657400000000000000000060448201526064016106ac565b815542600490910155565b6001600160a01b038216600090815260026020526040812080541561143257549050610663565b60018054906000611442836140d7565b90915550506040805160808101825260015481526001600160a01b038616602082015290810184905260608101600060405190808252806020026020018201604052801561149a578160200160208202803683370190505b5090526001600160a01b0385811660009081526002602081815260409283902085518155858201516001820180546001600160a01b03191691909616179094559184015190830155606083015180516114f9926003850192019061355a565b5050600154600090815260036020526040902080546001600160a01b0319166001600160a01b03871617905550821580159061153757506001548314155b801561155957506000838152600360205260409020546001600160a01b031615155b156115d6576000838152600360208181526040808420546001600160a01b0316845260028252808420600180549190940180548086018255908652948390209094019390935590548251868152918201527fa8b1f3acfefae9dbf6c7ffd8c16eda5db6950c383b34ca999d98f9998721c50c910160405180910390a15b600154604080519182526001600160a01b038616602083015281018490527fb58d46e66658e855773af8232237e606476d7f0ad98813c081b540e6f435ea3e9060600160405180910390a1505060015492915050565b600482015442908082116116405750505050565b600061164c8483611e97565b60408051808201909152855481526001860154602082015290915060009061167690838587611f92565b905060006116838661207d565b905082811115611702576000600161169b85846140f0565b6116a591906140f0565b905060018111156116d0576116c3846116be8382613c7f565b612089565b6116cd9084613c7f565b92505b6040805180820190915287548152600188015460208201526116f490838789611f92565b6116fe9084613c7f565b9250505b600061170d83612144565b6060810180516000909152909150611728600a8a01836122a7565b6000600a611737836007613c68565b6117419190614119565b60058b0154909150801561178b57600081611764670de0b6b3a764000085613c68565b61176e9190614119565b9050808c60060160008282546117849190613c7f565b9091555050505b818b600701600082825461179f9190613c7f565b909155506117bc90506117b283856140f0565b60088d0190612351565b505050506004909601939093555050505050565b60006118126040518060e00160405280606081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b600984015460009080156118a05760005b85515181101561186e5761185a878760000151838151811061184757611847613c92565b6020026020010151886020015185612380565b6118649084613c7f565b9250600101611823565b50600886015482111561188357600886015491505b8186600801600001600082825461189a91906140f0565b90915550505b600686015480158015906118b75750808660400151105b1561192e576000670de0b6b3a764000087608001518860400151846118dc91906140f0565b6118e69190613c68565b6118f09190614119565b9050808860070154101561190657876007015493505b8088600701600082825461191a91906140f0565b9091555061192a90508185613c7f565b9350505b60408601526020850152949293505050565b600061119e8284613c7f565b600061119e8284613c68565b600061119e8284614119565b600061119e82846140f0565b6000546001600160a01b03163314610ffc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061119e836124d7565b6001600160a01b0382166000908152601b60205260409020805482919060ff191660018381811115611a5b57611a5b6135e3565b02179055505050565b600061119e836001600160a01b038416612533565b611ab96040518060e00160405280606081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b33600080808080611acb8d8d8a612582565b91509150600a81518351611adf9190613c7f565b10611b2c5760405162461bcd60e51b815260206004820152601760248201527f4d61782053465420746f6b656e7320657863656564656400000000000000000060448201526064016106ac565b60005b8c811015611d595760008e8e83818110611b4b57611b4b613c92565b905060600201803603810190611b61919061412d565b60065481519192506001600160a01b03908116911603611b92576020810151611b8b908690611940565b9450611d46565b80516001600160a01b03808c16911603611cc5576008546040808301519051627eeac760e11b81526000926001600160a01b03169162fdd58e91611bee918d916004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2f9190613e88565b905081602001518114611c845760405162461bcd60e51b815260206004820152601b60248201527f4d7573742073656e6420616c6c204c6b5348542062616c616e6365000000000060448201526064016106ac565b611c8e8682611940565b95508160400151848881518110611ca757611ca7613c92565b602090810291909101015286611cbc816140d7565b97505050611d46565b8051611cd390601c906126ef565b15611d095780848881518110611ceb57611ceb613c92565b60200260200101819052508680611d01906140d7565b975050611d46565b60405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21029b2b73a102a37b5b2b760711b60448201526064016106ac565b611d508189612711565b50600101611b2f565b50600754604051637eed5c1160e11b81526001600160a01b039091169063fddab82290611d969085908f908f908f908a9089908f90600401614171565b6000604051808303816000875af1158015611db5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ddd9190810190613dc6565b9d9c50505050505050505050505050565b80826005016000828254611e029190613c7f565b90915550505050565b611e1860208301836135c6565b6040516323b872dd60e01b81526001600160a01b0383811660048301523060248301526020850135604483015291909116906323b872dd906064015b6020604051808303816000875af1158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111629190613ca8565b8154600090611ee85760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642067656e657369732074696d657374616d700000000000000060448201526064016106ac565b60008211611f2c5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b60448201526064016106ac565b6000836001015411611f775760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c8408ae0dec6d040d8cadccee8d60631b60448201526064016106ac565b60018301548354611f8890846140f0565b61119e9190614119565b60008080611fa087876128d1565b91509150600080858411158015611fb75750828611155b15611fc6575084905082612056565b868411158015611fd65750828711155b15611ff55782861115611fe95782611feb565b855b9150869050612056565b60405162461bcd60e51b815260206004820152603060248201527f526f757465722e5f636f6d7075746545646765456d697373696f6e733a20496e60448201526f76616c69642074696d657374616d707360801b60648201526084016106ac565b61206e8861206483856140f0565b8b60200151612917565b9450505050505b949350505050565b60006106638242611e97565b60008282116120d05760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642065706f63682072616e676560681b60448201526064016106ac565b60006120db84612938565b905060006120e884612938565b905060006120fd670de000cd866f8000612966565b61210783856141cb565b61211a906893fa92954c28c89b946141f2565b6121249190614222565b905061213a612135826000196141f2565b612998565b9695505050505050565b61217d6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061271061218e610bbd82614250565b61219e9063ffffffff1685613c68565b6121a89190614119565b905060006127106121bb61090184613c68565b6121c59190614119565b905060006127106121d86105ff85613c68565b6121e29190614119565b905060006127106121f561067786613c68565b6121ff9190614119565b9050600061271061221261032087613c68565b61221c9190614119565b9050600061271061222f6102bc88613c68565b6122399190614119565b9050600081838561224a888a613c7f565b6122549190613c7f565b61225e9190613c7f565b6122689190613c7f565b612272908a6140f0565b6040805160c08101825297885260208801919091528601949094526060850192909252608084015260a0830152509392505050565b8051825483906000906122bb908490613c7f565b909155505060208101516001830180546000906122d9908490613c7f565b909155505060408101516002830180546000906122f7908490613c7f565b90915550506060810151600383018054600090612315908490613c7f565b90915550506080810151600483018054600090612333908490613c7f565b909155505060a0810151600583018054600090611e02908490613c7f565b808260000160008282546123659190613c7f565b9250508190555080826001016000828254611e029190613c7f565b6000818310158061239357506001850154155b156123a057506000612075565b83516001600160a01b03908116600090815260038701602052604090205416806124165760405162461bcd60e51b815260206004820152602160248201527f50726f6a656374204164647265737320666f7220746f6b656e206e6f742073656044820152601d60fa1b60648201526084016106ac565b6001600160a01b03811660009081526002870160209081526040909120805491870151909110156124895760405162461bcd60e51b815260206004820152601e60248201527f50726f6a65637420746f6b656e20616d6f756e7420746f6f206c61726765000060448201526064016106ac565b600061249586866140f0565b9050600088600101548360010154836124ae9190613c68565b6124b89190614119565b835460208a0151919250906124cd9083613c68565b61206e9190614119565b60608160000180548060200260200160405190810160405280929190818152602001828054801561252757602002820191906000526020600020905b815481526020019060010190808311612513575b50505050509050919050565b600081815260018301602052604081205461257a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610663565b506000610663565b60608060008060005b868110156126275760008888838181106125a7576125a7613c92565b9050606002018036038101906125bd919061412d565b60065481519192506001600160a01b0391821691161461261e5780516001600160a01b038089169116036125fd57826125f5816140d7565b93505061261e565b805161260b90601c906126ef565b15611d09578361261a816140d7565b9450505b5060010161258b565b50816001600160401b03811115612640576126406137fc565b60405190808252806020026020018201604052801561269e57816020015b61268b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b81526020019060019003908161265e5790505b509350806001600160401b038111156126b9576126b96137fc565b6040519080825280602002602001820160405280156126e2578160200160208202803683370190505b5092505050935093915050565b6001600160a01b0381166000908152600183016020526040812054151561119e565b81516001600160a01b03166127fa573482602001511461278e5760405162461bcd60e51b815260206004820152603260248201527f4578706563746564207061796d656e7420616d6f756e74206d75737420657175604482015271185b081d1a19481cd95b9d08185b5bdd5b9d60721b60648201526084016106ac565b6001600160a01b03811633146106c25760405162461bcd60e51b815260206004820152602b60248201527f43616e2072656365697665206e6174697665207061796d656e74206f6e6c792060448201526a333937b69031b0b63632b960a91b60648201526084016106ac565b816040015160000361284957815160208301516040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd90606401611e54565b815160408084015160208501519151637921219560e11b81526001600160a01b0385811660048301523060248301526044820192909252606481019290925260a06084830152600060a48301529091169063f242432a9060c401600060405180830381600087803b1580156128bd57600080fd5b505af1158015611269573d6000803e3d6000fd5b6000808360200151836128e49190613c68565b84516128f09190613c7f565b915060018460200151836129049190613c7f565b61290e91906140f0565b90509250929050565b60008183612924866129c2565b61292e9190613c68565b6120759190614119565b6000610663670de000cd866f800061294f84612a05565b61296190670de0b6b3a76400006141f2565b612a32565b60006714057b7ef767814f670de0b6b3a764000061298384612a74565b028161299157612991614103565b0592915050565b6000808212156129be57604051635afb78ad60e11b8152600481018390526024016106ac565b5090565b6000806129da670de000cd866f800061296185612a05565b905061119e670de0b6b3a76400006129fb836893fa92954c28c89b946141f2565b6121359190614222565b60006001600160ff1b038211156129be5760405163322efb3360e21b8152600481018390526024016106ac565b600082600003612a5a578115612a49576000612a53565b670de0b6b3a76400005b9050610663565b61119e612a6f612a6985612a74565b84612b59565b612c1e565b6000808213612a995760405163309fa7dd60e11b8152600481018390526024016106ac565b6000670de0b6b3a76400008312612ab257506001612acc565b6000199050826ec097ce7bc90715b34b9f10000000000492505b6000612ae1670de0b6b3a76400008505612cb4565b670de0b6b3a764000081029350905083811d670de0b6b3a763ffff198101612b0b57505002919050565b6706f05b59d3b200005b6000811315612b5057670de0b6b3a7640000828002059150671bc16d674ec800008212612b48579384019360019190911d905b60011d612b15565b50505002919050565b6000600160ff1b831480612b705750600160ff1b82145b15612b8e57604051630d01a11b60e21b815260040160405180910390fd5b60008060008512612b9f5784612ba4565b846000035b915060008412612bb45783612bb9565b836000035b90506000612bc78383612d98565b90506001600160ff1b03811115612bf45760405163bf79e8d960e01b8152600481018290526024016106ac565b600019808713908613808218600114612c0d5782612c12565b826000035b98975050505050505050565b600080821215612c6b5768033dd1780914b9711419821215612c4257506000919050565b612c4e82600003612c1e565b6ec097ce7bc90715b34b9f10000000008161299157612991614103565b680a688906bd8b0000008212612c975760405163e69458f960e01b8152600481018390526024016106ac565b670de0b6b3a7640000604083901b0461119e81612e5e565b919050565b6000600160801b8210612cd457608091821c91612cd19082613c7f565b90505b680100000000000000008210612cf757604091821c91612cf49082613c7f565b90505b6401000000008210612d1657602091821c91612d139082613c7f565b90505b620100008210612d3357601091821c91612d309082613c7f565b90505b6101008210612d4f57600891821c91612d4c9082613c7f565b90505b60108210612d6a57600491821c91612d679082613c7f565b90505b60048210612d8557600291821c91612d829082613c7f565b90505b60028210612caf57610663600182613c7f565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612ddc5760405163698d9a0160e11b8152600481018290526024016106ac565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003612e1a5780670de0b6b3a7640000850401945050505050610663565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b678000000000000000821615612e825768016a09e667f3bcc9090260401c5b674000000000000000821615612ea1576801306fe0a31b7152df0260401c5b672000000000000000821615612ec0576801172b83c7d517adce0260401c5b671000000000000000821615612edf5768010b5586cf9890f62a0260401c5b670800000000000000821615612efe576801059b0d31585743ae0260401c5b670400000000000000821615612f1d57680102c9a3e778060ee70260401c5b670200000000000000821615612f3c5768010163da9fb33356d80260401c5b670100000000000000821615612f5b57680100b1afa5abcbed610260401c5b6680000000000000821615612f795768010058c86da1c09ea20260401c5b6640000000000000821615612f97576801002c605e2e8cec500260401c5b6620000000000000821615612fb557680100162f3904051fa10260401c5b6610000000000000821615612fd3576801000b175effdc76ba0260401c5b6608000000000000821615612ff157680100058ba01fb9f96d0260401c5b660400000000000082161561300f5768010002c5cc37da94920260401c5b660200000000000082161561302d576801000162e525ee05470260401c5b660100000000000082161561304b5768010000b17255775c040260401c5b65800000000000821615613068576801000058b91b5bc9ae0260401c5b6540000000000082161561308557680100002c5c89d5ec6d0260401c5b652000000000008216156130a25768010000162e43f4f8310260401c5b651000000000008216156130bf57680100000b1721bcfc9a0260401c5b650800000000008216156130dc5768010000058b90cf1e6e0260401c5b650400000000008216156130f9576801000002c5c863b73f0260401c5b6502000000000082161561311657680100000162e430e5a20260401c5b65010000000000821615613133576801000000b1721835510260401c5b64800000000082161561314f57680100000058b90c0b490260401c5b64400000000082161561316b5768010000002c5c8601cc0260401c5b642000000000821615613187576801000000162e42fff00260401c5b6410000000008216156131a35768010000000b17217fbb0260401c5b6408000000008216156131bf576801000000058b90bfce0260401c5b6404000000008216156131db57680100000002c5c85fe30260401c5b6402000000008216156131f75768010000000162e42ff10260401c5b64010000000082161561321357680100000000b17217f80260401c5b638000000082161561322e5768010000000058b90bfc0260401c5b6340000000821615613249576801000000002c5c85fe0260401c5b632000000082161561326457680100000000162e42ff0260401c5b631000000082161561327f576801000000000b17217f0260401c5b630800000082161561329a57680100000000058b90c00260401c5b63040000008216156132b55768010000000002c5c8600260401c5b63020000008216156132d0576801000000000162e4300260401c5b63010000008216156132eb5768010000000000b172180260401c5b62800000821615613305576801000000000058b90c0260401c5b6240000082161561331f57680100000000002c5c860260401c5b622000008216156133395768010000000000162e430260401c5b6210000082161561335357680100000000000b17210260401c5b6208000082161561336d5768010000000000058b910260401c5b62040000821615613387576801000000000002c5c80260401c5b620200008216156133a157680100000000000162e40260401c5b620100008216156133bb576801000000000000b1720260401c5b6180008216156133d457680100000000000058b90260401c5b6140008216156133ed5768010000000000002c5d0260401c5b612000821615613406576801000000000000162e0260401c5b61100082161561341f5768010000000000000b170260401c5b610800821615613438576801000000000000058c0260401c5b61040082161561345157680100000000000002c60260401c5b61020082161561346a57680100000000000001630260401c5b61010082161561348357680100000000000000b10260401c5b608082161561349b57680100000000000000590260401c5b60408216156134b3576801000000000000002c0260401c5b60208216156134cb57680100000000000000160260401c5b60108216156134e3576801000000000000000b0260401c5b60088216156134fb57680100000000000000060260401c5b600482161561351357680100000000000000030260401c5b600282161561352b57680100000000000000010260401c5b600182161561354357680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b828054828255906000526020600020908101928215613595579160200282015b8281111561359557825182559160200191906001019061357a565b506129be9291505b808211156129be576000815560010161359d565b6001600160a01b038116811461081257600080fd5b6000602082840312156135d857600080fd5b813561119e816135b1565b634e487b7160e01b600052602160045260246000fd5b602081016002831061361b57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561363357600080fd5b81356001600160e01b03198116811461119e57600080fd5b60006020828403121561365d57600080fd5b5035919050565b60006040828403121561367657600080fd5b50919050565b602080825282518282018190526000919060409081850190868401855b828110156136c7578151805185528601516001600160a01b0316868501529284019290850190600101613699565b5091979650505050505050565b600080604083850312156136e757600080fd5b82356136f2816135b1565b946020939093013593505050565b6000806040838503121561371357600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156137635783516001600160a01b03168352928401929184019160010161373e565b50909695505050505050565b60006101c0820190508982528860208301528760408301528660608301528560808301528460a08301526137b060c083018580518252602090810151910152565b8251610100830152602083015161012083015260408301516101408301526060830151610160830152608083015161018083015260a08301516101a08301529998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715613834576138346137fc565b60405290565b60405160e081016001600160401b0381118282101715613834576138346137fc565b604051601f8201601f191681016001600160401b0381118282101715613884576138846137fc565b604052919050565b60006001600160401b038211156138a5576138a56137fc565b5060051b60200190565b600082601f8301126138c057600080fd5b813560206138d56138d08361388c565b61385c565b8083825260208201915060208460051b8701019350868411156138f757600080fd5b602086015b8481101561391357803583529183019183016138fc565b509695505050505050565b600082601f83011261392f57600080fd5b81356001600160401b03811115613948576139486137fc565b61395b601f8201601f191660200161385c565b81815284602083860101111561397057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156139a557600080fd5b85356139b0816135b1565b945060208601356139c0816135b1565b935060408601356001600160401b03808211156139dc57600080fd5b6139e889838a016138af565b945060608801359150808211156139fe57600080fd5b613a0a89838a016138af565b93506080880135915080821115613a2057600080fd5b50613a2d8882890161391e565b9150509295509295909350565b60008060008060608587031215613a5057600080fd5b84356001600160401b0380821115613a6757600080fd5b818701915087601f830112613a7b57600080fd5b813581811115613a8a57600080fd5b886020606083028501011115613a9f57600080fd5b6020928301999098509187013596604001359550909350505050565b600080600080600060a08688031215613ad357600080fd5b8535613ade816135b1565b94506020860135613aee816135b1565b9350604086013592506060860135915060808601356001600160401b03811115613b1757600080fd5b613a2d8882890161391e565b815181526020808301519082015260408101610663565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115613bb3578160001904821115613b9957613b99613b62565b80851615613ba657918102915b93841c9390800290613b7d565b509250929050565b600082613bca57506001610663565b81613bd757506000610663565b8160018114613bed5760028114613bf757613c13565b6001915050610663565b60ff841115613c0857613c08613b62565b50506001821b610663565b5060208310610133831016604e8410600b8410161715613c36575081810a610663565b613c408383613b78565b8060001904821115613c5457613c54613b62565b029392505050565b600061119e8383613bbb565b808202811582820484141761066357610663613b62565b8082018082111561066357610663613b62565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613cba57600080fd5b8151801515811461119e57600080fd5b600082601f830112613cdb57600080fd5b81516020613ceb6138d08361388c565b82815260609283028501820192828201919087851115613d0a57600080fd5b8387015b85811015613d5a5781818a031215613d265760008081fd5b613d2e613812565b8151613d39816135b1565b81528186015186820152604080830151908201528452928401928101613d0e565b5090979650505050505050565b600082601f830112613d7857600080fd5b81516020613d886138d08361388c565b8083825260208201915060208460051b870101935086841115613daa57600080fd5b602086015b848110156139135780518352918301918301613daf565b600060208284031215613dd857600080fd5b81516001600160401b0380821115613def57600080fd5b9083019060e08286031215613e0357600080fd5b613e0b61383a565b825182811115613e1a57600080fd5b613e2687828601613cca565b8252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115613e6d57600080fd5b613e7987828601613d67565b60c08301525095945050505050565b600060208284031215613e9a57600080fd5b5051919050565b600080600083850360c0811215613eb757600080fd5b6060811215613ec557600080fd5b613ecd613812565b855181526020860151613edf816135b1565b806020830152506040808701518183015281955080605f1984011215613f0457600080fd5b8051925080830191508282106001600160401b0383111715613f2857613f286137fc565b52606085015181526080850151602082015260a09094015192959394509192915050565b60008151808452602080850194506020840160005b83811015613f9c57815180516001600160a01b0316885283810151848901526040908101519088015260609096019590820190600101613f61565b509495945050505050565b60008151808452602080850194506020840160005b83811015613f9c57815187529582019590820190600101613fbc565b602081526000825160e06020840152613ff5610100840182613f4c565b9050602084015160408401526040840151606084015260608401516080840152608084015160a084015260a084015160c084015260c0840151601f198483030160e08501526140448282613fa7565b95945050505050565b60018060a01b03851681526000602085602084015284604084015260806060840152835180608085015260005b818110156140965785810183015185820160a00152820161407a565b50600060a0828601015260a0601f19601f8301168501019250505095945050505050565b6000602082840312156140cc57600080fd5b815161119e816135b1565b6000600182016140e9576140e9613b62565b5060010190565b8181038181111561066357610663613b62565b634e487b7160e01b600052601260045260246000fd5b60008261412857614128614103565b500490565b60006060828403121561413f57600080fd5b614147613812565b8235614152816135b1565b8152602083810135908201526040928301359281019290925250919050565b60e08152600061418460e083018a613f4c565b88602084015287604084015286606084015285608084015282810360a08401526141ae8186613fa7565b91505060018060a01b03831660c083015298975050505050505050565b81810360008312801583831316838312821617156141eb576141eb613b62565b5092915050565b80820260008212600160ff1b8414161561420e5761420e613b62565b818105831482151761066357610663613b62565b60008261423157614231614103565b600160ff1b82146000198414161561424b5761424b613b62565b500590565b63ffffffff8281168282160390808211156141eb576141eb613b6256fea2646970667358221220e815d4473ae5d62355e5447155476d6110e7b4c701771da5623718a77d29226864736f6c63430008180033",
  "libraries": {
    "NewHousingStakingToken": "0x0467F7E18a8Cb24ed55446925D9706f5557662D0"
  },
  "devdoc": {
    "details": "Main contract for the SmartHousing ecosystem. Manages HousingProjects, users, and staking.",
    "kind": "dev",
    "methods": {
      "addProject(address)": {
        "params": {
          "projectAddress": "Address of the new project."
        }
      },
      "addProjectRent(uint256)": {
        "params": {
          "amount": "Amount of rent received."
        }
      },
      "claimRewards(uint256,uint256)": {
        "params": {
          "hstNonce": "Nonce of the HST token.",
          "referrerId": "Referral ID of the referrer."
        },
        "returns": {
          "newHstNonce": "New HST nonce."
        }
      },
      "constructor": {
        "params": {
          "coinbase": "Address of the coinbase.",
          "projectFunding": "Address of the ProjectFunding contract."
        }
      },
      "createRefID(uint256)": {
        "params": {
          "referrerId": "The ID of the referrer."
        },
        "returns": {
          "_0": "The ID of the registered user."
        }
      },
      "createRefIDViaProxy(address,uint256)": {
        "params": {
          "referrerId": "Referral ID of the referrer.",
          "userAddr": "Address of the user."
        },
        "returns": {
          "_0": "User ID."
        }
      },
      "getReferrals(address)": {
        "params": {
          "userAddress": "The address of the user."
        },
        "returns": {
          "_0": "referrals An array of `ReferralInfo` structs representing the user's referrals."
        }
      },
      "getReferrer(address)": {
        "params": {
          "userAddress": "The address of the user."
        },
        "returns": {
          "referrerAddress": "The address of the referrer, address(0) if none.",
          "referrerId": "The ID of the referrer, 0 if none."
        }
      },
      "getUserId(address)": {
        "params": {
          "userAddress": "The address of the user."
        },
        "returns": {
          "userId": "The ID of the user."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "projectDets(address)": {
        "params": {
          "project": "Address of the project."
        },
        "returns": {
          "_0": "Project distribution data."
        }
      },
      "projectsToken()": {
        "returns": {
          "_0": "Array of project token addresses."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setUpSHT((address,uint256))": {
        "params": {
          "payment": "Token payment details for SHT setup."
        }
      },
      "stake((address,uint256,uint256)[],uint256,uint256)": {
        "params": {
          "epochsLock": "Lock period in epochs.",
          "referrerId": "Referral ID of the referrer.",
          "stakingTokens": "Array of token payments for staking."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userCanClaim(address,uint256)": {
        "params": {
          "tokenNonce": "Nonce of the token.",
          "user": "Address of the user."
        },
        "returns": {
          "_0": "True if the user can claim rewards, otherwise false."
        }
      }
    },
    "title": "SmartHousing",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathSD59x18__Exp2InputTooBig(int256)": [
        {
          "notice": "Emitted when the input is greater than 192."
        }
      ],
      "PRBMathSD59x18__LogInputTooSmall(int256)": [
        {
          "notice": "Emitted when the input is less than or equal to zero."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "ToInt256CastOverflow(uint256)": [
        {
          "notice": "Emitted when trying to convert a uint256 number that doesn't fit within int256."
        }
      ],
      "ToUint256CastOverflow(int256)": [
        {
          "notice": "Emitted when trying to convert a int256 number that doesn't fit within uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addProject(address)": {
        "notice": "Add a new project and set its permissions."
      },
      "addProjectRent(uint256)": {
        "notice": "Add rent to a project and update distribution storage."
      },
      "claimRewards(uint256,uint256)": {
        "notice": "Claim rewards and update token attributes."
      },
      "constructor": {
        "notice": "Constructor to initialize SmartHousing."
      },
      "createRefID(uint256)": {
        "notice": "Register a new user or get the referral ID if already registered."
      },
      "createRefIDViaProxy(address,uint256)": {
        "notice": "Register a new user or get the referral ID if already registered."
      },
      "getReferrals(address)": {
        "notice": "Retrieves the referrals of a user."
      },
      "getReferrer(address)": {
        "notice": "Gets the referrer and referrer ID of a user."
      },
      "getUserId(address)": {
        "notice": "Gets the user ID for a given address."
      },
      "projectDets(address)": {
        "notice": "Get project distribution details."
      },
      "projectsToken()": {
        "notice": "Get the list of project tokens."
      },
      "setUpSHT((address,uint256))": {
        "notice": "Setup SHT token and distribute funds."
      },
      "stake((address,uint256,uint256)[],uint256,uint256)": {
        "notice": "Stake tokens for rewards."
      },
      "userCanClaim(address,uint256)": {
        "notice": "Check if a user can claim rewards."
      }
    },
    "notice": "SmartHousing enables real estate tokenization for fractional ownership and investment.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6894,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "userCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6899,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)6892_storage)"
      },
      {
        "astId": 6903,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "userIdToAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6004,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "projectFundingAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6006,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "coinbaseAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6008,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "shtTokenAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6011,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "hst",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(HousingStakingToken)5897"
      },
      {
        "astId": 6014,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "lkSht",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(LkSHT)8081"
      },
      {
        "astId": 6017,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "distributionStorage",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Storage)7236_storage"
      },
      {
        "astId": 6020,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "epochs",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(Storage)4892_storage"
      },
      {
        "astId": 6028,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "permissions",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_enum(Permissions)6023)"
      },
      {
        "astId": 6031,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_projectsToken",
        "offset": 0,
        "slot": "28",
        "type": "t_struct(AddressSet)3435_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(HousingStakingToken)5897": {
        "encoding": "inplace",
        "label": "contract HousingStakingToken",
        "numberOfBytes": "20"
      },
      "t_contract(LkSHT)8081": {
        "encoding": "inplace",
        "label": "contract LkSHT",
        "numberOfBytes": "20"
      },
      "t_enum(Permissions)6023": {
        "encoding": "inplace",
        "label": "enum SmartHousing.Permissions",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_enum(Permissions)6023)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum SmartHousing.Permissions)",
        "numberOfBytes": "32",
        "value": "t_enum(Permissions)6023"
      },
      "t_mapping(t_address,t_struct(ProjectDistributionData)7241_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Distribution.ProjectDistributionData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProjectDistributionData)7241_storage"
      },
      "t_mapping(t_address,t_struct(User)6892_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserModule.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6892_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)3435_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3434,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3120_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProjectDistributionData)7241_storage": {
        "encoding": "inplace",
        "label": "struct Distribution.ProjectDistributionData",
        "members": [
          {
            "astId": 7238,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "maxShares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7240,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "receivedRents",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3120_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3115,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3119,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)4892_storage": {
        "encoding": "inplace",
        "label": "struct Epochs.Storage",
        "members": [
          {
            "astId": 4889,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "genesis",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4891,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "epochLength",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)7236_storage": {
        "encoding": "inplace",
        "label": "struct Distribution.Storage",
        "members": [
          {
            "astId": 7210,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "totalFunds",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7212,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectsTotalReceivedRents",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7217,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectDets",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(ProjectDistributionData)7241_storage)"
          },
          {
            "astId": 7221,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectSftToProjectAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 7223,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "lastFundsDispatchTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7225,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "shtTotalStakeWeight",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7227,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "shtRewardPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7229,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "shtStakingRewards",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7232,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectsStakingRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Value)7156_storage"
          },
          {
            "astId": 7235,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "entityFunds",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Value)8676_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(User)6892_storage": {
        "encoding": "inplace",
        "label": "struct UserModule.User",
        "members": [
          {
            "astId": 6884,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6886,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6888,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "referrerId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6891,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "referrals",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Value)7156_storage": {
        "encoding": "inplace",
        "label": "struct ProjectStakingRewards.Value",
        "members": [
          {
            "astId": 7153,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "toShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7155,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "checkpoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Value)8676_storage": {
        "encoding": "inplace",
        "label": "struct Entities.Value",
        "members": [
          {
            "astId": 8665,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "team",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8667,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "protocol",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8669,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "growth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8671,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "staking",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8673,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectsReserve",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8675,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "lpAndListing",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}