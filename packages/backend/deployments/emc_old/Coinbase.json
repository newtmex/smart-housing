{
  "address": "0xCB538225d84769a0A1da8CB88396360966f33d19",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "smartHousingAddr",
          "type": "address"
        }
      ],
      "name": "feedSmartHousing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "projectFundingAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartHousingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fundingGoal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingDeadline",
          "type": "uint256"
        }
      ],
      "name": "startICO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13617548bd078902ee31e8a50fef4344934b90704ce913267ef889187ec6fbee",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0xCB538225d84769a0A1da8CB88396360966f33d19",
    "transactionIndex": 0,
    "gasUsed": "1152429",
    "logsBloom": "0x
    "blockHash": "0xdf315005d883ba43869cc228ebea7a71a28562c0a9cfe09676ebccef6600fc7a",
    "transactionHash": "0x13617548bd078902ee31e8a50fef4344934b90704ce913267ef889187ec6fbee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3142330,
        "transactionHash": "0x13617548bd078902ee31e8a50fef4344934b90704ce913267ef889187ec6fbee",
        "address": "0xCB538225d84769a0A1da8CB88396360966f33d19",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdf315005d883ba43869cc228ebea7a71a28562c0a9cfe09676ebccef6600fc7a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3142330,
        "transactionHash": "0x13617548bd078902ee31e8a50fef4344934b90704ce913267ef889187ec6fbee",
        "address": "0xCB538225d84769a0A1da8CB88396360966f33d19",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cb538225d84769a0a1da8cb88396360966f33d19"
        ],
        "data": "0x000000000000000000000000000000000000000000115eec47f6cf7e35000000",
        "logIndex": 1,
        "blockHash": "0xdf315005d883ba43869cc228ebea7a71a28562c0a9cfe09676ebccef6600fc7a"
      }
    ],
    "blockNumber": 3142330,
    "cumulativeGasUsed": "1152429",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2ab48957edcdbd6aae4057970ab478a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartHousingAddr\",\"type\":\"address\"}],\"name\":\"feedSmartHousing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"projectFundingAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartHousingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundingGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingDeadline\",\"type\":\"uint256\"}],\"name\":\"startICO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used to start the ICO for housing projects.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"feedSmartHousing(address)\":{\"details\":\"Dispatches ecosystem funds if not already dispatched to SmartHousing contract.\",\"params\":{\"smartHousingAddr\":\"The address of the SmartHousing contract.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"startICO(string,string,address,address,address,uint256,uint256)\":{\"details\":\"Starts the ICO by initializing the first housing project.\",\"params\":{\"fundingDeadline\":\"The deadline for the project funding.\",\"fundingGoal\":\"The funding goal for the new project.\",\"fundingToken\":\"Address of the funding token (ERC20).\",\"projectFundingAddr\":\"Address of the ProjectFunding contract.\",\"smartHousingAddress\":\"Address of the SmartHousing contract.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Coinbase\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/coinbase/Coinbase.sol\":\"Coinbase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/coinbase/Coinbase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../modules/sht-module/SHTModule.sol\\\";\\nimport \\\"../project-funding/ProjectFunding.sol\\\";\\n\\n/// @title Coinbase\\n/// @dev This contract is used to start the ICO for housing projects.\\ncontract Coinbase is Ownable, SHTModule {\\n\\tconstructor() ERC20(\\\"SmartHousingToken\\\", \\\"SHT\\\") {\\n\\t\\t_mint(address(this), SHT.MAX_SUPPLY);\\n\\t}\\n\\n\\t/// @dev Starts the ICO by initializing the first housing project.\\n\\t/// @param projectFundingAddr Address of the ProjectFunding contract.\\n\\t/// @param smartHousingAddress Address of the SmartHousing contract.\\n\\t/// @param fundingToken Address of the funding token (ERC20).\\n\\t/// @param fundingGoal The funding goal for the new project.\\n\\t/// @param fundingDeadline The deadline for the project funding.\\n\\tfunction startICO(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress projectFundingAddr,\\n\\t\\taddress smartHousingAddress,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) external onlyOwner returns (address) {\\n\\t\\tERC20TokenPayment memory icoPayment = _makeSHTPayment(SHT.ICO_FUNDS);\\n\\n\\t\\t// Directly approve the ProjectFunding contract to spend the ICO funds\\n\\t\\t_approve(address(this), projectFundingAddr, icoPayment.amount);\\n\\n\\t\\treturn\\n\\t\\t\\tProjectFunding(projectFundingAddr).initFirstProject(\\n\\t\\t\\t\\ticoPayment,\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tsymbol,\\n\\t\\t\\t\\tsmartHousingAddress,\\n\\t\\t\\t\\tfundingToken,\\n\\t\\t\\t\\tfundingGoal,\\n\\t\\t\\t\\tfundingDeadline\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @dev Dispatches ecosystem funds if not already dispatched to SmartHousing contract.\\n\\t/// @param smartHousingAddr The address of the SmartHousing contract.\\n\\tfunction feedSmartHousing(address smartHousingAddr) external onlyOwner {\\n\\t\\tuint256 feedAmount = SHT.ECOSYSTEM_DISTRIBUTION_FUNDS;\\n\\t\\trequire(balanceOf(address(this)) >= feedAmount, \\\"Already dispatched\\\");\\n\\n\\t\\tERC20TokenPayment memory feedPayment = _makeSHTPayment(feedAmount);\\n\\n\\t\\t// Directly approve the SmartHousing contract to spend the ecosystem funds\\n\\t\\t_approve(address(this), smartHousingAddr, feedAmount);\\n\\n\\t\\tISmartHousing(smartHousingAddr).setUpSHT(feedPayment);\\n\\t}\\n}\\n\",\"keccak256\":\"0x4b251b412a71e1974068d94384ccc2851a452e69318016dbdb1f8844bb131001\",\"license\":\"MIT\"},\"contracts/housing-project/CallsSmartHousing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"../main/Interface.sol\\\";\\n\\nabstract contract CallsSmartHousing {\\n\\t/// @notice The address of the main SmartHousing contract.\\n\\taddress public immutable smartHousingAddr;\\n\\n\\tconstructor(address smartHousingAddr_) {\\n\\t\\tsmartHousingAddr = smartHousingAddr_;\\n\\t}\\n\\n\\t/// @dev Gets the referrer address for a given original owner.\\n\\t/// @param userAddr The original owner of the token.\\n\\t/// @return The referrer address.\\n\\tfunction _getReferrer(\\n\\t\\taddress userAddr\\n\\t) internal view returns (uint256, address) {\\n\\t\\treturn IUserModule(smartHousingAddr).getReferrer(userAddr);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf2e8b5a1636fd49b057f58d003aeb8964900e2aeec4f8cb3ef95718d29cd214f\",\"license\":\"MIT\"},\"contracts/housing-project/HousingProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./RentsModule.sol\\\";\\nimport \\\"./CallsSmartHousing.sol\\\";\\n\\nuint256 constant RENT_SPREAD_RANGE = 365 days;\\n\\n/// @title HousingProject Contract\\n/// @notice Represents a unique real estate project within the SmartHousing ecosystem.\\n/// @dev This contract inherits from RentsModule and Ownable for management functions.\\ncontract HousingProject is RentsModule, Ownable, CallsSmartHousing {\\n\\tusing RewardShares for rewardshares;\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\n\\tuint256 public maxSupply;\\n\\n\\t// State Variables\\n\\tuint256 public rewardsReserve;\\n\\tuint256 public rewardPerShare;\\n\\n\\tuint256 public totalRewardsCollected;\\n\\tuint256 public totalRewardsGenerated;\\n\\tuint256 public rewardsAPR;\\n\\tuint256 public lastRewardGenerateTimestamp;\\n\\tuint256 public endRewardGenerateTimestamp;\\n\\n\\tuint256 public facilityManagementFunds;\\n\\n\\t// Constants\\n\\tuint256 public constant REWARD_PERCENT = 75;\\n\\tuint256 public constant ECOSYSTEM_PERCENT = 18;\\n\\tuint256 public constant FACILITY_PERCENT = 7;\\n\\n\\tHousingSFT public immutable projectSFT;\\n\\tERC20Burnable public immutable housingToken;\\n\\n\\t/// @notice Initializes the HousingProject contract.\\n\\t/// @param smartHousingAddr The address of the main SmartHousing contract.\\n\\t/// @param housingTokenAddr Coinbase contraact address\\n\\t/// @param name The name of the HousingSFT token.\\n\\t/// @param symbol The symbol of the HousingSFT token.\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddr,\\n\\t\\taddress housingTokenAddr\\n\\t) CallsSmartHousing(smartHousingAddr) {\\n\\t\\tprojectSFT = new HousingSFT(name, symbol);\\n\\t\\tmaxSupply = projectSFT.getMaxSupply();\\n\\n\\t\\t// Initialize the housing token\\n\\t\\thousingToken = ERC20Burnable(housingTokenAddr);\\n\\t}\\n\\n\\t/// @notice Receives rent payments, calculates, and distributes rewards.\\n\\t/// @param rentPayment The details of the rent payment.\\n\\tfunction receiveRent(ERC20TokenPayment calldata rentPayment) external {\\n\\t\\tuint256 rentAmount = rentPayment.amount;\\n\\t\\trequire(rentAmount > 0, \\\"RentsModule: Insufficient amount\\\");\\n\\t\\trequire(\\n\\t\\t\\trentPayment.token == housingToken,\\n\\t\\t\\t\\\"RentsModule: Invalid token\\\"\\n\\t\\t);\\n\\n\\t\\trentPayment.receiveERC20();\\n\\n\\t\\t// Calculate reward components\\n\\t\\tuint256 rentReward = (rentAmount * REWARD_PERCENT) / 100;\\n\\t\\tuint256 ecosystemReward = (rentAmount * ECOSYSTEM_PERCENT) / 100;\\n\\t\\tuint256 facilityReward = (rentAmount * FACILITY_PERCENT) / 100;\\n\\n\\t\\t// Initialize reward generation if it's the first rent payment\\n\\t\\tif (totalRewardsCollected == 0) {\\n\\t\\t\\tlastRewardGenerateTimestamp = block.timestamp;\\n\\t\\t}\\n\\n\\t\\t// Update rewards and reserve\\n\\t\\tendRewardGenerateTimestamp = block.timestamp + RENT_SPREAD_RANGE;\\n\\t\\ttotalRewardsCollected += rentReward;\\n\\t\\trewardsAPR =\\n\\t\\t\\t((totalRewardsCollected - totalRewardsGenerated) *\\n\\t\\t\\t\\tDIVISION_SAFETY_CONST) /\\n\\t\\t\\tmaxSupply /\\n\\t\\t\\t(endRewardGenerateTimestamp - lastRewardGenerateTimestamp);\\n\\n\\t\\tfacilityManagementFunds += facilityReward;\\n\\n\\t\\t// Burn ecosystem reward and notify SmartHousing contract\\n\\t\\thousingToken.burn(ecosystemReward);\\n\\t\\tISmartHousing(smartHousingAddr).addProjectRent(rentAmount);\\n\\t}\\n\\n\\t/// @notice Generates rewards based on elapsed time since the last generation.\\n\\t/// @return generatedRewards The total rewards generated during the elapsed time.\\n\\t/// @return rpsIncrement The increment to be added to rewardPerShare.\\n\\tfunction _generateRewards()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 generatedRewards, uint256 rpsIncrement)\\n\\t{\\n\\t\\tuint256 timeElapsed = _min(\\n\\t\\t\\tendRewardGenerateTimestamp,\\n\\t\\t\\tblock.timestamp\\n\\t\\t) - lastRewardGenerateTimestamp;\\n\\n\\t\\tif (timeElapsed > 0) {\\n\\t\\t\\tgeneratedRewards =\\n\\t\\t\\t\\t(rewardsAPR * maxSupply * timeElapsed) /\\n\\t\\t\\t\\tDIVISION_SAFETY_CONST;\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t(totalRewardsGenerated + generatedRewards) <=\\n\\t\\t\\t\\t\\ttotalRewardsCollected,\\n\\t\\t\\t\\t\\\"HousingProject: Rewards generated overflowed\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\trpsIncrement =\\n\\t\\t\\t\\t(generatedRewards * DIVISION_SAFETY_CONST) /\\n\\t\\t\\t\\tmaxSupply;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Claims rent rewards for a given token and updates attributes.\\n\\t/// @param nonce The nonce of the token to claim rewards for.\\n\\t/// @return attr The updated HousingAttributes.\\n\\t/// @return rewardShares The computed reward shares.\\n\\t/// @return newNonce The new nonce after updating the token.\\n\\tfunction claimRentReward(\\n\\t\\tuint256 nonce\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tHousingAttributes memory attr,\\n\\t\\t\\trewardshares memory rewardShares,\\n\\t\\t\\tuint256 newNonce\\n\\t\\t)\\n\\t{\\n\\t\\t// Generate rewards and increment reward per share\\n\\t\\t{\\n\\t\\t\\t(\\n\\t\\t\\t\\tuint256 generatedRewards,\\n\\t\\t\\t\\tuint256 rpsIncrement\\n\\t\\t\\t) = _generateRewards();\\n\\t\\t\\tif (generatedRewards > 0) {\\n\\t\\t\\t\\trewardPerShare += rpsIncrement;\\n\\t\\t\\t\\trewardsReserve += generatedRewards;\\n\\t\\t\\t\\ttotalRewardsGenerated += generatedRewards;\\n\\t\\t\\t\\tlastRewardGenerateTimestamp = _min(\\n\\t\\t\\t\\t\\tendRewardGenerateTimestamp,\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\t// Fetch user attributes and compute rewards\\n\\t\\tattr = projectSFT.getUserSFT(caller, nonce);\\n\\t\\trewardShares = _computeRewardShares(attr, rewardPerShare);\\n\\n\\t\\tuint256 totalReward = rewardShares.total();\\n\\t\\tif (totalReward == 0) {\\n\\t\\t\\treturn (attr, rewardShares, nonce);\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\trewardsReserve >= totalReward,\\n\\t\\t\\t\\\"RentsModule: Insufficient rewards reserve\\\"\\n\\t\\t);\\n\\t\\trewardsReserve -= totalReward;\\n\\n\\t\\t// Transfer or burn referrer reward\\n\\t\\tuint256 referrerValue = rewardShares.referrerValue;\\n\\t\\tif (referrerValue > 0) {\\n\\t\\t\\t(, address referrer) = _getReferrer(attr.originalOwner);\\n\\t\\t\\tif (referrer != address(0)) {\\n\\t\\t\\t\\thousingToken.transfer(referrer, referrerValue);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thousingToken.burn(referrerValue);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Update user attributes and transfer reward\\n\\t\\tattr.rewardsPerShare = rewardPerShare;\\n\\t\\tnewNonce = projectSFT.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\tnonce,\\n\\t\\t\\tprojectSFT.balanceOf(caller, nonce),\\n\\t\\t\\tabi.encode(attr)\\n\\t\\t);\\n\\t\\thousingToken.transfer(caller, rewardShares.userValue);\\n\\n\\t\\treturn (attr, rewardShares, newNonce);\\n\\t}\\n\\n\\t/// @notice Helper function to calculate the minimum of two values.\\n\\t/// @param a The first value.\\n\\t/// @param b The second value.\\n\\t/// @return The minimum of the two values.\\n\\tfunction _min(uint256 a, uint256 b) private pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n\\n\\t/// @notice Returns the maximum supply of the HousingSFT token.\\n\\t/// @return The maximum supply of the HousingSFT token.\\n\\tfunction getMaxSupply() external view returns (uint256) {\\n\\t\\treturn projectSFT.getMaxSupply();\\n\\t}\\n\\n\\t/// @notice Calculates the amount of rent claimable for a given token.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return The amount of rent claimable.\\n\\tfunction rentClaimable(\\n\\t\\tHousingAttributes memory attr\\n\\t) public view returns (uint256) {\\n\\t\\t(, uint256 rpsIncrement) = _generateRewards();\\n\\n\\t\\treturn\\n\\t\\t\\t_computeRewardShares(attr, rewardPerShare + rpsIncrement).userValue;\\n\\t}\\n}\\n\",\"keccak256\":\"0x24e0d01332e845f30e3cf1e3e011f4d15ff78188ab69d1198e9e312a90b29eee\",\"license\":\"MIT\"},\"contracts/housing-project/HousingSFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../modules/SFT.sol\\\";\\n\\nstruct HousingAttributes {\\n\\tuint256 rewardsPerShare;\\n\\taddress originalOwner;\\n\\tuint256 tokenWeight;\\n}\\n\\n/// @title Housing SFT\\n/// @notice This contract represents a semi-fungible token (SFT) for housing projects.\\n/// @dev This contract will be inherited by the HousingProject contract.\\ncontract HousingSFT is SFT {\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\tusing Address for address;\\n\\n\\tstruct HousingSFTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tHousingAttributes attributes;\\n\\t}\\n\\n\\t/// @notice Maximum supply of tokens for this housing project.\\n\\tuint256 public constant MAX_SUPPLY = 1_000_000;\\n\\n\\t/// @notice The amount of fungible tokens collected from investors to finance the development of this housing project.\\n\\tuint256 public amountRaised;\\n\\n\\t/// @notice The current amount out of the `MAX_SUPPLY` of tokens minted.\\n\\tuint256 public totalSupply;\\n\\n\\t/// @param name_ Name of the SFT.\\n\\t/// @param symbol_ Symbol of the SFT.\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\t/// @notice Sets the amount raised for the housing project.\\n\\t/// @param amountRaised_ The amount raised during the token sale.\\n\\tfunction setAmountRaised(uint256 amountRaised_) external canMint {\\n\\t\\tamountRaised = amountRaised_;\\n\\t}\\n\\n\\t/// @dev Modifier to ensure only the SFT owner (i.e., the owner of the owner of this contract, which is the ProjectFunding Contract) can mint new tokens.\\n\\tmodifier canMint() {\\n\\t\\taddress sftOwner = owner();\\n\\n\\t\\trequire(\\n\\t\\t\\tOwnable(sftOwner).owner() == _msgSender(),\\n\\t\\t\\t\\\"not allowed to mint\\\"\\n\\t\\t);\\n\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Mints SFT tokens for a depositor based on the amount of deposit.\\n\\t/// @param depositAmt The amount of fungible token deposited.\\n\\t/// @param depositor The address of the depositor.\\n\\t/// @return The ID of the newly minted SFT.\\n\\tfunction mintSFT(\\n\\t\\tuint256 depositAmt,\\n\\t\\taddress depositor\\n\\t) external canMint returns (uint256) {\\n\\t\\tuint256 maxShares = MAX_SUPPLY;\\n\\t\\trequire(amountRaised > 0, \\\"HousingSFT: No deposits recorded\\\");\\n\\n\\t\\tuint256 mintShare = (depositAmt * maxShares) / amountRaised;\\n\\t\\trequire(mintShare > 0, \\\"HousingSFT: Computed token shares invalid\\\");\\n\\n\\t\\ttotalSupply += mintShare;\\n\\t\\trequire(totalSupply <= MAX_SUPPLY, \\\"HousingSFT: Max supply exceeded\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tHousingAttributes({\\n\\t\\t\\t\\trewardsPerShare: 0, // Initial rewards per share\\n\\t\\t\\t\\toriginalOwner: depositor,\\n\\t\\t\\t\\ttokenWeight: mintShare\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\treturn _mint(depositor, mintShare, attributes);\\n\\t}\\n\\n\\t/// @notice Retrieves the SFT attributes for a given owner and nonce.\\n\\t/// @param owner The address to check the balance of.\\n\\t/// @param nonce The specific nonce to check.\\n\\t/// @return The attributes associated with the specified SFT.\\n\\tfunction getUserSFT(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce\\n\\t) public view returns (HousingAttributes memory) {\\n\\t\\trequire(\\n\\t\\t\\thasSFT(owner, nonce),\\n\\t\\t\\t\\\"HousingSFT: No tokens found for user at nonce\\\"\\n\\t\\t);\\n\\n\\t\\treturn abi.decode(_getRawTokenAttributes(nonce), (HousingAttributes));\\n\\t}\\n\\n\\t/// @notice Returns the maximum supply of the HousingSFT tokens.\\n\\t/// @return The maximum supply of tokens.\\n\\tfunction getMaxSupply() public pure returns (uint256) {\\n\\t\\treturn MAX_SUPPLY;\\n\\t}\\n\\n\\t/// @notice Returns the SFT balance of a user including detailed attributes.\\n\\t/// @param user The address of the user to check.\\n\\t/// @return An array of `HousingSFTBalance` containing the user's balance details.\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (HousingSFTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tHousingSFTBalance[] memory balance = new HousingSFTBalance[](\\n\\t\\t\\t_sftBals.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = HousingSFTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (HousingAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/// @notice Retrieves the token details including name, symbol, and max supply.\\n\\t/// @return A tuple containing the token's name, symbol, and max supply.\\n\\tfunction tokenDetails()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (string memory, string memory, uint256)\\n\\t{\\n\\t\\treturn (name(), symbol(), getMaxSupply());\\n\\t}\\n}\\n\",\"keccak256\":\"0x4bfb6bc254987d9243abf83f748a16abfb3b1c6daa6b595cdbfda7bb8f1239a0\",\"license\":\"MIT\"},\"contracts/housing-project/NewHousingProjectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport { HousingProject } from \\\"./HousingProject.sol\\\";\\n\\n/// @title NewHousingProject Library\\n/// @notice This library provides a function to deploy new HousingProject contracts.\\n/// @dev This is a lightweight library intended for contract creation and can be expanded with additional functionality.\\nlibrary NewHousingProject {\\n\\t/// @notice Deploys a new instance of the HousingProject contract.\\n\\t/// @param name The name of the HousingProject token.\\n\\t/// @param symbol The symbol of the HousingProject token.\\n\\t/// @param coinbase Coinbase contraact address\\n\\t/// @param smartHousingAddr The address of the SmartHousing contract that will own the new HousingProject.\\n\\t/// @return The address of the newly created HousingProject contract.\\n\\tfunction deployHousingProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddr,\\n\\t\\taddress coinbase\\n\\t) external returns (HousingProject) {\\n\\t\\treturn new HousingProject(name, symbol, smartHousingAddr, coinbase);\\n\\t}\\n}\\n\",\"keccak256\":\"0x6773e84e7f7ce797c7da8eb504d304d4aba554cb6849af61fc6e96208e23ca1d\",\"license\":\"MIT\"},\"contracts/housing-project/RentsModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"./HousingSFT.sol\\\";\\nimport \\\"./RewardSharing.sol\\\";\\nimport \\\"../lib/TokenPayments.sol\\\";\\n\\n/// @title Rents Module\\n/// @notice Manages rent payments, reward calculations, and distribution for housing projects.\\n/// @dev This abstract contract should be inherited by the HousingProject contract.\\nabstract contract RentsModule {\\n\\t/// @dev Computes the reward shares for a given token based on its attributes.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return rewardShares The computed RewardShares.\\n\\tfunction _computeRewardShares(\\n\\t\\tHousingAttributes memory attr,\\n\\t\\tuint256 currentRPS\\n\\t) internal pure returns (rewardshares memory) {\\n\\t\\tif (currentRPS == 0 || attr.rewardsPerShare >= currentRPS) {\\n\\t\\t\\treturn rewardshares({ userValue: 0, referrerValue: 0 });\\n\\t\\t}\\n\\n\\t\\tuint256 reward = _computeReward(attr, currentRPS);\\n\\t\\treturn _splitReward(reward);\\n\\t}\\n\\n\\t/// @dev Calculates the reward for a given token based on its attributes and current reward per share.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @param currentRPS The current reward per share.\\n\\t/// @return The computed reward.\\n\\tfunction _computeReward(\\n\\t\\tHousingAttributes memory attr,\\n\\t\\tuint256 currentRPS\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t((currentRPS - attr.rewardsPerShare) * attr.tokenWeight) /\\n\\t\\t\\tDIVISION_SAFETY_CONST;\\n\\t}\\n\\n\\t/// @dev Splits the computed reward into user and referrer shares.\\n\\t/// @param reward The total computed reward.\\n\\t/// @return rewardShares The split reward shares.\\n\\tfunction _splitReward(\\n\\t\\tuint256 reward\\n\\t) internal pure returns (rewardshares memory) {\\n\\t\\tuint256 referrerShare = (reward * 30) / 100_00;\\n\\t\\tuint256 userShare = reward - referrerShare;\\n\\n\\t\\treturn\\n\\t\\t\\trewardshares({\\n\\t\\t\\t\\tuserValue: userShare,\\n\\t\\t\\t\\treferrerValue: referrerShare\\n\\t\\t\\t});\\n\\t}\\n}\\n\",\"keccak256\":\"0x7d38e7779fe71af36714c045704d971f1b76975c33fa546a19ce3460e5196b0d\",\"license\":\"MIT\"},\"contracts/housing-project/RewardSharing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"./HousingSFT.sol\\\";\\n\\n// Constants\\nuint256 constant DIVISION_SAFETY_CONST = 1_000_000_000_000_000_000;\\n\\n// Structs\\nstruct rewardshares {\\n\\tuint256 userValue;\\n\\tuint256 referrerValue;\\n}\\n\\n// Library for managing reward shares\\nlibrary RewardShares {\\n\\t/// @notice Calculates the total reward value (user + referrer).\\n\\t/// @param self The rewardshares struct containing user and referrer values.\\n\\t/// @return The total reward value.\\n\\tfunction total(rewardshares memory self) internal pure returns (uint256) {\\n\\t\\treturn self.userValue + self.referrerValue;\\n\\t}\\n}\\n\\n// Utility functions\\n\\n/// @notice Splits a reward amount into user and referrer shares.\\n/// @param reward The total reward amount to be split.\\n/// @return The rewardshares struct with user and referrer values.\\nfunction splitReward(uint256 reward) pure returns (rewardshares memory) {\\n\\tuint256 referrerValue = (reward * 666) / 10000; // Approximately 6.66% of the total reward\\n\\tuint256 userValue = reward - referrerValue;\\n\\n\\treturn rewardshares(userValue, referrerValue);\\n}\\n\\n/// @notice Computes the reward for a given token based on its attributes and the current reward per share.\\n/// @param attr The attributes of the token.\\n/// @param contractRPS The current reward per share.\\n/// @return The computed reward amount.\\nfunction computeReward(\\n\\tHousingAttributes memory attr,\\n\\tuint256 contractRPS\\n) pure returns (uint256) {\\n\\t// Return 0 if the current reward per share is less than or equal to the token's recorded reward per share\\n\\tif (contractRPS <= attr.rewardsPerShare) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\treturn\\n\\t\\t((contractRPS - attr.rewardsPerShare) * attr.tokenWeight) /\\n\\t\\tDIVISION_SAFETY_CONST;\\n}\\n\",\"keccak256\":\"0x36b630089dcd987e1b72683c2f9e7d972fc214a72cf84848da64867940ccd049\",\"license\":\"MIT\"},\"contracts/lib/LkSHTAttributes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title LkSHTAttributes\\n/// @dev Library for handling attributes and unlocking of the Locked SmartHousing Token (LkSHT).\\nlibrary LkSHTAttributes {\\n\\tusing SafeMath for uint256;\\n\\n\\t// Constants\\n\\t// Duration for which tokens are locked (e.g., 3 years in production, 3 weeks for testing)\\n\\tuint256 constant LOCK_DURATION = 3 weeks;\\n\\n\\t// Struct to represent attributes of Locked SmartHousing Tokens\\n\\tstruct Attributes {\\n\\t\\tuint256 initialAmount; // Initial amount of tokens locked\\n\\t\\tuint256 amount; // Remaining amount of tokens locked\\n\\t\\tuint256 startTimestamp; // Timestamp when the lock started\\n\\t\\tuint256 endTimestamp; // Timestamp when the lock ends\\n\\t}\\n\\n\\t// Initialization Functions\\n\\n\\t/// @dev Creates new attributes for a Locked SmartHousing Token.\\n\\t/// @param startTimestamp The start time of the lock.\\n\\t/// @param amount The amount of SmartHousing Tokens locked.\\n\\t/// @return attributes The initialized attributes.\\n\\tfunction newAttributes(\\n\\t\\tuint256 startTimestamp,\\n\\t\\tuint256 amount\\n\\t) internal pure returns (Attributes memory) {\\n\\t\\treturn\\n\\t\\t\\tAttributes({\\n\\t\\t\\t\\tinitialAmount: amount,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tstartTimestamp: startTimestamp,\\n\\t\\t\\t\\tendTimestamp: startTimestamp.add(LOCK_DURATION)\\n\\t\\t\\t});\\n\\t}\\n\\n\\t// View Functions\\n\\n\\t/// @dev Calculates and deducts the unlocked amount based on the elapsed time.\\n\\t/// @param self The attributes to update.\\n\\t/// @return unlockedAmount The amount of tokens unlocked.\\n\\t/// @return newSelf The updated attributes with the deducted amount.\\n\\tfunction unlockMatured(\\n\\t\\tAttributes memory self\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 unlockedAmount, Attributes memory newSelf)\\n\\t{\\n\\t\\tuint256 elapsed = elapsedTime(self);\\n\\t\\tunlockedAmount = self.amount.mul(elapsed).div(LOCK_DURATION);\\n\\n\\t\\tself.amount = self.amount.sub(unlockedAmount);\\n\\t\\tnewSelf = self;\\n\\t}\\n\\n\\t/// @dev Calculates the elapsed time since the lock started.\\n\\t/// @param self The attributes to use.\\n\\t/// @return elapsedTime The elapsed time in seconds.\\n\\tfunction elapsedTime(\\n\\t\\tAttributes memory self\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 currentTime = block.timestamp;\\n\\t\\tif (currentTime >= self.endTimestamp) {\\n\\t\\t\\treturn LOCK_DURATION;\\n\\t\\t} else {\\n\\t\\t\\treturn currentTime.sub(self.startTimestamp);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x7091e3e3b18360fa51a7a07492d0f71d6c3b60d895e28302de807c0b84de4d7d\",\"license\":\"MIT\"},\"contracts/lib/ProjectStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenPayments.sol\\\";\\nimport { HousingSFT } from \\\"../housing-project/HousingSFT.sol\\\";\\n\\n/// @title ProjectStorage\\n/// @dev Library for managing project data, funding, and deposit retrieval.\\nlibrary ProjectStorage {\\n\\tusing SafeMath for uint256;\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing ProjectStorage for Data;\\n\\n\\t// Enum representing the status of a project\\n\\tenum Status {\\n\\t\\tFundingPeriod, // Project is currently in the funding period\\n\\t\\tSuccessful, // Project has met its funding goal\\n\\t\\tFailed // Project has failed to meet its funding goal\\n\\t}\\n\\n\\t// Struct to hold project data\\n\\tstruct Data {\\n\\t\\tuint256 id; // Unique identifier for the project\\n\\t\\taddress tokenAddress; // Address of the token associated with the project\\n\\t\\taddress projectAddress; // Address of the deployed HousingProject contract\\n\\t\\tuint256 fundingGoal; // Target funding amount for the project\\n\\t\\tuint256 fundingDeadline; // Deadline timestamp for the project funding\\n\\t\\taddress fundingToken; // Address of the ERC20 token used for funding\\n\\t\\tuint256 collectedFunds; // Amount of funds collected for the project\\n\\t\\tuint256 minDeposit; // Least amount of funding to receive\\n\\t}\\n\\n\\t// View Functions\\n\\n\\t/// @dev Returns the current status of the project based on collected funds and deadline.\\n\\t/// @param self The memory struct containing project data.\\n\\t/// @return The status of the project.\\n\\tfunction status(Data memory self) internal view returns (Status) {\\n\\t\\tif (self.collectedFunds >= self.fundingGoal) {\\n\\t\\t\\treturn Status.Successful;\\n\\t\\t} else if (block.timestamp < self.fundingDeadline) {\\n\\t\\t\\treturn Status.FundingPeriod;\\n\\t\\t} else {\\n\\t\\t\\treturn Status.Failed;\\n\\t\\t}\\n\\t}\\n\\n\\t// Initialization Functions\\n\\n\\t/// @dev Creates and initializes a new project.\\n\\t/// @param projects The mapping of project IDs to project data.\\n\\t/// @param projectsId The mapping of project addresses to project IDs.\\n\\t/// @param projectCount The current number of projects.\\n\\t/// @param fundingGoal The target funding amount.\\n\\t/// @param fundingDeadline The deadline for funding.\\n\\t/// @param fundingToken The address of the ERC20 token used for funding.\\n\\t/// @param projectAddress The address of the HousingProject contract.\\n\\t/// @param tokenAddress The address of the token associated with the project.\\n\\t/// @return newProjectData The newly created project data.\\n\\tfunction createNew(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage projectsId,\\n\\t\\tuint256 projectCount,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline,\\n\\t\\taddress fundingToken,\\n\\t\\taddress projectAddress,\\n\\t\\taddress tokenAddress\\n\\t) internal returns (Data memory) {\\n\\t\\trequire(fundingGoal > 0, \\\"Funding goal must be more than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tfundingDeadline > block.timestamp,\\n\\t\\t\\t\\\"Deadline can't be in the past\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 newId = projectCount.add(1);\\n\\n\\t\\tuint256 tokenMaxSupply = HousingSFT(tokenAddress).getMaxSupply();\\n\\n\\t\\tData memory newProjectData = Data({\\n\\t\\t\\tid: newId,\\n\\t\\t\\tprojectAddress: projectAddress,\\n\\t\\t\\tfundingGoal: fundingGoal,\\n\\t\\t\\tfundingDeadline: fundingDeadline,\\n\\t\\t\\tfundingToken: fundingToken,\\n\\t\\t\\tcollectedFunds: 0,\\n\\t\\t\\ttokenAddress: tokenAddress,\\n\\t\\t\\tminDeposit: fundingGoal / tokenMaxSupply\\n\\t\\t});\\n\\n\\t\\tprojects[newId] = newProjectData;\\n\\t\\tprojectsId[newProjectData.projectAddress] = newProjectData.id;\\n\\n\\t\\treturn newProjectData;\\n\\t}\\n\\n\\t// Funding Functions\\n\\n\\t/// @dev Funds a project with tokens.\\n\\t/// @param projects The mapping of project IDs to project data.\\n\\t/// @param usersDeposit The mapping of depositor addresses to their deposit amounts.\\n\\t/// @param projectId The ID of the project to fund.\\n\\t/// @param depositor The address of the person funding the project.\\n\\t/// @param payment The details of the token payment.\\n\\tfunction fund(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage usersDeposit,\\n\\t\\tuint256 projectId,\\n\\t\\taddress depositor,\\n\\t\\tTokenPayment calldata payment\\n\\t) internal returns (uint256) {\\n\\t\\tData storage project = projects[projectId];\\n\\n\\t\\trequire(\\n\\t\\t\\tpayment.amount >= project.minDeposit &&\\n\\t\\t\\t\\tpayment.amount <= project.fundingGoal,\\n\\t\\t\\t\\\"Invalid funding amount\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tproject.status() == Status.FundingPeriod,\\n\\t\\t\\t\\\"Cannot fund project after deadline\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\taddress(payment.token) == project.fundingToken,\\n\\t\\t\\t\\\"Wrong token payment\\\"\\n\\t\\t);\\n\\n\\t\\tpayment.receiveToken();\\n\\n\\t\\tproject.collectedFunds = project.collectedFunds.add(payment.amount);\\n\\t\\tusersDeposit[depositor] = usersDeposit[depositor].add(payment.amount);\\n\\n\\t\\treturn project.collectedFunds;\\n\\t}\\n\\n\\t// Deposit Functions\\n\\n\\t/// @dev Retrieves and updates the user's deposit for a specific project.\\n\\t/// @param projects The mapping of project IDs to project data.\\n\\t/// @param usersDeposit The mapping of depositor addresses to their deposit amounts.\\n\\t/// @param projectId The ID of the project to retrieve the deposit for.\\n\\t/// @param depositor The address of the depositor.\\n\\t/// @return project The project data.\\n\\t/// @return depositAmount The amount of deposit for the user.\\n\\tfunction takeDeposit(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage usersDeposit,\\n\\t\\tuint256 projectId,\\n\\t\\taddress depositor\\n\\t) internal returns (Data memory project, uint256 depositAmount) {\\n\\t\\tproject = projects[projectId];\\n\\t\\trequire(project.id != 0, \\\"Invalid project ID\\\");\\n\\t\\trequire(\\n\\t\\t\\tproject.status() == Status.Successful,\\n\\t\\t\\t\\\"Project not yet successful\\\"\\n\\t\\t);\\n\\n\\t\\tdepositAmount = usersDeposit[depositor];\\n\\t\\trequire(depositAmount > 0, \\\"No deposit found\\\");\\n\\n\\t\\t// Update the deposit amount to zero\\n\\t\\tusersDeposit[depositor] = 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x78cc757d4cc7a34b6f7627244c3005ad592564cfa70e170a440e521717d4fe5a\",\"license\":\"MIT\"},\"contracts/lib/TokenPayments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SFT } from \\\"../modules/SFT.sol\\\";\\n\\n// @title ERC20TokenPayment\\n// @dev Struct to define a payment with ERC20 tokens\\nstruct ERC20TokenPayment {\\n\\tIERC20 token; // The ERC20 token contract address\\n\\tuint256 amount; // The amount of tokens to be transferred\\n}\\n\\n// @title TokenPayment\\n// @dev Struct to define a payment with different token types including Native tokens\\nstruct TokenPayment {\\n\\taddress token; // Address of the token contract (0 address for Native tokens)\\n\\tuint256 amount; // The amount of tokens to be transferred\\n\\tuint256 nonce; // Nonce for SFTs (0 for ERC20)\\n}\\n\\n/**\\n * @title TokenPayments Library\\n * @dev This library provides functions for handling payments in various token types, including ERC20 tokens,\\n *      SFT (Semi-Fungible Tokens), and Native tokens (ETH). It includes methods for receiving and transferring\\n *      tokens from different sources. The library is designed to handle payments securely and ensure that\\n *      the correct amount of tokens is transferred to the contract.\\n *\\n * The library handles:\\n * - ERC20 token payments\\n * - SFT (Semi-Fungible Token) payments\\n * - Native (ETH) payments\\n *\\n * Note: ERC20 tokens and SFTs must be approved for transfer before calling these functions.\\n */\\nlibrary TokenPayments {\\n\\t/**\\n\\t * @notice Accepts an ERC20TokenPayment and transfers the tokens from the sender\\n\\t * @param self The ERC20TokenPayment struct containing token and amount to transfer\\n\\t * @dev Calls `receiveERC20` with the sender as the source of funds\\n\\t */\\n\\tfunction accept(ERC20TokenPayment calldata self) internal {\\n\\t\\tTokenPayments.receiveERC20(self, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives ERC20 tokens from the sender and transfers them to the contract\\n\\t * @param payment The ERC20TokenPayment struct containing token and amount to transfer\\n\\t * @dev Transfers ERC20 tokens from the sender to the contract address\\n\\t */\\n\\tfunction receiveERC20(ERC20TokenPayment calldata payment) internal {\\n\\t\\tTokenPayments.receiveERC20(payment, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives ERC20 tokens from a specified address\\n\\t * @param payment The ERC20TokenPayment struct containing token and amount to transfer\\n\\t * @param from The address from which tokens will be transferred\\n\\t * @dev Transfers ERC20 tokens from the given address to the contract address\\n\\t */\\n\\tfunction receiveERC20(\\n\\t\\tERC20TokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\tpayment.token.transferFrom(from, address(this), payment.amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives payments of Native tokens, ERC20 tokens, or SFTs\\n\\t * @param payment The TokenPayment struct containing token address, amount, and nonce\\n\\t * @dev Handles Native tokens (ETH), ERC20 tokens, and SFT tokens based on the token address and nonce\\n\\t *      - For Native tokens, ensures the sent amount matches the expected amount\\n\\t *      - For ERC20 tokens, transfers tokens from the specified address\\n\\t *      - For SFT tokens, transfers tokens using the SFT contract\\n\\t */\\n\\tfunction receiveToken(TokenPayment memory payment) internal {\\n\\t\\treceiveToken(payment, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives payments of Native tokens, ERC20 tokens, or SFTs from a specified address\\n\\t * @param payment The TokenPayment struct containing token address, amount, and nonce\\n\\t * @param from The address from which tokens will be transferred\\n\\t * @dev Handles Native tokens (ETH), ERC20 tokens, and SFT tokens based on the token address and nonce\\n\\t *      - For Native tokens, ensures the sent amount matches the expected amount and sender is correct\\n\\t *      - For ERC20 tokens, transfers tokens from the given address\\n\\t *      - For SFT tokens, transfers tokens using the SFT contract\\n\\t */\\n\\tfunction receiveToken(TokenPayment memory payment, address from) internal {\\n\\t\\tif (payment.token == address(0)) {\\n\\t\\t\\t// Handling Native token payment (ETH)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpayment.amount == msg.value,\\n\\t\\t\\t\\t\\\"Expected payment amount must equal the sent amount\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfrom == msg.sender,\\n\\t\\t\\t\\t\\\"Can receive native payment only from caller\\\"\\n\\t\\t\\t);\\n\\t\\t\\t// No additional actions are required as the Ethereum Virtual Machine handles balance movements\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\t// Handling ERC20 token payment\\n\\t\\t\\tIERC20(payment.token).transferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.amount\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// Handling SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x667e200a73a109b3d650ea42edbfe61e1afe872f3c34ca4a4159769618527d7d\",\"license\":\"MIT\"},\"contracts/main/Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"../lib/TokenPayments.sol\\\";\\n\\n/// @title SmartHousing Interface\\n/// @notice Interface for interacting with the SmartHousing contract.\\ninterface ISmartHousing {\\n\\t/// @notice Adds rent payment to the project.\\n\\t/// @param amount The amount of rent to add.\\n\\tfunction addProjectRent(uint256 amount) external;\\n\\n\\t/// @notice Creates a referral ID via a proxy.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The newly created referral ID.\\n\\tfunction createRefIDViaProxy(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) external returns (uint256);\\n\\n\\t/// @notice Adds a new project to the SmartHousing system.\\n\\t/// @param projectAddress The address of the new project.\\n\\tfunction addProject(address projectAddress) external;\\n\\n\\t/// @notice Sets up the SmartHousingToken (SHT) using the provided payment details.\\n\\t/// @param payment The payment details for setting up SHT.\\n\\tfunction setUpSHT(ERC20TokenPayment calldata payment) external;\\n}\\n\\n/// @title User Module Interface\\n/// @notice Interface for interacting with the user module to retrieve referrer information.\\ninterface IUserModule {\\n\\t/// @notice Retrieves the referrer information for a given user.\\n\\t/// @param user The address of the user.\\n\\t/// @return A tuple containing the referrer ID and the referrer address.\\n\\tfunction getReferrer(address user) external view returns (uint256, address);\\n}\\n\",\"keccak256\":\"0xb7263cd1533cfc04e6ca66c894cd411e6e766c4ec1fda2fafe9fe01a6d6d60e0\",\"license\":\"MIT\"},\"contracts/modules/LockedSmartHousingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../lib/LkSHTAttributes.sol\\\";\\nimport \\\"../lib/TokenPayments.sol\\\";\\nimport \\\"../modules/SFT.sol\\\";\\n\\nlibrary NewLkSHT {\\n\\tfunction create() external returns (LkSHT) {\\n\\t\\treturn new LkSHT(\\\"Locked Housing Token\\\", \\\"LkSHT\\\");\\n\\t}\\n}\\n\\n/// @title LockedSmartHousingToken\\n/// @dev SFT token that locks SmartHousing Tokens (SHT) during ICO.\\n/// Allows transfers only to whitelisted addresses.\\ncontract LkSHT is SFT {\\n\\tusing SafeMath for uint256;\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\n\\tstruct LkSHTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tLkSHTAttributes.Attributes attributes;\\n\\t}\\n\\n\\t/// @dev Record the block timestamp when the contract is deployed\\n\\tuint256 immutable startTimestamp = block.timestamp;\\n\\n\\t/// @dev Constructor to initialize the token with name and symbol\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\t/// @dev Event emitted when tokens are minted\\n\\tevent TokensMinted(address indexed to, uint256 amount);\\n\\n\\t/// @dev Returns the balance of the user along with attributes\\n\\t/// @param user The address of the user.\\n\\t/// @return Array of LkSHTBalance containing nonce, amount, and attributes\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (LkSHTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tLkSHTBalance[] memory balance = new LkSHTBalance[](_sftBals.length);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = LkSHTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(\\n\\t\\t\\t\\t\\t_sftBal.attributes,\\n\\t\\t\\t\\t\\t(LkSHTAttributes.Attributes)\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/// @dev Mints new Locked SmartHousing Tokens (LkSHT) by locking SHT.\\n\\t/// @param amount The amount of SHT to lock.\\n\\t/// @param to The address to mint the tokens to.\\n\\tfunction mint(uint256 amount, address to) external onlyOwner {\\n\\t\\trequire(amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tLkSHTAttributes.newAttributes(startTimestamp, amount)\\n\\t\\t);\\n\\n\\t\\tsuper._mint(to, amount, attributes);\\n\\n\\t\\temit TokensMinted(to, amount);\\n\\t}\\n\\n\\tfunction getAttribute(\\n\\t\\tuint256 nonce\\n\\t) external view returns (LkSHTAttributes.Attributes memory) {\\n\\t\\treturn\\n\\t\\t\\tabi.decode(\\n\\t\\t\\t\\t_getRawTokenAttributes(nonce),\\n\\t\\t\\t\\t(LkSHTAttributes.Attributes)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x6752c224955877e1cc9d95fb5c639f58454d0b88eafb0374ff02de8608c93ef0\",\"license\":\"MIT\"},\"contracts/modules/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SFT Contract\\n * @dev Semi-Fungible Token (SFT) contract that extends ERC1155. This contract allows minting, updating, and\\n *      managing tokens with attributes. It also tracks token ownership and provides methods for querying\\n *      token information and balances.\\n *\\n * The contract uses:\\n * - `Counters` for incrementing and managing nonces.\\n * - `EnumerableSet` for tracking nonces owned by addresses.\\n */\\ncontract SFT is ERC1155, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\t/**\\n\\t * @dev Struct representing the balance of an SFT with its attributes.\\n\\t * @param nonce The unique identifier for the token.\\n\\t * @param amount The amount of tokens held.\\n\\t * @param attributes The token's attributes as a bytes array.\\n\\t */\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\tCounters.Counter private _nonceCounter;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t// Mapping from nonce to token attributes as bytes\\n\\tmapping(uint256 => bytes) private _tokenAttributes;\\n\\n\\t// Mapping from address to list of owned token nonces\\n\\tmapping(address => EnumerableSet.UintSet) private _addressToNonces;\\n\\n\\t/**\\n\\t * @dev Constructor to initialize the SFT contract with a name and symbol.\\n\\t * @param name_ The name of the token.\\n\\t * @param symbol_ The symbol of the token.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) ERC1155(\\\"\\\") {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Internal function to mint new tokens with attributes and store the nonce.\\n\\t * @param to The address to receive the minted tokens.\\n\\t * @param amount The amount of tokens to mint.\\n\\t * @param attributes The attributes of the minted tokens.\\n\\t * @return nonce The unique identifier (nonce) of the newly minted tokens.\\n\\t */\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes\\n\\t) internal returns (uint256 nonce) {\\n\\t\\t_nonceCounter.increment();\\n\\t\\tnonce = _nonceCounter.current();\\n\\n\\t\\t// Store the attributes\\n\\t\\t_tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, \\\"\\\");\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t_addressToNonces[to].add(nonce);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the name of the token.\\n\\t * @return The name of the token.\\n\\t */\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the symbol of the token.\\n\\t * @return The symbol of the token.\\n\\t */\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the token name and symbol.\\n\\t * @return name The name of the token.\\n\\t * @return symbol The symbol of the token.\\n\\t */\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (_name, _symbol);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns raw token attributes by nonce.\\n\\t * @param nonce The nonce of the token.\\n\\t * @return Attributes in bytes.\\n\\t */\\n\\tfunction _getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) internal view returns (bytes memory) {\\n\\t\\treturn _tokenAttributes[nonce];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the list of nonces owned by an address.\\n\\t * @param owner The address of the token owner.\\n\\t * @return Array of nonces.\\n\\t */\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _addressToNonces[owner].values();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if the address owns a specific nonce.\\n\\t * @param owner The address of the token owner.\\n\\t * @param nonce The nonce to check.\\n\\t * @return True if the address owns the nonce, otherwise false.\\n\\t */\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Burns the tokens of a specific nonce and mints new tokens with updated attributes.\\n\\t * @param user The address of the token holder.\\n\\t * @param nonce The nonce of the token to update.\\n\\t * @param amount The amount of tokens to mint.\\n\\t * @param attr The new attributes to assign.\\n\\t * @return The new nonce for the minted tokens.\\n\\t */\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) external onlyOwner returns (uint256) {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\treturn amount > 0 ? _mint(user, amount, attr) : 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the balance of the user with their token attributes.\\n\\t * @param user The address of the user.\\n\\t * @return Array of SftBalance containing nonce, amount, and attributes.\\n\\t */\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _tokenAttributes[nonce];\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Override _beforeTokenTransfer to handle address-to-nonce mapping.\\n\\t * @param operator The address performing the transfer.\\n\\t * @param from The address sending tokens.\\n\\t * @param to The address receiving tokens.\\n\\t * @param ids The token IDs being transferred.\\n\\t * @param amounts The amounts of tokens being transferred.\\n\\t * @param data Additional data.\\n\\t * @dev Updates the nonce mappings for the from and to addresses before token transfer.\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\n\\t\\t\\t_addressToNonces[from].remove(id);\\n\\t\\t\\t_addressToNonces[to].add(id);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x5c44589467f6fad831c7c6b3ab2d44a8525eb4101bae9d71f9bea68e0e5ec687\",\"license\":\"MIT\"},\"contracts/modules/sht-module/SHT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/// @title SHT Library\\n/// @notice Contains constants related to the Smart Housing Token (SHT)\\nlibrary SHT {\\n\\t/// @dev Number of decimal places for the token\\n\\tuint256 public constant DECIMALS = 18;\\n\\n\\t/// @dev 1 unit of token in its smallest unit, considering DECIMALS\\n\\tuint256 public constant ONE = 10 ** DECIMALS;\\n\\n\\t/// @dev Maximum supply of the SHT token\\n\\tuint256 public constant MAX_SUPPLY = 21_000_000 * ONE;\\n\\n\\t/// @dev Funds allocated for ecosystem distribution\\n\\tuint256 public constant ECOSYSTEM_DISTRIBUTION_FUNDS =\\n\\t\\t(13_650_000 * ONE) + 2_248_573_618_499_339;\\n\\n\\t/// @dev Funds allocated for ICO (Initial Coin Offering)\\n\\tuint256 public constant ICO_FUNDS =\\n\\t\\tMAX_SUPPLY - ECOSYSTEM_DISTRIBUTION_FUNDS;\\n}\\n\",\"keccak256\":\"0xd470b5ab0ad759997b456a75628f1739c910c02061dd4a0546a1c5b0e0364c4d\",\"license\":\"MIT\"},\"contracts/modules/sht-module/SHTModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"../../lib/TokenPayments.sol\\\";\\nimport \\\"./SHT.sol\\\";\\n\\n/// @title SHTModule\\n/// @dev This contract manages the Smart Housing Token (SHT) within the platform.\\n/// It includes functionalities for making payments in SHT and querying the SHT token ID.\\nabstract contract SHTModule is ERC20, ERC20Burnable {\\n\\tfunction decimals() public pure override returns (uint8) {\\n\\t\\treturn uint8(SHT.DECIMALS);\\n\\t}\\n\\n\\t/// @dev Makes an ERC20TokenPayment struct in SHT for and amount.\\n\\t/// @param shtAmount Amount of SHT to be sent.\\n\\t/// @return payment ERC20TokenPayment struct representing the payment.\\n\\tfunction _makeSHTPayment(\\n\\t\\tuint256 shtAmount\\n\\t) internal view returns (ERC20TokenPayment memory) {\\n\\t\\treturn ERC20TokenPayment(IERC20(address(this)), shtAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0xaaa02088650add93123efec73d6740eb5dd2197b4c8252caa6ba436fe53cb9b5\",\"license\":\"MIT\"},\"contracts/project-funding/ProjectFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../lib/ProjectStorage.sol\\\";\\nimport \\\"../lib/LkSHTAttributes.sol\\\";\\n\\nimport \\\"../main/Interface.sol\\\";\\n\\nimport \\\"../modules/LockedSmartHousingToken.sol\\\";\\nimport \\\"../modules/sht-module/SHT.sol\\\";\\n\\nimport { HousingSFT } from \\\"../housing-project/HousingSFT.sol\\\";\\nimport { TokenPayment } from \\\"../lib/TokenPayments.sol\\\";\\nimport { NewHousingProject, HousingProject } from \\\"../housing-project/NewHousingProjectLib.sol\\\";\\n\\n/// @title ProjectFunding\\n/// @dev Manages and deploys housing projects, handles funding, and distributes tokens.\\ncontract ProjectFunding is Ownable {\\n\\tusing SafeMath for uint256;\\n\\tusing ProjectStorage for mapping(uint256 => ProjectStorage.Data);\\n\\tusing ProjectStorage for ProjectStorage.Data;\\n\\tusing LkSHTAttributes for LkSHTAttributes.Attributes;\\n\\n\\t// State variables\\n\\taddress public coinbase; // Address authorized to initialize the first project\\n\\taddress public smartHousingAddress; // Address of the SmartHousing contract\\n\\tmapping(uint256 => ProjectStorage.Data) public projects; // Mapping of project ID to ProjectData\\n\\tmapping(address => uint256) public projectsId; // Mapping of project address to project ID\\n\\tuint256 public projectCount; // Counter for the total number of projects\\n\\tmapping(uint256 => mapping(address => uint256)) public usersProjectDeposit; // User deposits per project\\n\\tIERC20 public housingToken; // Token used for funding projects\\n\\tLkSHT public lkSht; // Instance of the locked SmartHousing Token (LkSHT)\\n\\n\\t// Events\\n\\tevent ProjectDeployed(address indexed projectAddress);\\n\\tevent ProjectFunded(\\n\\t\\tuint256 indexed projectId,\\n\\t\\taddress indexed depositor,\\n\\t\\tTokenPayment payment\\n\\t);\\n\\tevent ProjectTokensClaimed(\\n\\t\\taddress indexed depositor,\\n\\t\\tuint256 projectId,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t/// @param _coinbase Address authorized to initialize the first project\\n\\tconstructor(address _coinbase) {\\n\\t\\tcoinbase = _coinbase;\\n\\t\\tlkSht = NewLkSHT.create();\\n\\t}\\n\\n\\t/// @dev Internal function to deploy a new HousingProject contract\\n\\t/// @param name Name of the project\\n\\t/// @param symbol Symbol of the project\\n\\t/// @param fundingToken Address of the ERC20 token used for funding\\n\\t/// @param fundingGoal The funding goal for the new project\\n\\t/// @param fundingDeadline The deadline for the project funding\\n\\tfunction _deployProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) internal returns (address) {\\n\\t\\tHousingProject newProject = NewHousingProject.deployHousingProject(\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tsmartHousingAddress,\\n\\t\\t\\tcoinbase\\n\\t\\t);\\n\\t\\tProjectStorage.Data memory projectData = projects.createNew(\\n\\t\\t\\tprojectsId,\\n\\t\\t\\tprojectCount,\\n\\t\\t\\tfundingGoal,\\n\\t\\t\\tfundingDeadline,\\n\\t\\t\\tfundingToken,\\n\\t\\t\\taddress(newProject),\\n\\t\\t\\taddress(newProject.projectSFT())\\n\\t\\t);\\n\\t\\tprojectCount = projectData.id;\\n\\n\\t\\temit ProjectDeployed(projectData.projectAddress);\\n\\n\\t\\treturn projectData.projectAddress;\\n\\t}\\n\\n\\t/// @dev Initializes the first project\\n\\t/// This function must be called by the coinbase address and can only be called once\\n\\t/// @param shtPayment Payment details for the Smart Housing Token (SHT)\\n\\t/// @param name Name of the first project\\n\\t/// @param symbol Symbol of the first project\\n\\t/// @param smartHousingAddress_ Address of the Smart Housing contract\\n\\t/// @param fundingToken Address of the ERC20 token used for funding\\n\\t/// @param fundingGoal The funding goal for the new project\\n\\t/// @param fundingDeadline The deadline for the project funding\\n\\tfunction initFirstProject(\\n\\t\\tERC20TokenPayment calldata shtPayment,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddress_,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) external returns (address) {\\n\\t\\trequire(msg.sender == coinbase, \\\"Caller is not the coinbase\\\");\\n\\t\\trequire(projectCount == 0, \\\"Project already initialized\\\");\\n\\n\\t\\tTokenPayments.receiveERC20(shtPayment);\\n\\t\\thousingToken = shtPayment.token;\\n\\n\\t\\tsmartHousingAddress = smartHousingAddress_;\\n\\n\\t\\treturn\\n\\t\\t\\t_deployProject(\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tsymbol,\\n\\t\\t\\t\\tfundingToken,\\n\\t\\t\\t\\tfundingGoal,\\n\\t\\t\\t\\tfundingDeadline\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @dev Deploys a new project\\n\\t/// This function can be called multiple times to deploy additional projects\\n\\t/// @param name Name of the project\\n\\t/// @param symbol Symbol of the project\\n\\t/// @param fundingToken Address of the ERC20 token used for funding\\n\\t/// @param fundingGoal The funding goal for the new project\\n\\t/// @param fundingDeadline The deadline for the project funding\\n\\tfunction deployProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) public onlyOwner returns (address) {\\n\\t\\treturn\\n\\t\\t\\t_deployProject(\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tsymbol,\\n\\t\\t\\t\\tfundingToken,\\n\\t\\t\\t\\tfundingGoal,\\n\\t\\t\\t\\tfundingDeadline\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @dev Allows users to fund a project\\n\\t/// @param depositPayment Payment details for the funding\\n\\t/// @param projectId ID of the project to fund\\n\\t/// @param referrerId ID of the referrer (if applicable)\\n\\tfunction fundProject(\\n\\t\\tTokenPayment calldata depositPayment,\\n\\t\\tuint256 projectId,\\n\\t\\tuint256 referrerId\\n\\t) external payable {\\n\\t\\trequire(\\n\\t\\t\\tprojectId > 0 && projectId <= projectCount,\\n\\t\\t\\t\\\"Invalid project ID\\\"\\n\\t\\t);\\n\\n\\t\\taddress depositor = msg.sender;\\n\\n\\t\\t// Register user with referrer (if needed)\\n\\t\\tISmartHousing(smartHousingAddress).createRefIDViaProxy(\\n\\t\\t\\tdepositor,\\n\\t\\t\\treferrerId\\n\\t\\t);\\n\\n\\t\\t// Update project funding\\n\\t\\tuint256 totalCollected = projects.fund(\\n\\t\\t\\tusersProjectDeposit[projectId],\\n\\t\\t\\tprojectId,\\n\\t\\t\\tdepositor,\\n\\t\\t\\tdepositPayment\\n\\t\\t);\\n\\n\\t\\t// Set the amount raised in the project SFT\\n\\t\\tHousingSFT projectSFT = HousingSFT(\\n\\t\\t\\tgetProjectData(projectId).tokenAddress\\n\\t\\t);\\n\\t\\tprojectSFT.setAmountRaised(totalCollected);\\n\\n\\t\\temit ProjectFunded(projectId, depositor, depositPayment);\\n\\t}\\n\\n\\t/// @dev Sets the project once funding is successful\\n\\t/// @param projectId ID of the project\\n\\tfunction addProjectToEcosystem(uint256 projectId) external onlyOwner {\\n\\t\\tProjectStorage.Data storage project = projects[projectId];\\n\\n\\t\\tISmartHousing(smartHousingAddress).addProject(project.projectAddress);\\n\\t}\\n\\n\\t/// @dev Claims project tokens for a given project ID\\n\\t/// @param projectId ID of the project to claim tokens from\\n\\tfunction claimProjectTokens(uint256 projectId) external {\\n\\t\\taddress depositor = msg.sender;\\n\\n\\t\\t// Retrieve the project and deposit amount\\n\\t\\t(ProjectStorage.Data memory project, uint256 depositAmount) = projects\\n\\t\\t\\t.takeDeposit(usersProjectDeposit[projectId], projectId, depositor);\\n\\n\\t\\tHousingSFT(project.tokenAddress).mintSFT(depositAmount, depositor);\\n\\n\\t\\t// Mint LkSHT tokens if the project ID is 1\\n\\t\\tif (project.id == 1) {\\n\\t\\t\\tuint256 shtAmount = depositAmount.mul(SHT.ICO_FUNDS).div(\\n\\t\\t\\t\\tproject.collectedFunds\\n\\t\\t\\t);\\n\\n\\t\\t\\tlkSht.mint(shtAmount, depositor);\\n\\t\\t}\\n\\n\\t\\temit ProjectTokensClaimed(depositor, projectId, depositAmount);\\n\\t}\\n\\n\\t/// @dev Unlocks SHT tokens by updating the nonce and transferring unlocked tokens to the user\\n\\t/// @param nonce Nonce of the LkSHT token to unlock\\n\\t/// @return newNonce New nonce for the updated LkSHT token\\n\\tfunction unlockSHT(uint256 nonce) external returns (uint256 newNonce) {\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\tuint256 lkShtBal = lkSht.balanceOf(caller, nonce);\\n\\t\\trequire(lkShtBal > 0, \\\"ProjectFunding: Nothing to unlock\\\");\\n\\n\\t\\tLkSHTAttributes.Attributes memory attr = lkSht.getAttribute(nonce);\\n\\t\\t(\\n\\t\\t\\tuint256 totalUnlockedAmount,\\n\\t\\t\\tLkSHTAttributes.Attributes memory newAttr\\n\\t\\t) = attr.unlockMatured();\\n\\n\\t\\tnewNonce = lkSht.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\tnonce,\\n\\t\\t\\tlkShtBal.sub(totalUnlockedAmount),\\n\\t\\t\\tabi.encode(newAttr)\\n\\t\\t);\\n\\n\\t\\t// Transfer the total unlocked SHT tokens to the user's address\\n\\t\\tif (totalUnlockedAmount > 0) {\\n\\t\\t\\thousingToken.transfer(caller, totalUnlockedAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Returns an array of all project IDs and their associated data\\n\\t/// @return projectList An array of tuples containing project details\\n\\tfunction allProjects() public view returns (ProjectStorage.Data[] memory) {\\n\\t\\tProjectStorage.Data[] memory projectList = new ProjectStorage.Data[](\\n\\t\\t\\tprojectCount\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tprojectList[i - 1] = projects[i];\\n\\t\\t}\\n\\n\\t\\treturn projectList;\\n\\t}\\n\\n\\t/// @dev Returns the address of the HousingProject contract for a given project ID\\n\\t/// @param projectId ID of the project\\n\\t/// @return projectAddress Address of the HousingProject contract\\n\\tfunction getProjectAddress(\\n\\t\\tuint256 projectId\\n\\t) public view returns (address projectAddress) {\\n\\t\\trequire(\\n\\t\\t\\tprojectId > 0 && projectId <= projectCount,\\n\\t\\t\\t\\\"Invalid project ID\\\"\\n\\t\\t);\\n\\t\\tprojectAddress = projects[projectId].projectAddress;\\n\\t}\\n\\n\\t/// @dev Returns detailed information about a project by its ID\\n\\t/// @param projectId ID of the project\\n\\t/// @return projectData Project data struct\\n\\tfunction getProjectData(\\n\\t\\tuint256 projectId\\n\\t) public view returns (ProjectStorage.Data memory projectData) {\\n\\t\\trequire(\\n\\t\\t\\tprojectId > 0 && projectId <= projectCount,\\n\\t\\t\\t\\\"Invalid project ID\\\"\\n\\t\\t);\\n\\t\\tprojectData = projects[projectId];\\n\\t}\\n}\\n\",\"keccak256\":\"0x348a8bfd0b44730a20a9d8ddbbc8b2754901b13223a4aba6be01ec16023b9f3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280601181526020017029b6b0b93a2437bab9b4b733aa37b5b2b760791b8152506040518060400160405280600381526020016214d21560ea1b815250620000726200006c620000c360201b60201c565b620000c7565b60046200008083826200028a565b5060056200008f82826200028a565b505050620000bd306012600a620000a791906200046b565b620000b7906301406f4062000480565b62000117565b620004b0565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216620001725760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600360008282546200018691906200049a565b90915550506001600160a01b0382166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200020f57607f821691505b6020821081036200023057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001df576000816000526020600020601f850160051c81016020861015620002615750805b601f850160051c820191505b8181101562000282578281556001016200026d565b505050505050565b81516001600160401b03811115620002a657620002a6620001e4565b620002be81620002b78454620001fa565b8462000236565b602080601f831160018114620002f65760008415620002dd5750858301515b600019600386901b1c1916600185901b17855562000282565b600085815260208120601f198616915b82811015620003275788860151825594840194600190910190840162000306565b5085821015620003465787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620003ad57816000190482111562000391576200039162000356565b808516156200039f57918102915b93841c939080029062000371565b509250929050565b600082620003c65750600162000465565b81620003d55750600062000465565b8160018114620003ee5760028114620003f95762000419565b600191505062000465565b60ff8411156200040d576200040d62000356565b50506001821b62000465565b5060208310610133831016604e8410600b84101617156200043e575081810a62000465565b6200044a83836200036c565b806000190482111562000461576200046162000356565b0290505b92915050565b6000620004798383620003b5565b9392505050565b808202811582820484141762000465576200046562000356565b8082018082111562000465576200046562000356565b61117680620004c06000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063a457c2d711610071578063a457c2d714610240578063a9059cbb14610253578063d1223fc914610266578063dd62ed3e14610279578063f2fde38b1461028c57600080fd5b8063715018a61461020c57806379cc6790146102145780638da5cb5b1461022757806395d89b411461023857600080fd5b8063313ce567116100e9578063313ce56714610181578063395093511461019057806342966c68146101a35780634c736047146101b857806370a08231146101e357600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c57806323b872dd1461016e575b600080fd5b61012361029f565b6040516101309190610cb6565b60405180910390f35b61014c610147366004610ce5565b610331565b6040519015158152602001610130565b6003545b604051908152602001610130565b61014c61017c366004610d11565b61034b565b60405160128152602001610130565b61014c61019e366004610ce5565b61036f565b6101b66101b1366004610d52565b610391565b005b6101cb6101c6366004610e0e565b61039e565b6040516001600160a01b039091168152602001610130565b6101606101f1366004610ebe565b6001600160a01b031660009081526001602052604090205490565b6101b66104bc565b6101b6610222366004610ce5565b6104d0565b6000546001600160a01b03166101cb565b6101236104e9565b61014c61024e366004610ce5565b6104f8565b61014c610261366004610ce5565b610578565b6101b6610274366004610ebe565b610586565b610160610287366004610edb565b6106af565b6101b661029a366004610ebe565b6106da565b6060600480546102ae90610f14565b80601f01602080910402602001604051908101604052809291908181526020018280546102da90610f14565b80156103275780601f106102fc57610100808354040283529160200191610327565b820191906000526020600020905b81548152906001019060200180831161030a57829003601f168201915b5050505050905090565b60003361033f818585610750565b60019150505b92915050565b600033610359858285610875565b6103648585856108ef565b506001949350505050565b60003361033f81858561038283836106af565b61038c9190610f64565b610750565b61039b3382610a9a565b50565b60006103a8610bc6565b60006104236103b96012600a61105b565b6103c69062d04850611067565b6103d7906607fd10d7c82f0b610f64565b6103e36012600a61105b565b6103f1906301406f40611067565b6103fb919061107e565b6040805180820182526000808252602091820152815180830190925230825281019190915290565b905061043430888360200151610750565b604051630fe744bb60e31b81526001600160a01b03881690637f3a25d89061046c9084908d908d908c908c908c908c90600401611091565b6020604051808303816000875af115801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190611103565b9998505050505050505050565b6104c4610bc6565b6104ce6000610c20565b565b6104db823383610875565b6104e58282610a9a565b5050565b6060600580546102ae90610f14565b6000338161050682866106af565b90508381101561056b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103648286868403610750565b60003361033f8185856108ef565b61058e610bc6565b600061059c6012600a61105b565b6105a99062d04850611067565b6105ba906607fd10d7c82f0b610f64565b306000908152600160205260409020549091508111156106115760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e48191a5cdc185d18da195960721b6044820152606401610562565b600061063f826040805180820182526000808252602091820152815180830190925230825281019190915290565b905061064c308484610750565b604051632fd2b55f60e01b81526001600160a01b03841690632fd2b55f90610678908490600401611120565b600060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b50505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6106e2610bc6565b6001600160a01b0381166107475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610562565b61039b81610c20565b6001600160a01b0383166107b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610562565b6001600160a01b0382166108135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610562565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061088184846106af565b905060001981146108e957818110156108dc5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610562565b6108e98484848403610750565b50505050565b6001600160a01b0383166109535760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610562565b6001600160a01b0382166109b55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610562565b6001600160a01b03831660009081526001602052604090205481811015610a2d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610562565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a8d9086815260200190565b60405180910390a36108e9565b6001600160a01b038216610afa5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610562565b6001600160a01b03821660009081526001602052604090205481811015610b6e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610562565b6001600160a01b03831660008181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610868565b6000546001600160a01b031633146104ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610562565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000815180845260005b81811015610c9657602081850181015186830182015201610c7a565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610cc96020830184610c70565b9392505050565b6001600160a01b038116811461039b57600080fd5b60008060408385031215610cf857600080fd5b8235610d0381610cd0565b946020939093013593505050565b600080600060608486031215610d2657600080fd5b8335610d3181610cd0565b92506020840135610d4181610cd0565b929592945050506040919091013590565b600060208284031215610d6457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d9257600080fd5b813567ffffffffffffffff80821115610dad57610dad610d6b565b604051601f8301601f19908116603f01168101908282118183101715610dd557610dd5610d6b565b81604052838152866020858801011115610dee57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a031215610e2957600080fd5b873567ffffffffffffffff80821115610e4157600080fd5b610e4d8b838c01610d81565b985060208a0135915080821115610e6357600080fd5b50610e708a828b01610d81565b9650506040880135610e8181610cd0565b94506060880135610e9181610cd0565b93506080880135610ea181610cd0565b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215610ed057600080fd5b8135610cc981610cd0565b60008060408385031215610eee57600080fd5b8235610ef981610cd0565b91506020830135610f0981610cd0565b809150509250929050565b600181811c90821680610f2857607f821691505b602082108103610f4857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561034557610345610f4e565b600181815b80851115610fb2578160001904821115610f9857610f98610f4e565b80851615610fa557918102915b93841c9390800290610f7c565b509250929050565b600082610fc957506001610345565b81610fd657506000610345565b8160018114610fec5760028114610ff657611012565b6001915050610345565b60ff84111561100757611007610f4e565b50506001821b610345565b5060208310610133831016604e8410600b8410161715611035575081810a610345565b61103f8383610f77565b806000190482111561105357611053610f4e565b029392505050565b6000610cc98383610fba565b808202811582820484141761034557610345610f4e565b8181038181111561034557610345610f4e565b87516001600160a01b031681526020808901519082015260006101008060408401526110bf8184018a610c70565b905082810360608401526110d38189610c70565b6001600160a01b0397881660808501529590961660a08301525060c081019290925260e090910152949350505050565b60006020828403121561111557600080fd5b8151610cc981610cd0565b81516001600160a01b03168152602080830151908201526040810161034556fea2646970667358221220990005781dae7ae930a1012ec67afdc42073440ee1728088180cb86834369bd064736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063715018a6116100a2578063a457c2d711610071578063a457c2d714610240578063a9059cbb14610253578063d1223fc914610266578063dd62ed3e14610279578063f2fde38b1461028c57600080fd5b8063715018a61461020c57806379cc6790146102145780638da5cb5b1461022757806395d89b411461023857600080fd5b8063313ce567116100e9578063313ce56714610181578063395093511461019057806342966c68146101a35780634c736047146101b857806370a08231146101e357600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c57806323b872dd1461016e575b600080fd5b61012361029f565b6040516101309190610cb6565b60405180910390f35b61014c610147366004610ce5565b610331565b6040519015158152602001610130565b6003545b604051908152602001610130565b61014c61017c366004610d11565b61034b565b60405160128152602001610130565b61014c61019e366004610ce5565b61036f565b6101b66101b1366004610d52565b610391565b005b6101cb6101c6366004610e0e565b61039e565b6040516001600160a01b039091168152602001610130565b6101606101f1366004610ebe565b6001600160a01b031660009081526001602052604090205490565b6101b66104bc565b6101b6610222366004610ce5565b6104d0565b6000546001600160a01b03166101cb565b6101236104e9565b61014c61024e366004610ce5565b6104f8565b61014c610261366004610ce5565b610578565b6101b6610274366004610ebe565b610586565b610160610287366004610edb565b6106af565b6101b661029a366004610ebe565b6106da565b6060600480546102ae90610f14565b80601f01602080910402602001604051908101604052809291908181526020018280546102da90610f14565b80156103275780601f106102fc57610100808354040283529160200191610327565b820191906000526020600020905b81548152906001019060200180831161030a57829003601f168201915b5050505050905090565b60003361033f818585610750565b60019150505b92915050565b600033610359858285610875565b6103648585856108ef565b506001949350505050565b60003361033f81858561038283836106af565b61038c9190610f64565b610750565b61039b3382610a9a565b50565b60006103a8610bc6565b60006104236103b96012600a61105b565b6103c69062d04850611067565b6103d7906607fd10d7c82f0b610f64565b6103e36012600a61105b565b6103f1906301406f40611067565b6103fb919061107e565b6040805180820182526000808252602091820152815180830190925230825281019190915290565b905061043430888360200151610750565b604051630fe744bb60e31b81526001600160a01b03881690637f3a25d89061046c9084908d908d908c908c908c908c90600401611091565b6020604051808303816000875af115801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190611103565b9998505050505050505050565b6104c4610bc6565b6104ce6000610c20565b565b6104db823383610875565b6104e58282610a9a565b5050565b6060600580546102ae90610f14565b6000338161050682866106af565b90508381101561056b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103648286868403610750565b60003361033f8185856108ef565b61058e610bc6565b600061059c6012600a61105b565b6105a99062d04850611067565b6105ba906607fd10d7c82f0b610f64565b306000908152600160205260409020549091508111156106115760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e48191a5cdc185d18da195960721b6044820152606401610562565b600061063f826040805180820182526000808252602091820152815180830190925230825281019190915290565b905061064c308484610750565b604051632fd2b55f60e01b81526001600160a01b03841690632fd2b55f90610678908490600401611120565b600060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b50505050505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6106e2610bc6565b6001600160a01b0381166107475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610562565b61039b81610c20565b6001600160a01b0383166107b25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610562565b6001600160a01b0382166108135760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610562565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061088184846106af565b905060001981146108e957818110156108dc5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610562565b6108e98484848403610750565b50505050565b6001600160a01b0383166109535760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610562565b6001600160a01b0382166109b55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610562565b6001600160a01b03831660009081526001602052604090205481811015610a2d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610562565b6001600160a01b0380851660008181526001602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a8d9086815260200190565b60405180910390a36108e9565b6001600160a01b038216610afa5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610562565b6001600160a01b03821660009081526001602052604090205481811015610b6e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610562565b6001600160a01b03831660008181526001602090815260408083208686039055600380548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610868565b6000546001600160a01b031633146104ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610562565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000815180845260005b81811015610c9657602081850181015186830182015201610c7a565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610cc96020830184610c70565b9392505050565b6001600160a01b038116811461039b57600080fd5b60008060408385031215610cf857600080fd5b8235610d0381610cd0565b946020939093013593505050565b600080600060608486031215610d2657600080fd5b8335610d3181610cd0565b92506020840135610d4181610cd0565b929592945050506040919091013590565b600060208284031215610d6457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d9257600080fd5b813567ffffffffffffffff80821115610dad57610dad610d6b565b604051601f8301601f19908116603f01168101908282118183101715610dd557610dd5610d6b565b81604052838152866020858801011115610dee57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a031215610e2957600080fd5b873567ffffffffffffffff80821115610e4157600080fd5b610e4d8b838c01610d81565b985060208a0135915080821115610e6357600080fd5b50610e708a828b01610d81565b9650506040880135610e8181610cd0565b94506060880135610e9181610cd0565b93506080880135610ea181610cd0565b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215610ed057600080fd5b8135610cc981610cd0565b60008060408385031215610eee57600080fd5b8235610ef981610cd0565b91506020830135610f0981610cd0565b809150509250929050565b600181811c90821680610f2857607f821691505b602082108103610f4857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561034557610345610f4e565b600181815b80851115610fb2578160001904821115610f9857610f98610f4e565b80851615610fa557918102915b93841c9390800290610f7c565b509250929050565b600082610fc957506001610345565b81610fd657506000610345565b8160018114610fec5760028114610ff657611012565b6001915050610345565b60ff84111561100757611007610f4e565b50506001821b610345565b5060208310610133831016604e8410600b8410161715611035575081810a610345565b61103f8383610f77565b806000190482111561105357611053610f4e565b029392505050565b6000610cc98383610fba565b808202811582820484141761034557610345610f4e565b8181038181111561034557610345610f4e565b87516001600160a01b031681526020808901519082015260006101008060408401526110bf8184018a610c70565b905082810360608401526110d38189610c70565b6001600160a01b0397881660808501529590961660a08301525060c081019290925260e090910152949350505050565b60006020828403121561111557600080fd5b8151610cc981610cd0565b81516001600160a01b03168152602080830151908201526040810161034556fea2646970667358221220990005781dae7ae930a1012ec67afdc42073440ee1728088180cb86834369bd064736f6c63430008180033",
  "devdoc": {
    "details": "This contract is used to start the ICO for housing projects.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "feedSmartHousing(address)": {
        "details": "Dispatches ecosystem funds if not already dispatched to SmartHousing contract.",
        "params": {
          "smartHousingAddr": "The address of the SmartHousing contract."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "startICO(string,string,address,address,address,uint256,uint256)": {
        "details": "Starts the ICO by initializing the first housing project.",
        "params": {
          "fundingDeadline": "The deadline for the project funding.",
          "fundingGoal": "The funding goal for the new project.",
          "fundingToken": "Address of the funding token (ERC20).",
          "projectFundingAddr": "Address of the ProjectFunding contract.",
          "smartHousingAddress": "Address of the SmartHousing contract."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Coinbase",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/coinbase/Coinbase.sol:Coinbase",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1617,
        "contract": "contracts/coinbase/Coinbase.sol:Coinbase",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1623,
        "contract": "contracts/coinbase/Coinbase.sol:Coinbase",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1625,
        "contract": "contracts/coinbase/Coinbase.sol:Coinbase",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1627,
        "contract": "contracts/coinbase/Coinbase.sol:Coinbase",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1629,
        "contract": "contracts/coinbase/Coinbase.sol:Coinbase",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}