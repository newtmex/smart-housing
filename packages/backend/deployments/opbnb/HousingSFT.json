{
  "address": "0x6c27455287cA2f0d40d0190C1204aFad4Beef878",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getNonces",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "getRawTokenAttributes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "getUserSFT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardsPerShare",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originalOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct HousingAttributes",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "hasSFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_raised",
          "type": "uint256"
        }
      ],
      "name": "mintSFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountRaised_",
          "type": "uint256"
        }
      ],
      "name": "setAmountRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "sftBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rewardsPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "originalOwner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenWeight",
                  "type": "uint256"
                }
              ],
              "internalType": "struct HousingAttributes",
              "name": "attributes",
              "type": "tuple"
            }
          ],
          "internalType": "struct HousingSFT.HousingSFTBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "attr",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb80be9e137e444901f0290c6d50d0bafdacc8739f0b20aa2f4b7bdec5f325c6a",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0x6c27455287cA2f0d40d0190C1204aFad4Beef878",
    "transactionIndex": 1,
    "gasUsed": "2172684",
    "logsBloom": "0x
    "blockHash": "0x3d75b147daf117f913117501e2dc894e73edef048fba7c89e5aea03f3e6cff76",
    "transactionHash": "0xb80be9e137e444901f0290c6d50d0bafdacc8739f0b20aa2f4b7bdec5f325c6a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 36270742,
        "transactionHash": "0xb80be9e137e444901f0290c6d50d0bafdacc8739f0b20aa2f4b7bdec5f325c6a",
        "address": "0x6c27455287cA2f0d40d0190C1204aFad4Beef878",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3d75b147daf117f913117501e2dc894e73edef048fba7c89e5aea03f3e6cff76"
      }
    ],
    "blockNumber": 36270742,
    "cumulativeGasUsed": "2216523",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    ""
  ],
  "numDeployments": 1,
  "solcInputHash": "a3834a2f81eba945e2e32ba65dfaced7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getNonces\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getRawTokenAttributes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getUserSFT\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct HousingAttributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"hasSFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_raised\",\"type\":\"uint256\"}],\"name\":\"mintSFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRaised_\",\"type\":\"uint256\"}],\"name\":\"setAmountRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"sftBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct HousingAttributes\",\"name\":\"attributes\",\"type\":\"tuple\"}],\"internalType\":\"struct HousingSFT.HousingSFTBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"attr\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract will be inherited by the HousingProject contract.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getUserSFT(address,uint256)\":{\"params\":{\"owner\":\"The address to check the balance of.\"},\"returns\":{\"_0\":\"`HousingAttributes` if the owner has a positive balance of the token, panics otherwise.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mintSFT(uint256,address,uint256)\":{\"params\":{\"depositAmt\":\"The amount of fungible token deposited.\",\"depositor\":\"The address of the depositor.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"title\":\"Housing SFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"amountRaised()\":{\"notice\":\"The amount of fungible tokens collected from investors to finance the development of this housing project.\"},\"getUserSFT(address,uint256)\":{\"notice\":\"Checks if an address owns this HousingSFT and returns the attributes.\"},\"mintSFT(uint256,address,uint256)\":{\"notice\":\"Mints SFT tokens for a depositor based on the amount of deposit.\"},\"totalSupply()\":{\"notice\":\"The current amount out of the `MAX_SUPPLY` of tokens minted.\"},\"update(address,uint256,uint256,bytes)\":{\"notice\":\"Burns all the NFT balance of user at nonce, creates new with balance and attributes\"}},\"notice\":\"This contract represents a semi-fungible token (SFT) for housing projects.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/housing-project/HousingSFT.sol\":\"HousingSFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/housing-project/HousingSFT.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../modules/SFT.sol\\\";\\n\\nstruct HousingAttributes {\\n\\tuint256 rewardsPerShare;\\n\\taddress originalOwner;\\n\\tuint256 tokenWeight;\\n}\\n\\n/// @title Housing SFT\\n/// @notice This contract represents a semi-fungible token (SFT) for housing projects.\\n/// @dev This contract will be inherited by the HousingProject contract.\\ncontract HousingSFT is SFT {\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct HousingSFTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tHousingAttributes attributes;\\n\\t}\\n\\n\\t// FIXME this value should be unique to each contract, should depend on\\n\\t// the total amount expected to raise as it determines the amount of SFTs to\\n\\t// be minted for investors\\n\\tuint256 public constant MAX_SUPPLY = 1_000_000;\\n\\n\\t/// @notice The amount of fungible tokens collected from investors to finance the development of this housing project.\\n\\tuint256 public amountRaised;\\n\\n\\t/// @notice The current amount out of the `MAX_SUPPLY` of tokens minted.\\n\\tuint256 public totalSupply;\\n\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\tfunction setAmountRaised(uint256 amountRaised_) external onlyOwner {\\n\\t\\tamountRaised = amountRaised_;\\n\\t}\\n\\n\\tmodifier canMint() {\\n\\t\\taddress sftOwner = owner();\\n\\n\\t\\trequire(\\n\\t\\t\\tOwnable(sftOwner).owner() == _msgSender(),\\n\\t\\t\\t\\\"not allowed to mint\\\"\\n\\t\\t);\\n\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Mints SFT tokens for a depositor based on the amount of deposit.\\n\\t/// @param depositAmt The amount of fungible token deposited.\\n\\t/// @param depositor The address of the depositor.\\n\\tfunction mintSFT(\\n\\t\\tuint256 depositAmt,\\n\\t\\taddress depositor,\\n\\t\\tuint256 amount_raised\\n\\t) external canMint returns (uint256) {\\n\\t\\t// TODO remove after demo due to not beign able to move blocks in public networks\\n\\t\\t{\\n\\t\\t\\tamountRaised = amount_raised;\\n\\t\\t}\\n\\n\\t\\tuint256 totalDeposits = amountRaised;\\n\\t\\tuint256 maxShares = MAX_SUPPLY;\\n\\n\\t\\trequire(totalDeposits > 0, \\\"HousingSFT: No deposits recorded\\\");\\n\\n\\t\\tuint256 mintShare = (depositAmt * maxShares) / totalDeposits;\\n\\t\\trequire(mintShare > 0, \\\"HousingSFT: Computed token shares is invalid\\\");\\n\\n\\t\\ttotalSupply += mintShare;\\n\\t\\trequire(totalSupply <= MAX_SUPPLY, \\\"HousingSFT: Max supply exceeded\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tHousingAttributes({\\n\\t\\t\\t\\trewardsPerShare: 0, // Should be 0 since they have never claimed any rent rewards\\n\\t\\t\\t\\toriginalOwner: depositor,\\n\\t\\t\\t\\ttokenWeight: mintShare\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\treturn _mint(depositor, mintShare, attributes, \\\"\\\");\\n\\t}\\n\\n\\t/// @notice Checks if an address owns this HousingSFT and returns the attributes.\\n\\t/// @param owner The address to check the balance of.\\n\\t/// @return `HousingAttributes` if the owner has a positive balance of the token, panics otherwise.\\n\\tfunction getUserSFT(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce\\n\\t) public view returns (HousingAttributes memory) {\\n\\t\\trequire(\\n\\t\\t\\thasSFT(owner, nonce),\\n\\t\\t\\t\\\"HouisingSFT: No tokens found for user at nonce\\\"\\n\\t\\t);\\n\\n\\t\\treturn abi.decode(getRawTokenAttributes(nonce), (HousingAttributes));\\n\\t}\\n\\n\\tfunction getMaxSupply() public pure returns (uint256) {\\n\\t\\treturn MAX_SUPPLY;\\n\\t}\\n\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (HousingSFTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tHousingSFTBalance[] memory balance = new HousingSFTBalance[](\\n\\t\\t\\t_sftBals.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = HousingSFTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (HousingAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction tokenDetails()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (string memory, string memory, uint256)\\n\\t{\\n\\t\\treturn (name(), symbol(), getMaxSupply());\\n\\t}\\n}\\n\",\"keccak256\":\"0x8fbbe8d670bc777eed8587d0a8b11acf1d7b40b9ae631fee4abc929f4275c160\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/modules/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// TODO I think we should create a standard of this\\nabstract contract SFT is ERC1155, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\tCounters.Counter private _nonceCounter;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t// Mapping from nonce to token attributes as bytes\\n\\tmapping(uint256 => bytes) private _tokenAttributes;\\n\\n\\t// Mapping from address to list of owned token nonces\\n\\tmapping(address => EnumerableSet.UintSet) private _addressToNonces;\\n\\n\\tconstructor(string memory name_, string memory symbol_) ERC1155(\\\"\\\") {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t// Private function to mint new tokens\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes,\\n\\t\\tbytes memory data\\n\\t) internal returns (uint256) {\\n\\t\\t_nonceCounter.increment();\\n\\t\\tuint256 nonce = _nonceCounter.current();\\n\\n\\t\\t// Store the attributes\\n\\t\\t_tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, data);\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t_addressToNonces[to].add(nonce);\\n\\n\\t\\treturn nonce;\\n\\t}\\n\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (_name, _symbol);\\n\\t}\\n\\n\\t// Function to get token attributes by nonce\\n\\tfunction getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) public view returns (bytes memory) {\\n\\t\\treturn _tokenAttributes[nonce];\\n\\t}\\n\\n\\t// Function to get list of nonces owned by an address\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _addressToNonces[owner].values();\\n\\t}\\n\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/// Burns all the NFT balance of user at nonce, creates new with balance and attributes\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) external onlyOwner {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\t_mint(user, amount, attr, \\\"\\\");\\n\\t}\\n\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _tokenAttributes[nonce];\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t// Override _beforeTokenTransfer to handle address-to-nonce mapping\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\t_addressToNonces[from].remove(ids[i]);\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\t_addressToNonces[to].add(ids[i]);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x8098c36137bbb9a342d16fd64f7d57c03a77841a872dd44641b9db1623a699aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346200040c5762002a0c803803806200001d8162000411565b9283398101906040818303126200040c5780516001600160401b0391908281116200040c57836200005091830162000437565b90602093848201518481116200040c576200006c920162000437565b6040519084820182811085821117620003f6576040526000809252600254906001928383811c93168015620003eb575b87841014620003d757601f92838111620003a9575b50600281905560038054336001600160a01b0319821681178355919691906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a38051878111620003955760059182548781811c911680156200038a575b8b821014620003765790818784931162000325575b508a90878311600114620002c1578592620002b5575b505060001982891b1c191690861b1781555b8251968711620002a157600654908582811c9216801562000296575b8983101462000282578482116200023b575b505086928611600114620001cd579495508592919083620001c1575b50501b92600019911b1c1916176006555b6040516125629081620004aa8239f35b015193503880620001a0565b6006815286812093969394938691601f198316915b8983831062000220575050501062000205575b50505050811b01600655620001b1565b01519060f884600019921b161c1916905538808080620001f5565b858701518955909701969485019488935090810190620001e2565b600683528883209085808a01821c8301938b8b1062000278575b01901c019085905b8281106200026c575062000184565b8381550185906200025d565b9350829362000255565b634e487b7160e01b83526022600452602483fd5b91607f169162000172565b634e487b7160e01b82526041600452602482fd5b01519050388062000144565b8486528b86208994509190601f198416878e5b8282106200030d5750508411620002f4575b505050811b01815562000156565b0151600019838b1b60f8161c19169055388080620002e6565b8385015186558c979095019493840193018e620002d4565b9091508385528a852087808501861c8201928d86106200036c575b918a918695949301871c01915b8281106200035d5750506200012e565b8781558594508a91016200034d565b9250819262000340565b634e487b7160e01b85526022600452602485fd5b90607f169062000119565b634e487b7160e01b83526041600452602483fd5b600282528484898420920160051c8201915b828110620003cb575050620000b1565b838155018590620003bb565b634e487b7160e01b81526022600452602490fd5b92607f16926200009c565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620003f657604052565b919080601f840112156200040c5782516001600160401b038111620003f6576020906200046d601f8201601f1916830162000411565b928184528282870101116200040c5760005b8181106200049557508260009394955001015290565b85810183015184820184015282016200047f56fe6040608081526004908136101561001557600080fd5b600091823560e01c8062fdd58e1461181657806301ffc9a7146117a957806306fdde03146117845780630e89341c1461169957806318160ddd1461167a5780632eb2c2d6146112fa57806332cb6b0c146112dc5780634c0f38c2146112dc5780634e1273f4146111495780634fa3d25d146110f55780635124ae951461106f5780635ba0cd2414610f5e5780636addb66314610f08578063715018a614610ea85780637b3e5e7b14610e895780637c89f5df14610e565780638da5cb5b14610e2d57806395d89b4114610df2578063a22cb46514610d11578063a42accea14610a8e578063d6abe11014610a1c578063d8938f261461080b578063da96192114610569578063e985e9c51461051b578063ee83ef1b146104f5578063f242432a146102175763f2fde38b1461014957600080fd5b346102135760203660031901126102135761016261183f565b9061016b611e89565b6001600160a01b039182169283156101c1575050600354826bffffffffffffffffffffffff60a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5090346102135760a03660031901126102135761023261183f565b9061023b61185a565b9160443593606435936084356001600160401b0381116104f1576102629036908401611994565b6001600160a01b039384169390929033851480156104d2575b61028490611cb5565b821692610292841515611dd0565b61029b8861237c565b966102a58161237c565b50895b88518110156102da57600190878c5260086020526102d3898d206102cc838d611d18565b519061243c565b50016102a8565b50909192939497895b885181101561031557600190878c52600860205261030e898d20610307838d611d18565b51906123c9565b50016102e3565b5091949296509296818952602097898952868a20828b52895284878b205461033f82821015611e2a565b848c528b8b52888c20848d528b5203878b2055828a52898952868a20848b528952868a2061036e868254611dad565b905583828851858152878c8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a3392a43b6103aa578880f35b918697989596949391868a946103f38a519788968795869463f23a6e6160e01b9c8d8752339087015260248601526044850152606484015260a0608484015260a4830190611870565b03925af18391816104a3575b506104685750505061040f612298565b6308c379a014610437575b5162461bcd60e51b815291508190610433908201612327565b0390fd5b61043f6122b6565b8061044a575061041a565b610433915193849362461bcd60e51b85528401526024830190611870565b9194506001600160e01b03199091160361048a57505038808080808080808880f35b5162461bcd60e51b81529150819061043390820161224f565b6104c4919250873d89116104cb575b6104bc81836118fc565b81019061222f565b90386103ff565b503d6104b2565b5084895260016020908152868a20338b5290528589205460ff1661027b565b8780fd5b83823461051757602036600319011261051757610510611e89565b3560095580f35b5080fd5b50503461051757806003193601126105175760ff8160209361053b61183f565b61054361185a565b6001600160a01b0391821683526001875283832091168252855220549151911615158152f35b509190346105175760603660031901126105175782359161058861185a565b6003548351638da5cb5b60e01b81526020956001600160a01b03939092909160443591889082908b90829089165afa9081156108015786916107c8575b50843391160361078f5780600955801561074e57620f4240928381029080820485149015171561073b57049182156106e35761060383600a54611dad565b80600a55116106a057845192610618846118b0565b848452811686840152818584015261065185519387850190604080918051845260018060a01b0360208201511660208501520151910152565b6060835260808301938385106001600160401b0386111761068d578596975084610686965261067f856118e1565b8452611ee1565b9051908152f35b634e487b7160e01b815260418852602490fd5b845162461bcd60e51b8152808801879052601f60248201527f486f7573696e675346543a204d617820737570706c79206578636565646564006044820152606490fd5b855162461bcd60e51b8152808901889052602c60248201527f486f7573696e675346543a20436f6d707574656420746f6b656e20736861726560448201526b1cc81a5cc81a5b9d985b1a5960a21b6064820152608490fd5b634e487b7160e01b865260118952602486fd5b606488888089519262461bcd60e51b845283015260248201527f486f7573696e675346543a204e6f206465706f73697473207265636f726465646044820152fd5b855162461bcd60e51b815280890188905260136024820152721b9bdd08185b1b1bddd959081d1bc81b5a5b9d606a1b6044820152606490fd5b90508781813d83116107fa575b6107df81836118fc565b810103126107f6576107f090611d61565b386105c5565b8580fd5b503d6107d5565b87513d88823e3d90fd5b508290346105175760803660031901126105175761082761183f565b9160243592604435926064356001600160401b038111610a185761084e9036908301611994565b91610857611e89565b6001600160a01b0381169283156109c9576108718761237c565b9561087b8161237c565b50858951610888816118e1565b52855b87518110156108b65760019086885260086020526108af8b89206102cc838c611d18565b500161088b565b509193909296855b87518110156108e95760019087805260086020526108e28b8920610307838c611d18565b50016108be565b5080865260208681528987208388528152898720548a98508985821061097a5750918488999492818a95846109769c528683528787208688528352038686205585519283528201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62843392a4858151610962816118e1565b52519261096e846118e1565b858452611ee1565b5080f35b895162461bcd60e51b81529081018390526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608490fd5b875162461bcd60e51b8152602081850152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b8380fd5b5050346105175781600319360112610517578051610a7891610a4882610a4181611add565b03836118fc565b620f4240610a868251610a6581610a5e81611b91565b03826118fc565b8351958695606087526060870190611870565b908582036020870152611870565b918301520390f35b5050346105175760208060031936011261021357610aaa61183f565b6001600160a01b03811684526008825282842083518154808252918652838620818501969194939192835b818110610cfd57505050610aef84610b16969703856118fc565b835193610afb8561191d565b94610b08885196876118fc565b808652601f1996879161191d565b0184845b828110610cd657505050825b8151811015610b945780610b3c60019284611d18565b5180865260078752610a5e610b588b88208c5192838092611c1f565b610b628287611a1e565b8b5192610b6e846118b0565b8352888301528a820152610b828289611d18565b52610b8d8188611d18565b5001610b26565b5050509291805192610bbd610ba88561191d565b94610bb5885196876118fc565b80865261191d565b0182855b828110610ca957505050835b8151811015610c335780610be360019284611d18565b51805190610c008987830151920151878082518301019101611d75565b90895192610c0d846118b0565b83528683015288820152610c218287611d18565b52610c2c8186611d18565b5001610bcd565b505091835192808401908085528351809252808686019401925b828110610c5a5785850386f35b909192938260a0600192610c9d8a895180518452858101518685015201518b830190604080918051845260018060a01b0360208201511660208501520151910152565b01950193929101610c4d565b8751610cb4816118b0565b8781528783820152610cc4611d42565b89820152828288010152018390610bc1565b8951610ce1816118b0565b868152868382015260608b82015282828a010152018590610b1a565b825489529785019760019283019201610ad5565b509034610213578060031936011261021357610d2b61183f565b9060243591821515809303610dee576001600160a01b031692338414610d9a5750338452600160205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020608492519162461bcd60e51b8352820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152fd5b8480fd5b5050346105175781600319360112610517578051610e2991610e1782610a4181611b91565b51918291602083526020830190611870565b0390f35b50503461051757816003193601126105175760035490516001600160a01b039091168152602090f35b50346102135760203660031901126102135790610e1781610e2994610a4194358152600760205220825193848092611c1f565b5050346105175781600319360112610517576020906009549051908152f35b8334610f055780600319360112610f0557610ec1611e89565b600380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b828434610f055780600319360112610f055750805190610f2b82610a4181611add565b610e298151610f3d81610a5e81611b91565b610f508351948486958652850190611870565b908382036020850152611870565b50829034610517578260031936011261051757610f7961183f565b9060243591610f86611d42565b5060018060a01b031683526008602052610fb28285852060019160005201602052604060002054151590565b1561101557606084611013610feb610a5e610fdc8489898152600760205220855192838092611c1f565b60208082518301019101611d75565b9151825181526020808401516001600160a01b03169082015260409283015192810192909252565bf35b608490602085519162461bcd60e51b8352820152602e60248201527f486f756973696e675346543a204e6f20746f6b656e7320666f756e6420666f7260448201526d2075736572206174206e6f6e636560901b6064820152fd5b5050346105175760209081600319360112610213576001600160a01b0361109461183f565b16835260088252808320815190819485928583549182815201928252858220915b868282106110de578590610e29886110cf848903856118fc565b519282849384528301906119ea565b8354855288955090930192600192830192016110b5565b505034610517578060031936011261051757602091611140906001600160a01b0361111e61183f565b1681526008845282602435912060019160005201602052604060002054151590565b90519015158152f35b503461021357816003193601126102135780356001600160401b03808211610dee5736602383011215610dee5781830135906111848261191d565b92611191865194856118fc565b82845260209260248486019160051b830101913683116112d857602401905b8282106112b5575050506024359081116107f6576111d19036908501611934565b92825184510361126257508151946111e88661191d565b956111f5865197886118fc565b808752611204601f199161191d565b0136838801375b82518110156112505760019061123f6001600160a01b0361122c8387611d18565b51166112388388611d18565b5190611a1e565b6112498289611d18565b520161120b565b845182815280610e29818501896119ea565b60849185519162461bcd60e51b8352820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152fd5b81356001600160a01b03811681036112d45781529084019084016111b0565b8980fd5b8880fd5b50503461051757816003193601126105175760209051620f42408152f35b509034610213576003199060a036830112610a185761131761183f565b9361132061185a565b92604435946001600160401b0395868111610a18576113429036908301611934565b94606435878111610dee5761135a9036908401611934565b96608435908111610dee576113729036908401611994565b6001600160a01b0398891698909190338a14801561165b575b61139490611cb5565b8751895103611607578116916113ab831515611dd0565b855b88518110156113d8576001908b885260086020526113d18989206102cc838d611d18565b50016113ad565b5091939897909297855b885181101561140d576001908688526008602052611406898920610307838d611d18565b50016113e2565b5092989790969197855b8351811015611494578061142d60019286611d18565b51611438828c611d18565b5190808a526020908a82528b8b20898c528252828c8c8b828220549261146085851015611e2a565b858352828752822091528452038c8c20558a528981528a8a2090898b525261148c8a8a20918254611dad565b905501611417565b50949897909692959784878a518b81527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6114d18d8301886119ea565b918083036020820152806114e633948b6119ea565b0390a43b6114f2578880f35b8798969751948593849363bc197c8160e01b98898652338c87015260248601526044850160a0905260a48501611527916119ea565b8285820301606486015261153a916119ea565b9083820301608484015261154d91611870565b0381865a94602095f18391816115e6575b506115c65750505061156e612298565b6308c379a014611592575b905162461bcd60e51b8152908190610433908201612327565b61159a6122b6565b806115a55750611579565b610433906020935193849362461bcd60e51b85528401526024830190611870565b9193916001600160e01b0319160361048a57505038808080808080808880f35b61160091925060203d6020116104cb576104bc81836118fc565b903861155e565b865162461bcd60e51b8152602081860152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b508986526001602090815287872033885290528686205460ff1661138b565b505034610517578160031936011261051757602090600a549051908152f35b5050346105175760209081600319360112610213578051838194906002546116c081611aa3565b918285526001918760018216918260001461175d575050600114611701575b505050610e2992916116f29103856118fc565b51928284938452830190611870565b9190869350600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b82841061174557505050820101816116f2610e296116df565b8054848a01860152889550879490930192810161172c565b60ff19168782015293151560051b860190930193508492506116f29150610e2990506116df565b5050346105175781600319360112610517578051610e2991610e1782610a4181611add565b503461021357602036600319011261021357359063ffffffff60e01b82168092036102135760209250636cdb3d1360e11b8214918215611805575b82156117f4575b50519015158152f35b6301ffc9a760e01b149150386117eb565b6303a24d0760e21b811492506117e4565b50503461051757806003193601126105175760209061068661183661183f565b60243590611a1e565b600435906001600160a01b038216820361185557565b600080fd5b602435906001600160a01b038216820361185557565b919082519283825260005b84811061189c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161187b565b606081019081106001600160401b038211176118cb57604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b038211176118cb57604052565b90601f801991011681019081106001600160401b038211176118cb57604052565b6001600160401b0381116118cb5760051b60200190565b9080601f8301121561185557602090823561194e8161191d565b9361195c60405195866118fc565b81855260208086019260051b82010192831161185557602001905b828210611985575050505090565b81358152908301908301611977565b81601f82011215611855578035906001600160401b0382116118cb57604051926119c8601f8401601f1916602001856118fc565b8284526020838301011161185557816000926020809301838601378301015290565b90815180825260208080930193019160005b828110611a0a575050505090565b8351855293810193928101926001016119fc565b6001600160a01b0316908115611a4b57600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b90600182811c92168015611ad3575b6020831014611abd57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611ab2565b60055460009291611aed82611aa3565b80825291602090600190818116908115611b6c5750600114611b10575b50505050565b9293945060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000935b858510611b59575050506020925001019038808080611b0a565b8054858501840152938201938101611b3f565b92505050602093945060ff929192191683830152151560051b01019038808080611b0a565b60065460009291611ba182611aa3565b80825291602090600190818116908115611b6c5750600114611bc35750505050565b9293945060066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f926000935b858510611c0c575050506020925001019038808080611b0a565b8054858501840152938201938101611bf2565b805460009392611c2e82611aa3565b91828252602093600191600181169081600014611c965750600114611c55575b5050505050565b90939495506000929192528360002092846000945b838610611c8257505050500101903880808080611c4e565b805485870183015294019385908201611c6a565b60ff19168685015250505090151560051b010191503880808080611c4e565b15611cbc57565b60405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b6064820152608490fd5b8051821015611d2c5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405190611d4f826118b0565b60006040838281528260208201520152565b51906001600160a01b038216820361185557565b90816060910312611855576040805191611d8e836118b0565b80518352611d9e60208201611d61565b60208401520151604082015290565b91908201809211611dba57565b634e487b7160e01b600052601160045260246000fd5b15611dd757565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b15611e3157565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b6003546001600160a01b03163303611e9d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b92909260016004818154019586825560009487865260209460078652604097888820908051906001600160401b03821161221c578190611f218454611aa3565b601f81116121cc575b508990601f831160011461216d578b92612162575b5050600019600383901b1c191690871b1790555b6001600160a01b03811694851561211557611f6d8a61237c565b611f768561237c565b508189815b6120e6575b509089915b6120b6575b5050508887528686528787208588528652878720611fa9848254611dad565b9055848789518b815285898201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628b3392a43b611ffb575b50505082526008905220611ff79082906123c9565b5090565b8461204191889a97959499969a518093819263f23a6e6160e01b968784528d33908501528960248501528a6044850152606484015260a0608484015260a4830190611870565b038187875af1849181612097575b5061205f5788888861040f612298565b63ffffffff60e0999598939496991b160361207e575060088286611fe2565b845162461bcd60e51b815290819061043390820161224f565b6120af9192508a3d8c116104cb576104bc81836118fc565b903861204f565b80518210156120e157828092898c5260088b526120d98d8d206103078386611d18565b500191611f85565b611f8a565b82518110156121105781908b805260088b526121088d8d206102cc8387611d18565b500181611f7b565b611f80565b885162461bcd60e51b8152808601889052602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b015190503880611f3f565b848c528a8c208a94509190601f1984168d5b8d8282106121b6575050841161219d575b505050811b019055611f53565b015160001960f88460031b161c19169055388080612190565b8385015186558d9790950194938401930161217f565b909150838b52898b20601f840160051c8101918b8510612212575b84939291601f8c920160051c01915b828110612204575050611f2a565b8d81558594508b91016121f6565b90915081906121e7565b634e487b7160e01b8a526041875260248afd5b9081602091031261185557516001600160e01b0319811681036118555790565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d116122a557565b905060046000803e60005160e01c90565b600060443d1061231357604051600319913d83016004833e81516001600160401b03918282113d6024840111176123165781840194855193841161231e573d850101602084870101116123165750612313929101602001906118fc565b90565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b60405190604082018281106001600160401b038211176118cb5760405260018252602082016020368237825115611d2c575290565b8054821015611d2c5760005260206000200190600090565b600082815260018201602052604090205461243557805490680100000000000000008210156118cb578261241e6124078460018096018555846123b1565b819391549060031b91821b91600019901b19161790565b905580549260005201602052604060002055600190565b5050600090565b906001820190600092818452826020526040842054908115156000146125255760001991808301818111612511578254908482019182116124fd578082036124c8575b505050805480156124b45782019161249783836123b1565b909182549160031b1b191690555582526020526040812055600190565b634e487b7160e01b86526031600452602486fd5b6124e86124d861240793866123b1565b90549060031b1c928392866123b1565b9055865284602052604086205538808061247f565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b505050509056fea26469706673582212202d137cb3efc170b68d45dbf888164a01949016ba15b678c4c36cc54b57e0424364736f6c63430008180033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c8062fdd58e1461181657806301ffc9a7146117a957806306fdde03146117845780630e89341c1461169957806318160ddd1461167a5780632eb2c2d6146112fa57806332cb6b0c146112dc5780634c0f38c2146112dc5780634e1273f4146111495780634fa3d25d146110f55780635124ae951461106f5780635ba0cd2414610f5e5780636addb66314610f08578063715018a614610ea85780637b3e5e7b14610e895780637c89f5df14610e565780638da5cb5b14610e2d57806395d89b4114610df2578063a22cb46514610d11578063a42accea14610a8e578063d6abe11014610a1c578063d8938f261461080b578063da96192114610569578063e985e9c51461051b578063ee83ef1b146104f5578063f242432a146102175763f2fde38b1461014957600080fd5b346102135760203660031901126102135761016261183f565b9061016b611e89565b6001600160a01b039182169283156101c1575050600354826bffffffffffffffffffffffff60a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5090346102135760a03660031901126102135761023261183f565b9061023b61185a565b9160443593606435936084356001600160401b0381116104f1576102629036908401611994565b6001600160a01b039384169390929033851480156104d2575b61028490611cb5565b821692610292841515611dd0565b61029b8861237c565b966102a58161237c565b50895b88518110156102da57600190878c5260086020526102d3898d206102cc838d611d18565b519061243c565b50016102a8565b50909192939497895b885181101561031557600190878c52600860205261030e898d20610307838d611d18565b51906123c9565b50016102e3565b5091949296509296818952602097898952868a20828b52895284878b205461033f82821015611e2a565b848c528b8b52888c20848d528b5203878b2055828a52898952868a20848b528952868a2061036e868254611dad565b905583828851858152878c8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a3392a43b6103aa578880f35b918697989596949391868a946103f38a519788968795869463f23a6e6160e01b9c8d8752339087015260248601526044850152606484015260a0608484015260a4830190611870565b03925af18391816104a3575b506104685750505061040f612298565b6308c379a014610437575b5162461bcd60e51b815291508190610433908201612327565b0390fd5b61043f6122b6565b8061044a575061041a565b610433915193849362461bcd60e51b85528401526024830190611870565b9194506001600160e01b03199091160361048a57505038808080808080808880f35b5162461bcd60e51b81529150819061043390820161224f565b6104c4919250873d89116104cb575b6104bc81836118fc565b81019061222f565b90386103ff565b503d6104b2565b5084895260016020908152868a20338b5290528589205460ff1661027b565b8780fd5b83823461051757602036600319011261051757610510611e89565b3560095580f35b5080fd5b50503461051757806003193601126105175760ff8160209361053b61183f565b61054361185a565b6001600160a01b0391821683526001875283832091168252855220549151911615158152f35b509190346105175760603660031901126105175782359161058861185a565b6003548351638da5cb5b60e01b81526020956001600160a01b03939092909160443591889082908b90829089165afa9081156108015786916107c8575b50843391160361078f5780600955801561074e57620f4240928381029080820485149015171561073b57049182156106e35761060383600a54611dad565b80600a55116106a057845192610618846118b0565b848452811686840152818584015261065185519387850190604080918051845260018060a01b0360208201511660208501520151910152565b6060835260808301938385106001600160401b0386111761068d578596975084610686965261067f856118e1565b8452611ee1565b9051908152f35b634e487b7160e01b815260418852602490fd5b845162461bcd60e51b8152808801879052601f60248201527f486f7573696e675346543a204d617820737570706c79206578636565646564006044820152606490fd5b855162461bcd60e51b8152808901889052602c60248201527f486f7573696e675346543a20436f6d707574656420746f6b656e20736861726560448201526b1cc81a5cc81a5b9d985b1a5960a21b6064820152608490fd5b634e487b7160e01b865260118952602486fd5b606488888089519262461bcd60e51b845283015260248201527f486f7573696e675346543a204e6f206465706f73697473207265636f726465646044820152fd5b855162461bcd60e51b815280890188905260136024820152721b9bdd08185b1b1bddd959081d1bc81b5a5b9d606a1b6044820152606490fd5b90508781813d83116107fa575b6107df81836118fc565b810103126107f6576107f090611d61565b386105c5565b8580fd5b503d6107d5565b87513d88823e3d90fd5b508290346105175760803660031901126105175761082761183f565b9160243592604435926064356001600160401b038111610a185761084e9036908301611994565b91610857611e89565b6001600160a01b0381169283156109c9576108718761237c565b9561087b8161237c565b50858951610888816118e1565b52855b87518110156108b65760019086885260086020526108af8b89206102cc838c611d18565b500161088b565b509193909296855b87518110156108e95760019087805260086020526108e28b8920610307838c611d18565b50016108be565b5080865260208681528987208388528152898720548a98508985821061097a5750918488999492818a95846109769c528683528787208688528352038686205585519283528201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62843392a4858151610962816118e1565b52519261096e846118e1565b858452611ee1565b5080f35b895162461bcd60e51b81529081018390526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608490fd5b875162461bcd60e51b8152602081850152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b8380fd5b5050346105175781600319360112610517578051610a7891610a4882610a4181611add565b03836118fc565b620f4240610a868251610a6581610a5e81611b91565b03826118fc565b8351958695606087526060870190611870565b908582036020870152611870565b918301520390f35b5050346105175760208060031936011261021357610aaa61183f565b6001600160a01b03811684526008825282842083518154808252918652838620818501969194939192835b818110610cfd57505050610aef84610b16969703856118fc565b835193610afb8561191d565b94610b08885196876118fc565b808652601f1996879161191d565b0184845b828110610cd657505050825b8151811015610b945780610b3c60019284611d18565b5180865260078752610a5e610b588b88208c5192838092611c1f565b610b628287611a1e565b8b5192610b6e846118b0565b8352888301528a820152610b828289611d18565b52610b8d8188611d18565b5001610b26565b5050509291805192610bbd610ba88561191d565b94610bb5885196876118fc565b80865261191d565b0182855b828110610ca957505050835b8151811015610c335780610be360019284611d18565b51805190610c008987830151920151878082518301019101611d75565b90895192610c0d846118b0565b83528683015288820152610c218287611d18565b52610c2c8186611d18565b5001610bcd565b505091835192808401908085528351809252808686019401925b828110610c5a5785850386f35b909192938260a0600192610c9d8a895180518452858101518685015201518b830190604080918051845260018060a01b0360208201511660208501520151910152565b01950193929101610c4d565b8751610cb4816118b0565b8781528783820152610cc4611d42565b89820152828288010152018390610bc1565b8951610ce1816118b0565b868152868382015260608b82015282828a010152018590610b1a565b825489529785019760019283019201610ad5565b509034610213578060031936011261021357610d2b61183f565b9060243591821515809303610dee576001600160a01b031692338414610d9a5750338452600160205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020608492519162461bcd60e51b8352820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152fd5b8480fd5b5050346105175781600319360112610517578051610e2991610e1782610a4181611b91565b51918291602083526020830190611870565b0390f35b50503461051757816003193601126105175760035490516001600160a01b039091168152602090f35b50346102135760203660031901126102135790610e1781610e2994610a4194358152600760205220825193848092611c1f565b5050346105175781600319360112610517576020906009549051908152f35b8334610f055780600319360112610f0557610ec1611e89565b600380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b828434610f055780600319360112610f055750805190610f2b82610a4181611add565b610e298151610f3d81610a5e81611b91565b610f508351948486958652850190611870565b908382036020850152611870565b50829034610517578260031936011261051757610f7961183f565b9060243591610f86611d42565b5060018060a01b031683526008602052610fb28285852060019160005201602052604060002054151590565b1561101557606084611013610feb610a5e610fdc8489898152600760205220855192838092611c1f565b60208082518301019101611d75565b9151825181526020808401516001600160a01b03169082015260409283015192810192909252565bf35b608490602085519162461bcd60e51b8352820152602e60248201527f486f756973696e675346543a204e6f20746f6b656e7320666f756e6420666f7260448201526d2075736572206174206e6f6e636560901b6064820152fd5b5050346105175760209081600319360112610213576001600160a01b0361109461183f565b16835260088252808320815190819485928583549182815201928252858220915b868282106110de578590610e29886110cf848903856118fc565b519282849384528301906119ea565b8354855288955090930192600192830192016110b5565b505034610517578060031936011261051757602091611140906001600160a01b0361111e61183f565b1681526008845282602435912060019160005201602052604060002054151590565b90519015158152f35b503461021357816003193601126102135780356001600160401b03808211610dee5736602383011215610dee5781830135906111848261191d565b92611191865194856118fc565b82845260209260248486019160051b830101913683116112d857602401905b8282106112b5575050506024359081116107f6576111d19036908501611934565b92825184510361126257508151946111e88661191d565b956111f5865197886118fc565b808752611204601f199161191d565b0136838801375b82518110156112505760019061123f6001600160a01b0361122c8387611d18565b51166112388388611d18565b5190611a1e565b6112498289611d18565b520161120b565b845182815280610e29818501896119ea565b60849185519162461bcd60e51b8352820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152fd5b81356001600160a01b03811681036112d45781529084019084016111b0565b8980fd5b8880fd5b50503461051757816003193601126105175760209051620f42408152f35b509034610213576003199060a036830112610a185761131761183f565b9361132061185a565b92604435946001600160401b0395868111610a18576113429036908301611934565b94606435878111610dee5761135a9036908401611934565b96608435908111610dee576113729036908401611994565b6001600160a01b0398891698909190338a14801561165b575b61139490611cb5565b8751895103611607578116916113ab831515611dd0565b855b88518110156113d8576001908b885260086020526113d18989206102cc838d611d18565b50016113ad565b5091939897909297855b885181101561140d576001908688526008602052611406898920610307838d611d18565b50016113e2565b5092989790969197855b8351811015611494578061142d60019286611d18565b51611438828c611d18565b5190808a526020908a82528b8b20898c528252828c8c8b828220549261146085851015611e2a565b858352828752822091528452038c8c20558a528981528a8a2090898b525261148c8a8a20918254611dad565b905501611417565b50949897909692959784878a518b81527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6114d18d8301886119ea565b918083036020820152806114e633948b6119ea565b0390a43b6114f2578880f35b8798969751948593849363bc197c8160e01b98898652338c87015260248601526044850160a0905260a48501611527916119ea565b8285820301606486015261153a916119ea565b9083820301608484015261154d91611870565b0381865a94602095f18391816115e6575b506115c65750505061156e612298565b6308c379a014611592575b905162461bcd60e51b8152908190610433908201612327565b61159a6122b6565b806115a55750611579565b610433906020935193849362461bcd60e51b85528401526024830190611870565b9193916001600160e01b0319160361048a57505038808080808080808880f35b61160091925060203d6020116104cb576104bc81836118fc565b903861155e565b865162461bcd60e51b8152602081860152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b508986526001602090815287872033885290528686205460ff1661138b565b505034610517578160031936011261051757602090600a549051908152f35b5050346105175760209081600319360112610213578051838194906002546116c081611aa3565b918285526001918760018216918260001461175d575050600114611701575b505050610e2992916116f29103856118fc565b51928284938452830190611870565b9190869350600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b82841061174557505050820101816116f2610e296116df565b8054848a01860152889550879490930192810161172c565b60ff19168782015293151560051b860190930193508492506116f29150610e2990506116df565b5050346105175781600319360112610517578051610e2991610e1782610a4181611add565b503461021357602036600319011261021357359063ffffffff60e01b82168092036102135760209250636cdb3d1360e11b8214918215611805575b82156117f4575b50519015158152f35b6301ffc9a760e01b149150386117eb565b6303a24d0760e21b811492506117e4565b50503461051757806003193601126105175760209061068661183661183f565b60243590611a1e565b600435906001600160a01b038216820361185557565b600080fd5b602435906001600160a01b038216820361185557565b919082519283825260005b84811061189c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161187b565b606081019081106001600160401b038211176118cb57604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b038211176118cb57604052565b90601f801991011681019081106001600160401b038211176118cb57604052565b6001600160401b0381116118cb5760051b60200190565b9080601f8301121561185557602090823561194e8161191d565b9361195c60405195866118fc565b81855260208086019260051b82010192831161185557602001905b828210611985575050505090565b81358152908301908301611977565b81601f82011215611855578035906001600160401b0382116118cb57604051926119c8601f8401601f1916602001856118fc565b8284526020838301011161185557816000926020809301838601378301015290565b90815180825260208080930193019160005b828110611a0a575050505090565b8351855293810193928101926001016119fc565b6001600160a01b0316908115611a4b57600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b90600182811c92168015611ad3575b6020831014611abd57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611ab2565b60055460009291611aed82611aa3565b80825291602090600190818116908115611b6c5750600114611b10575b50505050565b9293945060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000935b858510611b59575050506020925001019038808080611b0a565b8054858501840152938201938101611b3f565b92505050602093945060ff929192191683830152151560051b01019038808080611b0a565b60065460009291611ba182611aa3565b80825291602090600190818116908115611b6c5750600114611bc35750505050565b9293945060066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f926000935b858510611c0c575050506020925001019038808080611b0a565b8054858501840152938201938101611bf2565b805460009392611c2e82611aa3565b91828252602093600191600181169081600014611c965750600114611c55575b5050505050565b90939495506000929192528360002092846000945b838610611c8257505050500101903880808080611c4e565b805485870183015294019385908201611c6a565b60ff19168685015250505090151560051b010191503880808080611c4e565b15611cbc57565b60405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b6064820152608490fd5b8051821015611d2c5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405190611d4f826118b0565b60006040838281528260208201520152565b51906001600160a01b038216820361185557565b90816060910312611855576040805191611d8e836118b0565b80518352611d9e60208201611d61565b60208401520151604082015290565b91908201809211611dba57565b634e487b7160e01b600052601160045260246000fd5b15611dd757565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b15611e3157565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b6003546001600160a01b03163303611e9d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b92909260016004818154019586825560009487865260209460078652604097888820908051906001600160401b03821161221c578190611f218454611aa3565b601f81116121cc575b508990601f831160011461216d578b92612162575b5050600019600383901b1c191690871b1790555b6001600160a01b03811694851561211557611f6d8a61237c565b611f768561237c565b508189815b6120e6575b509089915b6120b6575b5050508887528686528787208588528652878720611fa9848254611dad565b9055848789518b815285898201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628b3392a43b611ffb575b50505082526008905220611ff79082906123c9565b5090565b8461204191889a97959499969a518093819263f23a6e6160e01b968784528d33908501528960248501528a6044850152606484015260a0608484015260a4830190611870565b038187875af1849181612097575b5061205f5788888861040f612298565b63ffffffff60e0999598939496991b160361207e575060088286611fe2565b845162461bcd60e51b815290819061043390820161224f565b6120af9192508a3d8c116104cb576104bc81836118fc565b903861204f565b80518210156120e157828092898c5260088b526120d98d8d206103078386611d18565b500191611f85565b611f8a565b82518110156121105781908b805260088b526121088d8d206102cc8387611d18565b500181611f7b565b611f80565b885162461bcd60e51b8152808601889052602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b015190503880611f3f565b848c528a8c208a94509190601f1984168d5b8d8282106121b6575050841161219d575b505050811b019055611f53565b015160001960f88460031b161c19169055388080612190565b8385015186558d9790950194938401930161217f565b909150838b52898b20601f840160051c8101918b8510612212575b84939291601f8c920160051c01915b828110612204575050611f2a565b8d81558594508b91016121f6565b90915081906121e7565b634e487b7160e01b8a526041875260248afd5b9081602091031261185557516001600160e01b0319811681036118555790565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d116122a557565b905060046000803e60005160e01c90565b600060443d1061231357604051600319913d83016004833e81516001600160401b03918282113d6024840111176123165781840194855193841161231e573d850101602084870101116123165750612313929101602001906118fc565b90565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b60405190604082018281106001600160401b038211176118cb5760405260018252602082016020368237825115611d2c575290565b8054821015611d2c5760005260206000200190600090565b600082815260018201602052604090205461243557805490680100000000000000008210156118cb578261241e6124078460018096018555846123b1565b819391549060031b91821b91600019901b19161790565b905580549260005201602052604060002055600190565b5050600090565b906001820190600092818452826020526040842054908115156000146125255760001991808301818111612511578254908482019182116124fd578082036124c8575b505050805480156124b45782019161249783836123b1565b909182549160031b1b191690555582526020526040812055600190565b634e487b7160e01b86526031600452602486fd5b6124e86124d861240793866123b1565b90549060031b1c928392866123b1565b9055865284602052604086205538808061247f565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b505050509056fea26469706673582212202d137cb3efc170b68d45dbf888164a01949016ba15b678c4c36cc54b57e0424364736f6c63430008180033",
  "devdoc": {
    "details": "This contract will be inherited by the HousingProject contract.",
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getUserSFT(address,uint256)": {
        "params": {
          "owner": "The address to check the balance of."
        },
        "returns": {
          "_0": "`HousingAttributes` if the owner has a positive balance of the token, panics otherwise."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mintSFT(uint256,address,uint256)": {
        "params": {
          "depositAmt": "The amount of fungible token deposited.",
          "depositor": "The address of the depositor."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "title": "Housing SFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "amountRaised()": {
        "notice": "The amount of fungible tokens collected from investors to finance the development of this housing project."
      },
      "getUserSFT(address,uint256)": {
        "notice": "Checks if an address owns this HousingSFT and returns the attributes."
      },
      "mintSFT(uint256,address,uint256)": {
        "notice": "Mints SFT tokens for a depositor based on the amount of deposit."
      },
      "totalSupply()": {
        "notice": "The current amount out of the `MAX_SUPPLY` of tokens minted."
      },
      "update(address,uint256,uint256,bytes)": {
        "notice": "Burns all the NFT balance of user at nonce, creates new with balance and attributes"
      }
    },
    "notice": "This contract represents a semi-fungible token (SFT) for housing projects.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 141,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 147,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 149,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7237,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_nonceCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)2608_storage"
      },
      {
        "astId": 7239,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 7241,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 7245,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_tokenAttributes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 7250,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "_addressToNonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UintSet)3507_storage)"
      },
      {
        "astId": 3932,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "amountRaised",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3935,
        "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)3507_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)3507_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2608_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2607,
            "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)3035_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3030,
            "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3034,
            "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3507_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3506,
            "contract": "contracts/housing-project/HousingSFT.sol:HousingSFT",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3035_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}