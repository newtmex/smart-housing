{
  "address": "0x529023A50FA8998db13d87eF668DFBE9D16BfB8d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "smartHousingAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        }
      ],
      "name": "TokenIssued",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "claimRentReward",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardsPerShare",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originalOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct HousingAttributes",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "userValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referrerValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct rewardshares",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facilityManagementFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectSFT",
      "outputs": [
        {
          "internalType": "contract HousingSFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "rentPayment",
          "type": "tuple"
        }
      ],
      "name": "receiveRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardsPerShare",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originalOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct HousingAttributes",
          "name": "attr",
          "type": "tuple"
        }
      ],
      "name": "rentClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountRaised",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "housingTokenAddr",
          "type": "address"
        }
      ],
      "name": "setTokenDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1accc21791fac758db849229c977fca9331d7f2a635d6962fd2b6b39178c2c55",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0x529023A50FA8998db13d87eF668DFBE9D16BfB8d",
    "transactionIndex": 1,
    "gasUsed": "3183703",
    "logsBloom": "0x
    "blockHash": "0x7626032be050a88baa5df864e20df283b356fbaf9fb16534e92996adf4fb0e24",
    "transactionHash": "0x1accc21791fac758db849229c977fca9331d7f2a635d6962fd2b6b39178c2c55",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 36270713,
        "transactionHash": "0x1accc21791fac758db849229c977fca9331d7f2a635d6962fd2b6b39178c2c55",
        "address": "0x529023A50FA8998db13d87eF668DFBE9D16BfB8d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7626032be050a88baa5df864e20df283b356fbaf9fb16534e92996adf4fb0e24"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 36270713,
        "transactionHash": "0x1accc21791fac758db849229c977fca9331d7f2a635d6962fd2b6b39178c2c55",
        "address": "0xc41E97c4D7c4B8941cA5f3A54296f01E7A1183EA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000529023a50fa8998db13d87ef668dfbe9d16bfb8d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x7626032be050a88baa5df864e20df283b356fbaf9fb16534e92996adf4fb0e24"
      }
    ],
    "blockNumber": 36270713,
    "cumulativeGasUsed": "3227554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "a3834a2f81eba945e2e32ba65dfaced7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"smartHousingAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"TokenIssued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"claimRentReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct HousingAttributes\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"userValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerValue\",\"type\":\"uint256\"}],\"internalType\":\"struct rewardshares\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facilityManagementFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSFT\",\"outputs\":[{\"internalType\":\"contract HousingSFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"rentPayment\",\"type\":\"tuple\"}],\"name\":\"receiveRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct HousingAttributes\",\"name\":\"attr\",\"type\":\"tuple\"}],\"name\":\"rentClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"housingTokenAddr\",\"type\":\"address\"}],\"name\":\"setTokenDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract inherits from RentsModule and HousingSFT.\",\"kind\":\"dev\",\"methods\":{\"claimRentReward(uint256)\":{\"returns\":{\"_0\":\"The updated HousingAttributes.\"}},\"constructor\":{\"params\":{\"smartHousingAddr\":\"The address of the main SmartHousing contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveRent((address,uint256))\":{\"params\":{\"rentPayment\":\"The details of the rent payment.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rentClaimable((uint256,address,uint256))\":{\"params\":{\"attr\":\"The attributes of the token.\"},\"returns\":{\"_0\":\"The amount of rent claimable.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"HousingProject Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRentReward(uint256)\":{\"notice\":\"Claims rent rewards for a given token.\"},\"constructor\":{\"notice\":\"Initializes the HousingProject contract.\"},\"receiveRent((address,uint256))\":{\"notice\":\"Receives rent payments and distributes rewards.\"},\"rentClaimable((uint256,address,uint256))\":{\"notice\":\"Computes the amount of rent claimable for a given token.\"}},\"notice\":\"Represents a unique real estate project within the SmartHousing ecosystem.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/housing-project/HousingProject.sol\":\"HousingProject\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/housing-project/CallsSmartHousing.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"../main/Interface.sol\\\";\\n\\nabstract contract CallsSmartHousing {\\n\\t/// @notice The address of the main SmartHousing contract.\\n\\taddress immutable smartHousingAddr;\\n\\n\\tconstructor(address smartHousingAddr_) {\\n\\t\\tsmartHousingAddr = smartHousingAddr_;\\n\\t}\\n\\n\\t/// @dev Gets the referrer address for a given original owner.\\n\\t/// @param userAddr The original owner of the token.\\n\\t/// @return The referrer address.\\n\\tfunction getReferrer(\\n\\t\\taddress userAddr\\n\\t) internal view returns (uint, address) {\\n\\t\\treturn IUserModule(smartHousingAddr).getReferrer(userAddr);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd2ded3c751d669f079d12e7381e586b747cb9ae1b6d9bd4dbd87fc9db3b0371c\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/housing-project/HousingProject.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./RentsModule.sol\\\";\\n\\n/// @title HousingProject Contract\\n/// @notice Represents a unique real estate project within the SmartHousing ecosystem.\\n/// @dev This contract inherits from RentsModule and HousingSFT.\\ncontract HousingProject is RentsModule, Ownable {\\n\\t/// @notice Initializes the HousingProject contract.\\n\\t/// @param smartHousingAddr The address of the main SmartHousing contract.\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddr\\n\\t) CallsSmartHousing(smartHousingAddr) {\\n\\t\\tprojectSFT = new HousingSFT(name, symbol);\\n\\t}\\n\\n\\tevent TokenIssued(address tokenAddress, string name, uint256 amountRaised);\\n\\n\\tfunction setTokenDetails(\\n\\t\\tuint256 amountRaised,\\n\\t\\taddress housingTokenAddr\\n\\t) external onlyOwner {\\n\\t\\trequire(amountRaised == 0, \\\"Token details set already\\\");\\n\\n\\t\\thousingToken = ERC20Burnable(housingTokenAddr);\\n\\n\\t\\tprojectSFT.setAmountRaised(amountRaised);\\n\\t\\tstring memory name = projectSFT.name();\\n\\n\\t\\temit TokenIssued(address(projectSFT), name, amountRaised);\\n\\t}\\n\\n\\tfunction getMaxSupply() public view returns (uint256) {\\n\\t\\treturn projectSFT.getMaxSupply();\\n\\t}\\n}\\n\",\"keccak256\":\"0x159e6b338c47a2dacbec1254f582826b5584c338919e6e6908aba986f9a98350\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/housing-project/HousingSFT.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../modules/SFT.sol\\\";\\n\\nstruct HousingAttributes {\\n\\tuint256 rewardsPerShare;\\n\\taddress originalOwner;\\n\\tuint256 tokenWeight;\\n}\\n\\n/// @title Housing SFT\\n/// @notice This contract represents a semi-fungible token (SFT) for housing projects.\\n/// @dev This contract will be inherited by the HousingProject contract.\\ncontract HousingSFT is SFT {\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct HousingSFTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tHousingAttributes attributes;\\n\\t}\\n\\n\\t// FIXME this value should be unique to each contract, should depend on\\n\\t// the total amount expected to raise as it determines the amount of SFTs to\\n\\t// be minted for investors\\n\\tuint256 public constant MAX_SUPPLY = 1_000_000;\\n\\n\\t/// @notice The amount of fungible tokens collected from investors to finance the development of this housing project.\\n\\tuint256 public amountRaised;\\n\\n\\t/// @notice The current amount out of the `MAX_SUPPLY` of tokens minted.\\n\\tuint256 public totalSupply;\\n\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\tfunction setAmountRaised(uint256 amountRaised_) external onlyOwner {\\n\\t\\tamountRaised = amountRaised_;\\n\\t}\\n\\n\\tmodifier canMint() {\\n\\t\\taddress sftOwner = owner();\\n\\n\\t\\trequire(\\n\\t\\t\\tOwnable(sftOwner).owner() == _msgSender(),\\n\\t\\t\\t\\\"not allowed to mint\\\"\\n\\t\\t);\\n\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Mints SFT tokens for a depositor based on the amount of deposit.\\n\\t/// @param depositAmt The amount of fungible token deposited.\\n\\t/// @param depositor The address of the depositor.\\n\\tfunction mintSFT(\\n\\t\\tuint256 depositAmt,\\n\\t\\taddress depositor,\\n\\t\\tuint256 amount_raised\\n\\t) external canMint returns (uint256) {\\n\\t\\t// TODO remove after demo due to not beign able to move blocks in public networks\\n\\t\\t{\\n\\t\\t\\tamountRaised = amount_raised;\\n\\t\\t}\\n\\n\\t\\tuint256 totalDeposits = amountRaised;\\n\\t\\tuint256 maxShares = MAX_SUPPLY;\\n\\n\\t\\trequire(totalDeposits > 0, \\\"HousingSFT: No deposits recorded\\\");\\n\\n\\t\\tuint256 mintShare = (depositAmt * maxShares) / totalDeposits;\\n\\t\\trequire(mintShare > 0, \\\"HousingSFT: Computed token shares is invalid\\\");\\n\\n\\t\\ttotalSupply += mintShare;\\n\\t\\trequire(totalSupply <= MAX_SUPPLY, \\\"HousingSFT: Max supply exceeded\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tHousingAttributes({\\n\\t\\t\\t\\trewardsPerShare: 0, // Should be 0 since they have never claimed any rent rewards\\n\\t\\t\\t\\toriginalOwner: depositor,\\n\\t\\t\\t\\ttokenWeight: mintShare\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\treturn _mint(depositor, mintShare, attributes, \\\"\\\");\\n\\t}\\n\\n\\t/// @notice Checks if an address owns this HousingSFT and returns the attributes.\\n\\t/// @param owner The address to check the balance of.\\n\\t/// @return `HousingAttributes` if the owner has a positive balance of the token, panics otherwise.\\n\\tfunction getUserSFT(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce\\n\\t) public view returns (HousingAttributes memory) {\\n\\t\\trequire(\\n\\t\\t\\thasSFT(owner, nonce),\\n\\t\\t\\t\\\"HouisingSFT: No tokens found for user at nonce\\\"\\n\\t\\t);\\n\\n\\t\\treturn abi.decode(getRawTokenAttributes(nonce), (HousingAttributes));\\n\\t}\\n\\n\\tfunction getMaxSupply() public pure returns (uint256) {\\n\\t\\treturn MAX_SUPPLY;\\n\\t}\\n\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (HousingSFTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tHousingSFTBalance[] memory balance = new HousingSFTBalance[](\\n\\t\\t\\t_sftBals.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = HousingSFTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (HousingAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction tokenDetails()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (string memory, string memory, uint256)\\n\\t{\\n\\t\\treturn (name(), symbol(), getMaxSupply());\\n\\t}\\n}\\n\",\"keccak256\":\"0x8fbbe8d670bc777eed8587d0a8b11acf1d7b40b9ae631fee4abc929f4275c160\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/housing-project/RentsModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"./HousingSFT.sol\\\";\\nimport \\\"./RewardSharing.sol\\\";\\nimport \\\"../lib/TokenPayments.sol\\\";\\nimport \\\"./CallsSmartHousing.sol\\\";\\n\\n/// @title Rents Module\\n/// @notice Handles rent payments, reward calculations, and distribution for Housing projects.\\n/// @dev This abstract contract should be inherited by the HousingProject contract.\\nabstract contract RentsModule is CallsSmartHousing {\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\tusing RewardShares for rewardshares;\\n\\n\\tuint256 public rewardPerShare;\\n\\tuint256 public rewardsReserve;\\n\\tuint256 public facilityManagementFunds;\\n\\n\\tERC20Burnable housingToken;\\n\\tHousingSFT public projectSFT;\\n\\n\\t/// @notice Receives rent payments and distributes rewards.\\n\\t/// @param rentPayment The details of the rent payment.\\n\\tfunction receiveRent(ERC20TokenPayment calldata rentPayment) external {\\n\\t\\t// TODO set the appropriate rent per Project\\n\\t\\trequire(\\n\\t\\t\\trentPayment.amount > 0,\\n\\t\\t\\t\\\"RentsModule: Insufficient amount\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\trentPayment.token == housingToken,\\n\\t\\t\\t\\\"RentsModule: Invalid rent payment token\\\"\\n\\t\\t);\\n\\t\\trentPayment.receiveERC20();\\n\\n\\t\\tuint256 rentReward = (rentPayment.amount * 75) / 100;\\n\\t\\tuint256 ecosystemReward = (rentPayment.amount * 18) / 100;\\n\\t\\tuint256 facilityReward = (rentPayment.amount * 7) / 100;\\n\\n\\t\\tuint256 allShares = projectSFT.getMaxSupply();\\n\\t\\tuint256 rpsIncrease = (rentReward * DIVISION_SAFETY_CONST) / allShares;\\n\\n\\t\\trewardPerShare += rpsIncrease;\\n\\t\\trewardsReserve += rentReward;\\n\\t\\tfacilityManagementFunds += facilityReward;\\n\\n\\t\\thousingToken.burn(ecosystemReward);\\n\\t\\tISmartHousing(smartHousingAddr).addProjectRent(rentPayment.amount);\\n\\t}\\n\\n\\t/// @notice Claims rent rewards for a given token.\\n\\t/// @return The updated HousingAttributes.\\n\\tfunction claimRentReward(\\n\\t\\tuint256 nonce\\n\\t) external returns (HousingAttributes memory, rewardshares memory) {\\n\\t\\taddress caller = msg.sender;\\n\\t\\tuint256 currentRPS = rewardPerShare;\\n\\n\\t\\tHousingAttributes memory attr = projectSFT.getUserSFT(caller, nonce);\\n\\t\\trewardshares memory rewardShares = computeRewardShares(attr);\\n\\t\\tuint256 totalReward = rewardShares.total();\\n\\n\\t\\tif (totalReward == 0) {\\n\\t\\t\\t// Fail silently\\n\\t\\t\\treturn (attr, rewardShares);\\n\\t\\t}\\n\\n\\t\\trequire(rewardsReserve >= totalReward, \\\"Computed rewards too large\\\");\\n\\n\\t\\trewardsReserve -= totalReward;\\n\\n\\t\\t// We use original owner since we are certain they are registered\\n\\t\\t(, address referrer) = getReferrer(attr.originalOwner);\\n\\t\\tif (rewardShares.referrerValue > 0) {\\n\\t\\t\\tif (referrer != address(0)) {\\n\\t\\t\\t\\thousingToken.transfer(referrer, rewardShares.referrerValue); // Send to referrer\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thousingToken.burn(rewardShares.referrerValue); // Burn to add to ecosystem reward\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tattr.rewardsPerShare = currentRPS;\\n\\n\\t\\tprojectSFT.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\tnonce,\\n\\t\\t\\tprojectSFT.balanceOf(caller, nonce),\\n\\t\\t\\tabi.encode(attr)\\n\\t\\t);\\n\\n\\t\\thousingToken.transfer(caller, rewardShares.userValue); // Send to user\\n\\n\\t\\treturn (attr, rewardShares);\\n\\t}\\n\\n\\t/// @notice Computes the amount of rent claimable for a given token.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return The amount of rent claimable.\\n\\tfunction rentClaimable(\\n\\t\\tHousingAttributes memory attr\\n\\t) public view returns (uint256) {\\n\\t\\treturn computeRewardShares(attr).userValue;\\n\\t}\\n\\n\\t/// @dev Computes the reward shares for a given token.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return The computed RewardShares.\\n\\tfunction computeRewardShares(\\n\\t\\tHousingAttributes memory attr\\n\\t) internal view returns (rewardshares memory) {\\n\\t\\tuint256 currentRPS = rewardPerShare;\\n\\n\\t\\tif (currentRPS == 0 || attr.rewardsPerShare >= currentRPS) {\\n\\t\\t\\treturn rewardshares({ userValue: 0, referrerValue: 0 });\\n\\t\\t}\\n\\n\\t\\tuint256 reward = computeReward(attr, currentRPS);\\n\\n\\t\\treturn splitReward(reward);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe97c64b7d4f5a945493aa8492c4412248f60ec1e6e8cd74e3f805e40cc672768\",\"license\":\"MIT\"},\"contracts/housing-project/RewardSharing.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"./HousingSFT.sol\\\";\\n\\nuint256 constant DIVISION_SAFETY_CONST = 1_000_000_000_000_000_000;\\n\\nstruct rewardshares {\\n\\tuint256 userValue;\\n\\tuint256 referrerValue;\\n}\\n\\nlibrary RewardShares {\\n\\tfunction total(rewardshares memory self) internal pure returns (uint256) {\\n\\t\\treturn self.userValue + self.referrerValue;\\n\\t}\\n}\\n\\nfunction splitReward(uint256 reward) pure returns (rewardshares memory) {\\n\\tuint256 referrerValue = (reward * 6_66) / 100_00; // would amount to approximately 5% of grand total\\n\\tuint256 userValue = reward - referrerValue;\\n\\n\\treturn rewardshares(userValue, referrerValue);\\n}\\n\\nfunction computeReward(\\n\\tHousingAttributes memory attr,\\n\\tuint256 contractRPS\\n) pure returns (uint256) {\\n\\tif (contractRPS <= attr.rewardsPerShare) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\treturn\\n\\t\\t((contractRPS - attr.rewardsPerShare) * attr.tokenWeight) /\\n\\t\\tDIVISION_SAFETY_CONST;\\n}\\n\",\"keccak256\":\"0x9f07d2b3ee49b91e12ad7ce9ba248ab7dd30bc2efc4238a594e681d3f0348e54\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/lib/TokenPayments.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SFT } from \\\"../modules/SFT.sol\\\";\\n\\nstruct ERC20TokenPayment {\\n\\tIERC20 token;\\n\\tuint256 amount;\\n}\\n\\nstruct TokenPayment {\\n\\taddress token;\\n\\tuint256 amount;\\n\\tuint256 nonce;\\n}\\n\\nlibrary TokenPayments {\\n\\tfunction accept(ERC20TokenPayment calldata self) internal {\\n\\t\\tTokenPayments.receiveERC20(self, msg.sender);\\n\\t}\\n\\n\\tfunction receiveERC20(ERC20TokenPayment calldata payment) internal {\\n\\t\\tTokenPayments.receiveERC20(payment, msg.sender);\\n\\t}\\n\\n\\tfunction receiveERC20(\\n\\t\\tERC20TokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\tpayment.token.transferFrom(from, address(this), payment.amount);\\n\\t}\\n\\n\\t// Receives both Native, SFTs and ERC20; ERC20 have nonce as 0, Native coins have address 0 as token value\\n\\tfunction receiveToken(TokenPayment memory payment) internal {\\n\\t\\treceiveToken(payment, msg.sender);\\n\\t}\\n\\n\\tfunction receiveToken(TokenPayment memory payment, address from) internal {\\n\\t\\tif (payment.token == address(0)) {\\n\\t\\t\\t// Native payment\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpayment.amount == msg.value,\\n\\t\\t\\t\\t\\\"expected payment amount must equal sent amount\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfrom == msg.sender,\\n\\t\\t\\t\\t\\\"can receive native payment only from caller\\\"\\n\\t\\t\\t);\\n\\t\\t\\t\\n\\t\\t\\t// Nothing to do again since the VM will handle balance movements\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\tIERC20(payment.token).transferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.amount\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x06bd73e8da1bde18d9aaf6d4b6a1bdec6e0718af6354fe2d7ce87251d6fd1ac5\",\"license\":\"MIT\"},\"contracts/main/Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"../lib/TokenPayments.sol\\\";\\n\\ninterface ISmartHousing {\\n\\tfunction addProjectRent(uint256 amount) external;\\n\\n\\tfunction createRefIDViaProxy(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) external returns (uint256);\\n\\n\\tfunction addProject(address projectAddress) external;\\n\\n\\tfunction setUpSHT(ERC20TokenPayment calldata payment) external;\\n}\\n\\ninterface IUserModule {\\n\\tfunction getReferrer(address user) external view returns (uint, address);\\n}\\n\",\"keccak256\":\"0x066719eed5c5ff2394d78ce027aada5a8555713c9f4abf8b5135975981ba9989\",\"license\":\"MIT\"},\"contracts/modules/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// TODO I think we should create a standard of this\\nabstract contract SFT is ERC1155, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\tCounters.Counter private _nonceCounter;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t// Mapping from nonce to token attributes as bytes\\n\\tmapping(uint256 => bytes) private _tokenAttributes;\\n\\n\\t// Mapping from address to list of owned token nonces\\n\\tmapping(address => EnumerableSet.UintSet) private _addressToNonces;\\n\\n\\tconstructor(string memory name_, string memory symbol_) ERC1155(\\\"\\\") {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t// Private function to mint new tokens\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes,\\n\\t\\tbytes memory data\\n\\t) internal returns (uint256) {\\n\\t\\t_nonceCounter.increment();\\n\\t\\tuint256 nonce = _nonceCounter.current();\\n\\n\\t\\t// Store the attributes\\n\\t\\t_tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, data);\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t_addressToNonces[to].add(nonce);\\n\\n\\t\\treturn nonce;\\n\\t}\\n\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (_name, _symbol);\\n\\t}\\n\\n\\t// Function to get token attributes by nonce\\n\\tfunction getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) public view returns (bytes memory) {\\n\\t\\treturn _tokenAttributes[nonce];\\n\\t}\\n\\n\\t// Function to get list of nonces owned by an address\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _addressToNonces[owner].values();\\n\\t}\\n\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/// Burns all the NFT balance of user at nonce, creates new with balance and attributes\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) external onlyOwner {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\t_mint(user, amount, attr, \\\"\\\");\\n\\t}\\n\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _tokenAttributes[nonce];\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t// Override _beforeTokenTransfer to handle address-to-nonce mapping\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\t_addressToNonces[from].remove(ids[i]);\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\t_addressToNonces[to].add(ids[i]);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x8098c36137bbb9a342d16fd64f7d57c03a77841a872dd44641b9db1623a699aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x604060a08152346200015e5762003cf4803803806200001e8162000163565b92833981016060828203126200015e5781516001600160401b03908181116200015e57826200004f918501620001c4565b9160208401518281116200015e5785916200006c918601620001c4565b9301516001600160a01b03929083811681036200015e576080526005549160018060a01b0319943386851617600555865192600094863391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08780a3612a0c848101938411858510176200014a5791620000fb8594926200010a94620012e887398a84528a8401906200021b565b9160208184039101526200021b565b039082f09081156200013f575016906004541617600455516110a590816200024382396080518181816106550152610b650152f35b8451903d90823e3d90fd5b634e487b7160e01b86526041600452602486fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200018957604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110620001b35750506000910152565b8181015183820152602001620001a2565b81601f820112156200015e5780516001600160401b0381116200018957620001f6601f8201601f191660200162000163565b92818452602082840101116200015e576200021891602080850191016200019f565b90565b9060209162000236815180928185528580860191016200019f565b601f01601f191601019056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826321aca2ed146108f657508163446a2ec8146108d95781634c0f38c21461084a5781635ad08fea146104f4578163715018a6146104965781637361991514610276578163800151521461024e5781638da5cb5b14610225578163c4152bab14610206578163f2fde38b1461012c578163f59002e3146100ca575063faf36a4b146100a957600080fd5b346100c657816003193601126100c6576020906002549051908152f35b5080fd5b828434610129576020366003190112610129575060206101196100ef60a09435610a92565b9351815181526020808301516001600160a01b031690820152604091820151918101919091529290565b8051606084015201516080820152f35b80fd5b91905034610202576020366003190112610202576001600160a01b038235818116939192908490036101fd57610160610fd5565b83156101ab575050600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b600080fd5b8280fd5b5050346100c657816003193601126100c6576020906001549051908152f35b5050346100c657816003193601126100c65760055490516001600160a01b039091168152602090f35b9050346102025782600319360112610202575490516001600160a01b03909116815260209150f35b9050346102025781600319360112610202578035916102936109c2565b61029b610fd5565b8361045357600380546001600160a01b0319166001600160a01b03928316179055825485908216803b156100c657818091602486518094819363ee83ef1b60e01b83528b8b8401525af1801561044957610431575b5050825416908051936306fdde0360e01b855285858581865afa938415610427578694610361575b507f2f495db1d0882db23f97f363d216ccfe2aaed3fdfceb88feb921954e49569bd7945061035782519485948552606060208601526060850190610a34565b918301520390a180f35b9093503d8087873e61037381876109a0565b85019060208683031261040857855167ffffffffffffffff9687821161042357019082601f8301121561041f57815196871161040c57508251916103c1601f8801601f1916602001846109a0565b86835260208783010111610408577f2f495db1d0882db23f97f363d216ccfe2aaed3fdfceb88feb921954e49569bd7956104019160208085019101610a11565b9238610318565b8680fd5b634e487b7160e01b885260419052602487fd5b8780fd5b8880fd5b82513d88823e3d90fd5b61043a90610970565b6104455784386102f0565b8480fd5b84513d84823e3d90fd5b815162461bcd60e51b8152602081850152601960248201527f546f6b656e2064657461696c732073657420616c7265616479000000000000006044820152606490fd5b83346101295780600319360112610129576104af610fd5565b600580546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8383346100c657806003193601126100c65760249081359384156107fb5761051a6109d8565b6003546001600160a01b039691908716908716036107a95785859661053d6109d8565b168451906323b872dd60e01b8252338583015230878301528360448301528160648160209b8c945af1801561079f57610772575b50604b8202828104604b03610760576064900496601283029783890460120361074e57600784029184830460070361073c578581858254168951928380926326079c6160e11b82525afa918215610732578a92610704575b5050670de0b6b3a76400008083029083820414831517156106f25781156106e057606492610601610617959361060b93048c546109ee565b8b556001546109ee565b600155046002546109ee565b600255806003541696873b156104085760648688928388519b8c948593630852cd8d60e31b855204898401525af180156106d6576106c2575b8596507f00000000000000000000000000000000000000000000000000000000000000001693843b156106be5785928385519687948593630cac2b0960e11b85528401525af19081156106b557506106a55750f35b6106ae90610970565b6101295780f35b513d84823e3d90fd5b8580fd5b9490956106ce90610970565b938590610650565b84513d88823e3d90fd5b634e487b7160e01b8a5260128752888afd5b634e487b7160e01b8a5260118752888afd5b90809250813d831161072b575b61071b81836109a0565b8101031261042357518a806105c9565b503d610711565b88513d8c823e3d90fd5b634e487b7160e01b8952601186528789fd5b634e487b7160e01b8852601185528688fd5b634e487b7160e01b8752601184528587fd5b61079190883d8a11610798575b61078981836109a0565b810190610a7a565b5087610571565b503d61077f565b85513d89823e3d90fd5b506027836020608494519362461bcd60e51b85528401528201527f52656e74734d6f64756c653a20496e76616c69642072656e74207061796d656e6044820152663a103a37b5b2b760c91b6064820152fd5b6025836020608494519362461bcd60e51b85528401528201527f52656e74734d6f64756c653a20496e73756666696369656e742072656e7420616044820152641b5bdd5b9d60da1b6064820152fd5b91905034610202578260031936011261020257815481516326079c6160e11b81529260209184919082906001600160a01b03165afa9182156108cf578392610897575b6020838351908152f35b9091506020813d6020116108c7575b816108b3602093836109a0565b81010312610202576020925051903861088d565b3d91506108a6565b81513d85823e3d90fd5b5050346100c657816003193601126100c657602091549051908152f35b838286346101295760603660031901126101295750826109369161091b60209561093e565b3581526109266109c2565b8482015260443583820152610f1a565b519051908152f35b6060810190811067ffffffffffffffff82111761095a57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161095a57604052565b6040810190811067ffffffffffffffff82111761095a57604052565b90601f8019910116810190811067ffffffffffffffff82111761095a57604052565b602435906001600160a01b03821682036101fd57565b6004356001600160a01b03811681036101fd5790565b919082018092116109fb57565b634e487b7160e01b600052601160045260246000fd5b60005b838110610a245750506000910152565b8181015183820152602001610a14565b90602091610a4d81518092818552858086019101610a11565b601f01601f1916010190565b51906001600160a01b03821682036101fd57565b919082039182116109fb57565b908160209103126101fd575180151581036101fd5790565b906000604092835190610aa48261093e565b82825282856020938285820152015282828651610ac081610984565b828152015282546004805487516316e8334960e21b81523381840152602481018590529297929591906001600160a01b03906060908890604490829085165afa968715610d0c578397610ec1575b50610b1887610f1a565b988951610b2a888c01918251906109ee565b8015610eb457600154818110610e715790610b4491610a6d565b600155888801518651634a9fefc760e01b81529084168582015286816024817f000000000000000000000000000000000000000000000000000000000000000088165afa908115610e67579089918791610e2d575b5082519283610d62575b5050509088525081548451627eeac760e11b81523381850190815260208101889052918316918890829081906040010381855afa908115610d58578591610d2b575b50855189518982019081526020808c01516001600160a01b0316908201526040808c01519101529060608252608082019782891067ffffffffffffffff8a1117610d1657888852833b1561040857636c49c79360e11b895233608484015260a483015260c4820152608060e48201528491879182908490607f1990610c6e610104820182610a34565b0301925af18015610d0c5790869291610cf0575b6003548a51865163a9059cbb60e01b8152339481019485526020850191909152965086928390036040019183918691165af1918215610ce6575050610cc8575b50509190565b81610cde92903d106107985761078981836109a0565b503880610cc2565b51903d90823e3d90fd5b915091610cfe819495610970565b610202578392918591610c82565b84513d85823e3d90fd5b604186634e487b7160e01b6000525260246000fd5b90508781813d8311610d51575b610d4281836109a0565b810103126101fd575138610be5565b503d610d38565b86513d87823e3d90fd5b81861615610ddc576003549051895163a9059cbb60e01b81526001600160a01b039390931688840190815260208101919091529193508391829003604001908290899088165af18015610d5857610dbf575b505b38878180610ba3565b610dd590883d8a116107985761078981836109a0565b5038610db4565b505050826003541690813b156106be5785916024839289519485938492630852cd8d60e31b84528a8401525af18015610d5857610e1a575b50610db6565b610e2690949194610970565b9238610e14565b809250888092503d8311610e60575b610e4681836109a0565b810103126106be57610e5a89809201610a59565b38610b99565b503d610e3c565b87513d88823e3d90fd5b875162461bcd60e51b81528087018b9052601a60248201527f436f6d7075746564207265776172647320746f6f206c617267650000000000006044820152606490fd5b5050505050505050509190565b9096506060813d606011610f12575b81610edd606093836109a0565b810103126102025783805191610ef28361093e565b80518352610f01888201610a59565b888401520151848201529538610b0e565b3d9150610ed0565b602090604051610f2981610984565b60009281848093520152815480158015610fca575b610fb057610f4b9161102d565b90806020604051610f5b81610984565b828152015261029a90818302918383041483151715610f9c5750612710610f8491048092610a6d565b9060405191610f9283610984565b8252602082015290565b634e487b7160e01b81526011600452602490fd5b505060405190610fbf82610984565b808252602082015290565b508082511015610f3e565b6005546001600160a01b03163303610fe957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90815190818111156110675760409161104591610a6d565b910151908181029181830414901517156109fb57670de0b6b3a7640000900490565b50505060009056fea26469706673582212208f96dc3d1eefbf0c5a2e1c80fada8ccb233c10abf25e4575a551b2a71ed8244964736f6c634300081800336080604052346200040c5762002a0c803803806200001d8162000411565b9283398101906040818303126200040c5780516001600160401b0391908281116200040c57836200005091830162000437565b90602093848201518481116200040c576200006c920162000437565b6040519084820182811085821117620003f6576040526000809252600254906001928383811c93168015620003eb575b87841014620003d757601f92838111620003a9575b50600281905560038054336001600160a01b0319821681178355919691906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a38051878111620003955760059182548781811c911680156200038a575b8b821014620003765790818784931162000325575b508a90878311600114620002c1578592620002b5575b505060001982891b1c191690861b1781555b8251968711620002a157600654908582811c9216801562000296575b8983101462000282578482116200023b575b505086928611600114620001cd579495508592919083620001c1575b50501b92600019911b1c1916176006555b6040516125629081620004aa8239f35b015193503880620001a0565b6006815286812093969394938691601f198316915b8983831062000220575050501062000205575b50505050811b01600655620001b1565b01519060f884600019921b161c1916905538808080620001f5565b858701518955909701969485019488935090810190620001e2565b600683528883209085808a01821c8301938b8b1062000278575b01901c019085905b8281106200026c575062000184565b8381550185906200025d565b9350829362000255565b634e487b7160e01b83526022600452602483fd5b91607f169162000172565b634e487b7160e01b82526041600452602482fd5b01519050388062000144565b8486528b86208994509190601f198416878e5b8282106200030d5750508411620002f4575b505050811b01815562000156565b0151600019838b1b60f8161c19169055388080620002e6565b8385015186558c979095019493840193018e620002d4565b9091508385528a852087808501861c8201928d86106200036c575b918a918695949301871c01915b8281106200035d5750506200012e565b8781558594508a91016200034d565b9250819262000340565b634e487b7160e01b85526022600452602485fd5b90607f169062000119565b634e487b7160e01b83526041600452602483fd5b600282528484898420920160051c8201915b828110620003cb575050620000b1565b838155018590620003bb565b634e487b7160e01b81526022600452602490fd5b92607f16926200009c565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620003f657604052565b919080601f840112156200040c5782516001600160401b038111620003f6576020906200046d601f8201601f1916830162000411565b928184528282870101116200040c5760005b8181106200049557508260009394955001015290565b85810183015184820184015282016200047f56fe6040608081526004908136101561001557600080fd5b600091823560e01c8062fdd58e1461181657806301ffc9a7146117a957806306fdde03146117845780630e89341c1461169957806318160ddd1461167a5780632eb2c2d6146112fa57806332cb6b0c146112dc5780634c0f38c2146112dc5780634e1273f4146111495780634fa3d25d146110f55780635124ae951461106f5780635ba0cd2414610f5e5780636addb66314610f08578063715018a614610ea85780637b3e5e7b14610e895780637c89f5df14610e565780638da5cb5b14610e2d57806395d89b4114610df2578063a22cb46514610d11578063a42accea14610a8e578063d6abe11014610a1c578063d8938f261461080b578063da96192114610569578063e985e9c51461051b578063ee83ef1b146104f5578063f242432a146102175763f2fde38b1461014957600080fd5b346102135760203660031901126102135761016261183f565b9061016b611e89565b6001600160a01b039182169283156101c1575050600354826bffffffffffffffffffffffff60a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5090346102135760a03660031901126102135761023261183f565b9061023b61185a565b9160443593606435936084356001600160401b0381116104f1576102629036908401611994565b6001600160a01b039384169390929033851480156104d2575b61028490611cb5565b821692610292841515611dd0565b61029b8861237c565b966102a58161237c565b50895b88518110156102da57600190878c5260086020526102d3898d206102cc838d611d18565b519061243c565b50016102a8565b50909192939497895b885181101561031557600190878c52600860205261030e898d20610307838d611d18565b51906123c9565b50016102e3565b5091949296509296818952602097898952868a20828b52895284878b205461033f82821015611e2a565b848c528b8b52888c20848d528b5203878b2055828a52898952868a20848b528952868a2061036e868254611dad565b905583828851858152878c8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a3392a43b6103aa578880f35b918697989596949391868a946103f38a519788968795869463f23a6e6160e01b9c8d8752339087015260248601526044850152606484015260a0608484015260a4830190611870565b03925af18391816104a3575b506104685750505061040f612298565b6308c379a014610437575b5162461bcd60e51b815291508190610433908201612327565b0390fd5b61043f6122b6565b8061044a575061041a565b610433915193849362461bcd60e51b85528401526024830190611870565b9194506001600160e01b03199091160361048a57505038808080808080808880f35b5162461bcd60e51b81529150819061043390820161224f565b6104c4919250873d89116104cb575b6104bc81836118fc565b81019061222f565b90386103ff565b503d6104b2565b5084895260016020908152868a20338b5290528589205460ff1661027b565b8780fd5b83823461051757602036600319011261051757610510611e89565b3560095580f35b5080fd5b50503461051757806003193601126105175760ff8160209361053b61183f565b61054361185a565b6001600160a01b0391821683526001875283832091168252855220549151911615158152f35b509190346105175760603660031901126105175782359161058861185a565b6003548351638da5cb5b60e01b81526020956001600160a01b03939092909160443591889082908b90829089165afa9081156108015786916107c8575b50843391160361078f5780600955801561074e57620f4240928381029080820485149015171561073b57049182156106e35761060383600a54611dad565b80600a55116106a057845192610618846118b0565b848452811686840152818584015261065185519387850190604080918051845260018060a01b0360208201511660208501520151910152565b6060835260808301938385106001600160401b0386111761068d578596975084610686965261067f856118e1565b8452611ee1565b9051908152f35b634e487b7160e01b815260418852602490fd5b845162461bcd60e51b8152808801879052601f60248201527f486f7573696e675346543a204d617820737570706c79206578636565646564006044820152606490fd5b855162461bcd60e51b8152808901889052602c60248201527f486f7573696e675346543a20436f6d707574656420746f6b656e20736861726560448201526b1cc81a5cc81a5b9d985b1a5960a21b6064820152608490fd5b634e487b7160e01b865260118952602486fd5b606488888089519262461bcd60e51b845283015260248201527f486f7573696e675346543a204e6f206465706f73697473207265636f726465646044820152fd5b855162461bcd60e51b815280890188905260136024820152721b9bdd08185b1b1bddd959081d1bc81b5a5b9d606a1b6044820152606490fd5b90508781813d83116107fa575b6107df81836118fc565b810103126107f6576107f090611d61565b386105c5565b8580fd5b503d6107d5565b87513d88823e3d90fd5b508290346105175760803660031901126105175761082761183f565b9160243592604435926064356001600160401b038111610a185761084e9036908301611994565b91610857611e89565b6001600160a01b0381169283156109c9576108718761237c565b9561087b8161237c565b50858951610888816118e1565b52855b87518110156108b65760019086885260086020526108af8b89206102cc838c611d18565b500161088b565b509193909296855b87518110156108e95760019087805260086020526108e28b8920610307838c611d18565b50016108be565b5080865260208681528987208388528152898720548a98508985821061097a5750918488999492818a95846109769c528683528787208688528352038686205585519283528201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62843392a4858151610962816118e1565b52519261096e846118e1565b858452611ee1565b5080f35b895162461bcd60e51b81529081018390526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608490fd5b875162461bcd60e51b8152602081850152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b8380fd5b5050346105175781600319360112610517578051610a7891610a4882610a4181611add565b03836118fc565b620f4240610a868251610a6581610a5e81611b91565b03826118fc565b8351958695606087526060870190611870565b908582036020870152611870565b918301520390f35b5050346105175760208060031936011261021357610aaa61183f565b6001600160a01b03811684526008825282842083518154808252918652838620818501969194939192835b818110610cfd57505050610aef84610b16969703856118fc565b835193610afb8561191d565b94610b08885196876118fc565b808652601f1996879161191d565b0184845b828110610cd657505050825b8151811015610b945780610b3c60019284611d18565b5180865260078752610a5e610b588b88208c5192838092611c1f565b610b628287611a1e565b8b5192610b6e846118b0565b8352888301528a820152610b828289611d18565b52610b8d8188611d18565b5001610b26565b5050509291805192610bbd610ba88561191d565b94610bb5885196876118fc565b80865261191d565b0182855b828110610ca957505050835b8151811015610c335780610be360019284611d18565b51805190610c008987830151920151878082518301019101611d75565b90895192610c0d846118b0565b83528683015288820152610c218287611d18565b52610c2c8186611d18565b5001610bcd565b505091835192808401908085528351809252808686019401925b828110610c5a5785850386f35b909192938260a0600192610c9d8a895180518452858101518685015201518b830190604080918051845260018060a01b0360208201511660208501520151910152565b01950193929101610c4d565b8751610cb4816118b0565b8781528783820152610cc4611d42565b89820152828288010152018390610bc1565b8951610ce1816118b0565b868152868382015260608b82015282828a010152018590610b1a565b825489529785019760019283019201610ad5565b509034610213578060031936011261021357610d2b61183f565b9060243591821515809303610dee576001600160a01b031692338414610d9a5750338452600160205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020608492519162461bcd60e51b8352820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152fd5b8480fd5b5050346105175781600319360112610517578051610e2991610e1782610a4181611b91565b51918291602083526020830190611870565b0390f35b50503461051757816003193601126105175760035490516001600160a01b039091168152602090f35b50346102135760203660031901126102135790610e1781610e2994610a4194358152600760205220825193848092611c1f565b5050346105175781600319360112610517576020906009549051908152f35b8334610f055780600319360112610f0557610ec1611e89565b600380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b828434610f055780600319360112610f055750805190610f2b82610a4181611add565b610e298151610f3d81610a5e81611b91565b610f508351948486958652850190611870565b908382036020850152611870565b50829034610517578260031936011261051757610f7961183f565b9060243591610f86611d42565b5060018060a01b031683526008602052610fb28285852060019160005201602052604060002054151590565b1561101557606084611013610feb610a5e610fdc8489898152600760205220855192838092611c1f565b60208082518301019101611d75565b9151825181526020808401516001600160a01b03169082015260409283015192810192909252565bf35b608490602085519162461bcd60e51b8352820152602e60248201527f486f756973696e675346543a204e6f20746f6b656e7320666f756e6420666f7260448201526d2075736572206174206e6f6e636560901b6064820152fd5b5050346105175760209081600319360112610213576001600160a01b0361109461183f565b16835260088252808320815190819485928583549182815201928252858220915b868282106110de578590610e29886110cf848903856118fc565b519282849384528301906119ea565b8354855288955090930192600192830192016110b5565b505034610517578060031936011261051757602091611140906001600160a01b0361111e61183f565b1681526008845282602435912060019160005201602052604060002054151590565b90519015158152f35b503461021357816003193601126102135780356001600160401b03808211610dee5736602383011215610dee5781830135906111848261191d565b92611191865194856118fc565b82845260209260248486019160051b830101913683116112d857602401905b8282106112b5575050506024359081116107f6576111d19036908501611934565b92825184510361126257508151946111e88661191d565b956111f5865197886118fc565b808752611204601f199161191d565b0136838801375b82518110156112505760019061123f6001600160a01b0361122c8387611d18565b51166112388388611d18565b5190611a1e565b6112498289611d18565b520161120b565b845182815280610e29818501896119ea565b60849185519162461bcd60e51b8352820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152fd5b81356001600160a01b03811681036112d45781529084019084016111b0565b8980fd5b8880fd5b50503461051757816003193601126105175760209051620f42408152f35b509034610213576003199060a036830112610a185761131761183f565b9361132061185a565b92604435946001600160401b0395868111610a18576113429036908301611934565b94606435878111610dee5761135a9036908401611934565b96608435908111610dee576113729036908401611994565b6001600160a01b0398891698909190338a14801561165b575b61139490611cb5565b8751895103611607578116916113ab831515611dd0565b855b88518110156113d8576001908b885260086020526113d18989206102cc838d611d18565b50016113ad565b5091939897909297855b885181101561140d576001908688526008602052611406898920610307838d611d18565b50016113e2565b5092989790969197855b8351811015611494578061142d60019286611d18565b51611438828c611d18565b5190808a526020908a82528b8b20898c528252828c8c8b828220549261146085851015611e2a565b858352828752822091528452038c8c20558a528981528a8a2090898b525261148c8a8a20918254611dad565b905501611417565b50949897909692959784878a518b81527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6114d18d8301886119ea565b918083036020820152806114e633948b6119ea565b0390a43b6114f2578880f35b8798969751948593849363bc197c8160e01b98898652338c87015260248601526044850160a0905260a48501611527916119ea565b8285820301606486015261153a916119ea565b9083820301608484015261154d91611870565b0381865a94602095f18391816115e6575b506115c65750505061156e612298565b6308c379a014611592575b905162461bcd60e51b8152908190610433908201612327565b61159a6122b6565b806115a55750611579565b610433906020935193849362461bcd60e51b85528401526024830190611870565b9193916001600160e01b0319160361048a57505038808080808080808880f35b61160091925060203d6020116104cb576104bc81836118fc565b903861155e565b865162461bcd60e51b8152602081860152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b508986526001602090815287872033885290528686205460ff1661138b565b505034610517578160031936011261051757602090600a549051908152f35b5050346105175760209081600319360112610213578051838194906002546116c081611aa3565b918285526001918760018216918260001461175d575050600114611701575b505050610e2992916116f29103856118fc565b51928284938452830190611870565b9190869350600283527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b82841061174557505050820101816116f2610e296116df565b8054848a01860152889550879490930192810161172c565b60ff19168782015293151560051b860190930193508492506116f29150610e2990506116df565b5050346105175781600319360112610517578051610e2991610e1782610a4181611add565b503461021357602036600319011261021357359063ffffffff60e01b82168092036102135760209250636cdb3d1360e11b8214918215611805575b82156117f4575b50519015158152f35b6301ffc9a760e01b149150386117eb565b6303a24d0760e21b811492506117e4565b50503461051757806003193601126105175760209061068661183661183f565b60243590611a1e565b600435906001600160a01b038216820361185557565b600080fd5b602435906001600160a01b038216820361185557565b919082519283825260005b84811061189c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161187b565b606081019081106001600160401b038211176118cb57604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b038211176118cb57604052565b90601f801991011681019081106001600160401b038211176118cb57604052565b6001600160401b0381116118cb5760051b60200190565b9080601f8301121561185557602090823561194e8161191d565b9361195c60405195866118fc565b81855260208086019260051b82010192831161185557602001905b828210611985575050505090565b81358152908301908301611977565b81601f82011215611855578035906001600160401b0382116118cb57604051926119c8601f8401601f1916602001856118fc565b8284526020838301011161185557816000926020809301838601378301015290565b90815180825260208080930193019160005b828110611a0a575050505090565b8351855293810193928101926001016119fc565b6001600160a01b0316908115611a4b57600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b90600182811c92168015611ad3575b6020831014611abd57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611ab2565b60055460009291611aed82611aa3565b80825291602090600190818116908115611b6c5750600114611b10575b50505050565b9293945060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000935b858510611b59575050506020925001019038808080611b0a565b8054858501840152938201938101611b3f565b92505050602093945060ff929192191683830152151560051b01019038808080611b0a565b60065460009291611ba182611aa3565b80825291602090600190818116908115611b6c5750600114611bc35750505050565b9293945060066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f926000935b858510611c0c575050506020925001019038808080611b0a565b8054858501840152938201938101611bf2565b805460009392611c2e82611aa3565b91828252602093600191600181169081600014611c965750600114611c55575b5050505050565b90939495506000929192528360002092846000945b838610611c8257505050500101903880808080611c4e565b805485870183015294019385908201611c6a565b60ff19168685015250505090151560051b010191503880808080611c4e565b15611cbc57565b60405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b6064820152608490fd5b8051821015611d2c5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405190611d4f826118b0565b60006040838281528260208201520152565b51906001600160a01b038216820361185557565b90816060910312611855576040805191611d8e836118b0565b80518352611d9e60208201611d61565b60208401520151604082015290565b91908201809211611dba57565b634e487b7160e01b600052601160045260246000fd5b15611dd757565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b15611e3157565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b6003546001600160a01b03163303611e9d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b92909260016004818154019586825560009487865260209460078652604097888820908051906001600160401b03821161221c578190611f218454611aa3565b601f81116121cc575b508990601f831160011461216d578b92612162575b5050600019600383901b1c191690871b1790555b6001600160a01b03811694851561211557611f6d8a61237c565b611f768561237c565b508189815b6120e6575b509089915b6120b6575b5050508887528686528787208588528652878720611fa9848254611dad565b9055848789518b815285898201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628b3392a43b611ffb575b50505082526008905220611ff79082906123c9565b5090565b8461204191889a97959499969a518093819263f23a6e6160e01b968784528d33908501528960248501528a6044850152606484015260a0608484015260a4830190611870565b038187875af1849181612097575b5061205f5788888861040f612298565b63ffffffff60e0999598939496991b160361207e575060088286611fe2565b845162461bcd60e51b815290819061043390820161224f565b6120af9192508a3d8c116104cb576104bc81836118fc565b903861204f565b80518210156120e157828092898c5260088b526120d98d8d206103078386611d18565b500191611f85565b611f8a565b82518110156121105781908b805260088b526121088d8d206102cc8387611d18565b500181611f7b565b611f80565b885162461bcd60e51b8152808601889052602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b015190503880611f3f565b848c528a8c208a94509190601f1984168d5b8d8282106121b6575050841161219d575b505050811b019055611f53565b015160001960f88460031b161c19169055388080612190565b8385015186558d9790950194938401930161217f565b909150838b52898b20601f840160051c8101918b8510612212575b84939291601f8c920160051c01915b828110612204575050611f2a565b8d81558594508b91016121f6565b90915081906121e7565b634e487b7160e01b8a526041875260248afd5b9081602091031261185557516001600160e01b0319811681036118555790565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d116122a557565b905060046000803e60005160e01c90565b600060443d1061231357604051600319913d83016004833e81516001600160401b03918282113d6024840111176123165781840194855193841161231e573d850101602084870101116123165750612313929101602001906118fc565b90565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b60405190604082018281106001600160401b038211176118cb5760405260018252602082016020368237825115611d2c575290565b8054821015611d2c5760005260206000200190600090565b600082815260018201602052604090205461243557805490680100000000000000008210156118cb578261241e6124078460018096018555846123b1565b819391549060031b91821b91600019901b19161790565b905580549260005201602052604060002055600190565b5050600090565b906001820190600092818452826020526040842054908115156000146125255760001991808301818111612511578254908482019182116124fd578082036124c8575b505050805480156124b45782019161249783836123b1565b909182549160031b1b191690555582526020526040812055600190565b634e487b7160e01b86526031600452602486fd5b6124e86124d861240793866123b1565b90549060031b1c928392866123b1565b9055865284602052604086205538808061247f565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b505050509056fea26469706673582212202d137cb3efc170b68d45dbf888164a01949016ba15b678c4c36cc54b57e0424364736f6c63430008180033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826321aca2ed146108f657508163446a2ec8146108d95781634c0f38c21461084a5781635ad08fea146104f4578163715018a6146104965781637361991514610276578163800151521461024e5781638da5cb5b14610225578163c4152bab14610206578163f2fde38b1461012c578163f59002e3146100ca575063faf36a4b146100a957600080fd5b346100c657816003193601126100c6576020906002549051908152f35b5080fd5b828434610129576020366003190112610129575060206101196100ef60a09435610a92565b9351815181526020808301516001600160a01b031690820152604091820151918101919091529290565b8051606084015201516080820152f35b80fd5b91905034610202576020366003190112610202576001600160a01b038235818116939192908490036101fd57610160610fd5565b83156101ab575050600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b600080fd5b8280fd5b5050346100c657816003193601126100c6576020906001549051908152f35b5050346100c657816003193601126100c65760055490516001600160a01b039091168152602090f35b9050346102025782600319360112610202575490516001600160a01b03909116815260209150f35b9050346102025781600319360112610202578035916102936109c2565b61029b610fd5565b8361045357600380546001600160a01b0319166001600160a01b03928316179055825485908216803b156100c657818091602486518094819363ee83ef1b60e01b83528b8b8401525af1801561044957610431575b5050825416908051936306fdde0360e01b855285858581865afa938415610427578694610361575b507f2f495db1d0882db23f97f363d216ccfe2aaed3fdfceb88feb921954e49569bd7945061035782519485948552606060208601526060850190610a34565b918301520390a180f35b9093503d8087873e61037381876109a0565b85019060208683031261040857855167ffffffffffffffff9687821161042357019082601f8301121561041f57815196871161040c57508251916103c1601f8801601f1916602001846109a0565b86835260208783010111610408577f2f495db1d0882db23f97f363d216ccfe2aaed3fdfceb88feb921954e49569bd7956104019160208085019101610a11565b9238610318565b8680fd5b634e487b7160e01b885260419052602487fd5b8780fd5b8880fd5b82513d88823e3d90fd5b61043a90610970565b6104455784386102f0565b8480fd5b84513d84823e3d90fd5b815162461bcd60e51b8152602081850152601960248201527f546f6b656e2064657461696c732073657420616c7265616479000000000000006044820152606490fd5b83346101295780600319360112610129576104af610fd5565b600580546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8383346100c657806003193601126100c65760249081359384156107fb5761051a6109d8565b6003546001600160a01b039691908716908716036107a95785859661053d6109d8565b168451906323b872dd60e01b8252338583015230878301528360448301528160648160209b8c945af1801561079f57610772575b50604b8202828104604b03610760576064900496601283029783890460120361074e57600784029184830460070361073c578581858254168951928380926326079c6160e11b82525afa918215610732578a92610704575b5050670de0b6b3a76400008083029083820414831517156106f25781156106e057606492610601610617959361060b93048c546109ee565b8b556001546109ee565b600155046002546109ee565b600255806003541696873b156104085760648688928388519b8c948593630852cd8d60e31b855204898401525af180156106d6576106c2575b8596507f00000000000000000000000000000000000000000000000000000000000000001693843b156106be5785928385519687948593630cac2b0960e11b85528401525af19081156106b557506106a55750f35b6106ae90610970565b6101295780f35b513d84823e3d90fd5b8580fd5b9490956106ce90610970565b938590610650565b84513d88823e3d90fd5b634e487b7160e01b8a5260128752888afd5b634e487b7160e01b8a5260118752888afd5b90809250813d831161072b575b61071b81836109a0565b8101031261042357518a806105c9565b503d610711565b88513d8c823e3d90fd5b634e487b7160e01b8952601186528789fd5b634e487b7160e01b8852601185528688fd5b634e487b7160e01b8752601184528587fd5b61079190883d8a11610798575b61078981836109a0565b810190610a7a565b5087610571565b503d61077f565b85513d89823e3d90fd5b506027836020608494519362461bcd60e51b85528401528201527f52656e74734d6f64756c653a20496e76616c69642072656e74207061796d656e6044820152663a103a37b5b2b760c91b6064820152fd5b6025836020608494519362461bcd60e51b85528401528201527f52656e74734d6f64756c653a20496e73756666696369656e742072656e7420616044820152641b5bdd5b9d60da1b6064820152fd5b91905034610202578260031936011261020257815481516326079c6160e11b81529260209184919082906001600160a01b03165afa9182156108cf578392610897575b6020838351908152f35b9091506020813d6020116108c7575b816108b3602093836109a0565b81010312610202576020925051903861088d565b3d91506108a6565b81513d85823e3d90fd5b5050346100c657816003193601126100c657602091549051908152f35b838286346101295760603660031901126101295750826109369161091b60209561093e565b3581526109266109c2565b8482015260443583820152610f1a565b519051908152f35b6060810190811067ffffffffffffffff82111761095a57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161095a57604052565b6040810190811067ffffffffffffffff82111761095a57604052565b90601f8019910116810190811067ffffffffffffffff82111761095a57604052565b602435906001600160a01b03821682036101fd57565b6004356001600160a01b03811681036101fd5790565b919082018092116109fb57565b634e487b7160e01b600052601160045260246000fd5b60005b838110610a245750506000910152565b8181015183820152602001610a14565b90602091610a4d81518092818552858086019101610a11565b601f01601f1916010190565b51906001600160a01b03821682036101fd57565b919082039182116109fb57565b908160209103126101fd575180151581036101fd5790565b906000604092835190610aa48261093e565b82825282856020938285820152015282828651610ac081610984565b828152015282546004805487516316e8334960e21b81523381840152602481018590529297929591906001600160a01b03906060908890604490829085165afa968715610d0c578397610ec1575b50610b1887610f1a565b988951610b2a888c01918251906109ee565b8015610eb457600154818110610e715790610b4491610a6d565b600155888801518651634a9fefc760e01b81529084168582015286816024817f000000000000000000000000000000000000000000000000000000000000000088165afa908115610e67579089918791610e2d575b5082519283610d62575b5050509088525081548451627eeac760e11b81523381850190815260208101889052918316918890829081906040010381855afa908115610d58578591610d2b575b50855189518982019081526020808c01516001600160a01b0316908201526040808c01519101529060608252608082019782891067ffffffffffffffff8a1117610d1657888852833b1561040857636c49c79360e11b895233608484015260a483015260c4820152608060e48201528491879182908490607f1990610c6e610104820182610a34565b0301925af18015610d0c5790869291610cf0575b6003548a51865163a9059cbb60e01b8152339481019485526020850191909152965086928390036040019183918691165af1918215610ce6575050610cc8575b50509190565b81610cde92903d106107985761078981836109a0565b503880610cc2565b51903d90823e3d90fd5b915091610cfe819495610970565b610202578392918591610c82565b84513d85823e3d90fd5b604186634e487b7160e01b6000525260246000fd5b90508781813d8311610d51575b610d4281836109a0565b810103126101fd575138610be5565b503d610d38565b86513d87823e3d90fd5b81861615610ddc576003549051895163a9059cbb60e01b81526001600160a01b039390931688840190815260208101919091529193508391829003604001908290899088165af18015610d5857610dbf575b505b38878180610ba3565b610dd590883d8a116107985761078981836109a0565b5038610db4565b505050826003541690813b156106be5785916024839289519485938492630852cd8d60e31b84528a8401525af18015610d5857610e1a575b50610db6565b610e2690949194610970565b9238610e14565b809250888092503d8311610e60575b610e4681836109a0565b810103126106be57610e5a89809201610a59565b38610b99565b503d610e3c565b87513d88823e3d90fd5b875162461bcd60e51b81528087018b9052601a60248201527f436f6d7075746564207265776172647320746f6f206c617267650000000000006044820152606490fd5b5050505050505050509190565b9096506060813d606011610f12575b81610edd606093836109a0565b810103126102025783805191610ef28361093e565b80518352610f01888201610a59565b888401520151848201529538610b0e565b3d9150610ed0565b602090604051610f2981610984565b60009281848093520152815480158015610fca575b610fb057610f4b9161102d565b90806020604051610f5b81610984565b828152015261029a90818302918383041483151715610f9c5750612710610f8491048092610a6d565b9060405191610f9283610984565b8252602082015290565b634e487b7160e01b81526011600452602490fd5b505060405190610fbf82610984565b808252602082015290565b508082511015610f3e565b6005546001600160a01b03163303610fe957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90815190818111156110675760409161104591610a6d565b910151908181029181830414901517156109fb57670de0b6b3a7640000900490565b50505060009056fea26469706673582212208f96dc3d1eefbf0c5a2e1c80fada8ccb233c10abf25e4575a551b2a71ed8244964736f6c63430008180033",
  "devdoc": {
    "details": "This contract inherits from RentsModule and HousingSFT.",
    "kind": "dev",
    "methods": {
      "claimRentReward(uint256)": {
        "returns": {
          "_0": "The updated HousingAttributes."
        }
      },
      "constructor": {
        "params": {
          "smartHousingAddr": "The address of the main SmartHousing contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveRent((address,uint256))": {
        "params": {
          "rentPayment": "The details of the rent payment."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rentClaimable((uint256,address,uint256))": {
        "params": {
          "attr": "The attributes of the token."
        },
        "returns": {
          "_0": "The amount of rent claimable."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "HousingProject Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRentReward(uint256)": {
        "notice": "Claims rent rewards for a given token."
      },
      "constructor": {
        "notice": "Initializes the HousingProject contract."
      },
      "receiveRent((address,uint256))": {
        "notice": "Receives rent payments and distributes rewards."
      },
      "rentClaimable((uint256,address,uint256))": {
        "notice": "Computes the amount of rent claimable for a given token."
      }
    },
    "notice": "Represents a unique real estate project within the SmartHousing ecosystem.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4208,
        "contract": "contracts/housing-project/HousingProject.sol:HousingProject",
        "label": "rewardPerShare",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4210,
        "contract": "contracts/housing-project/HousingProject.sol:HousingProject",
        "label": "rewardsReserve",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4212,
        "contract": "contracts/housing-project/HousingProject.sol:HousingProject",
        "label": "facilityManagementFunds",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4215,
        "contract": "contracts/housing-project/HousingProject.sol:HousingProject",
        "label": "housingToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20Burnable)2225"
      },
      {
        "astId": 4218,
        "contract": "contracts/housing-project/HousingProject.sol:HousingProject",
        "label": "projectSFT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(HousingSFT)4187"
      },
      {
        "astId": 7,
        "contract": "contracts/housing-project/HousingProject.sol:HousingProject",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20Burnable)2225": {
        "encoding": "inplace",
        "label": "contract ERC20Burnable",
        "numberOfBytes": "20"
      },
      "t_contract(HousingSFT)4187": {
        "encoding": "inplace",
        "label": "contract HousingSFT",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}