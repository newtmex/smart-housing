{
  "address": "0x8283C5385203C3175D3f06E3F28dD116C63A449b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "conibase",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "projectFunding",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__Exp2InputTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__LogInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TokenPayment[]",
              "name": "projectTokens",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "projectsShareCheckpoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shtRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkShtNonce",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct HstAttributes",
          "name": "attributes",
          "type": "tuple"
        }
      ],
      "name": "MintHstToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralId",
          "type": "uint256"
        }
      ],
      "name": "ReferralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_EPOCHS_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_EPOCHS_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectAddress",
          "type": "address"
        }
      ],
      "name": "addProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addProjectRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "hstTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coinbaseAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "createRefID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "createRefIDViaProxy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionStorage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFunds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "genesisEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectsTotalReceivedRents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastFundsDispatchEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtTotalStakeWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtStakingRewards",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "toShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "checkpoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProjectStakingRewards.Value",
          "name": "projectsStakingRewards",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "team",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "growth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "staking",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectsReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpAndListing",
              "type": "uint256"
            }
          ],
          "internalType": "struct Entities.Value",
          "name": "entityFunds",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochsAndPeriodsStorage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "genesis",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getNonces",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "getRawTokenAttributes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getReferrals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            }
          ],
          "internalType": "struct UserModule.ReferralInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getReferrer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "hasSFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hst",
      "outputs": [
        {
          "internalType": "contract HousingStakingToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment[]",
          "name": "projectTokens",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "projectsShareCheckpoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lkDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lkShtNonce",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TokenPayment[]",
              "name": "projectTokens",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "projectsShareCheckpoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shtRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkShtNonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct HstAttributes",
          "name": "attr",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "enum SmartHousing.Permissions",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "project",
          "type": "address"
        }
      ],
      "name": "projectDets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivedRents",
              "type": "uint256"
            }
          ],
          "internalType": "struct Distribution.ProjectDistributionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectFundingAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectsToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "payment",
          "type": "tuple"
        }
      ],
      "name": "setUpSHT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shtTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment[]",
          "name": "stakingTokens",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "epochsLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "attr",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf284e9bcb631f4dc8ba534528237b6ba7d9134c6d366b776cfb991b4383e39df",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0x8283C5385203C3175D3f06E3F28dD116C63A449b",
    "transactionIndex": 1,
    "gasUsed": "5965101",
    "logsBloom": "0x
    "blockHash": "0x5273e65f392acdf48d428fbf57354e2655bcd122a8f0c2e54f4c59161a3556f5",
    "transactionHash": "0xf284e9bcb631f4dc8ba534528237b6ba7d9134c6d366b776cfb991b4383e39df",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 36270674,
        "transactionHash": "0xf284e9bcb631f4dc8ba534528237b6ba7d9134c6d366b776cfb991b4383e39df",
        "address": "0x8283C5385203C3175D3f06E3F28dD116C63A449b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5273e65f392acdf48d428fbf57354e2655bcd122a8f0c2e54f4c59161a3556f5"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 36270674,
        "transactionHash": "0xf284e9bcb631f4dc8ba534528237b6ba7d9134c6d366b776cfb991b4383e39df",
        "address": "0x1e7BbddBD0B75B30B2C87aaF45CFFf1a176763e8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008283c5385203c3175d3f06e3f28dd116c63a449b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5273e65f392acdf48d428fbf57354e2655bcd122a8f0c2e54f4c59161a3556f5"
      }
    ],
    "blockNumber": 36270674,
    "cumulativeGasUsed": "6008952",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x254c81165e1BEF4d1B158Ac27A6B40F07e85187b",
    "0xe7B72eA97Be46a017C49e261B5036efa5EEFFa1f"
  ],
  "numDeployments": 2,
  "solcInputHash": "3f7696dcd180eba0f188ae64ff117803",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conibase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectFunding\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__LogInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment[]\",\"name\":\"projectTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"projectsShareCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkShtNonce\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct HstAttributes\",\"name\":\"attributes\",\"type\":\"tuple\"}],\"name\":\"MintHstToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralId\",\"type\":\"uint256\"}],\"name\":\"ReferralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_EPOCHS_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_EPOCHS_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectAddress\",\"type\":\"address\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addProjectRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hstTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinbaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"createRefID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"createRefIDViaProxy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesisEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectsTotalReceivedRents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFundsDispatchEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtTotalStakeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtStakingRewards\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"toShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"internalType\":\"struct ProjectStakingRewards.Value\",\"name\":\"projectsStakingRewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"growth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectsReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAndListing\",\"type\":\"uint256\"}],\"internalType\":\"struct Entities.Value\",\"name\":\"entityFunds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochsAndPeriodsStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"genesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getNonces\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getRawTokenAttributes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"internalType\":\"struct UserModule.ReferralInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"hasSFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hst\",\"outputs\":[{\"internalType\":\"contract HousingStakingToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment[]\",\"name\":\"projectTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"projectsShareCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkShtNonce\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment[]\",\"name\":\"projectTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"projectsShareCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkShtNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct HstAttributes\",\"name\":\"attr\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"enum SmartHousing.Permissions\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"}],\"name\":\"projectDets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedRents\",\"type\":\"uint256\"}],\"internalType\":\"struct Distribution.ProjectDistributionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFundingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectsToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"setUpSHT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shtTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment[]\",\"name\":\"stakingTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"epochsLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"attr\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows for fractional ownership and ease of investment. This innovative approach addresses the high costs and limited access to real estate investments in Abuja, Nigeria, making the market more inclusive and accessible. By selling tokens, SmartHousing provides developers with immediate access to liquid funds, ensuring the timely and quality completion of affordable development projects. The SmartHousing Contract is the main contract for the SmartHousing ecosystem. This contract owns and deploys HousingProject contracts, which will represent the properties owned and managed by the SmartHousing project. The management of ecosystem users will also be done in this contract.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"addProject(address)\":{\"params\":{\"projectAddress\":\"The address of the new project.\"}},\"addProjectRent(uint256)\":{\"details\":\"projectAddress is the msg.msg.sender which must be a recognised HousingProject contract\",\"params\":{\"amount\":\"The amount of rent received.\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"createRefID(uint256)\":{\"params\":{\"referrerId\":\"The ID of the referrer.\"},\"returns\":{\"_0\":\"The ID of the registered user.\"}},\"createRefIDViaProxy(address,uint256)\":{\"params\":{\"referrerId\":\"The ID of the referrer.\",\"userAddr\":\"The address of the user.\"},\"returns\":{\"_0\":\"The ID of the registered user.\"}},\"getReferrer(address)\":{\"params\":{\"userAddress\":\"The address of the user.\"},\"returns\":{\"referrerAddress\":\"The address of the referrer, address(0) if none.\",\"referrerId\":\"The ID of the referrer, 0 if none.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"title\":\"SmartHousing\",\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathUD60x18__Exp2InputTooBig(uint256)\":[{\"notice\":\"Emitted when the input is greater than 192.\"}],\"PRBMathUD60x18__LogInputTooSmall(uint256)\":[{\"notice\":\"Emitted when the input is less than 1.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addProject(address)\":{\"notice\":\"Adds a new project and sets its permissions.\"},\"addProjectRent(uint256)\":{\"notice\":\"Adds rent to a project and updates the distribution storage.\"},\"createRefID(uint256)\":{\"notice\":\"Register a new user or get the referral ID if already registered.\"},\"createRefIDViaProxy(address,uint256)\":{\"notice\":\"Register a new user via proxy or get the referral ID if already registered.\"},\"getReferrer(address)\":{\"notice\":\"Gets the referrer and referrer ID of a user.\"},\"update(address,uint256,uint256,bytes)\":{\"notice\":\"Burns all the NFT balance of user at nonce, creates new with balance and attributes\"}},\"notice\":\"SmartHousing leverages blockchain technology to revolutionize real estate investment and development by enabling the tokenization of properties.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/main/SmartHousing.sol\":\"SmartHousing\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/housing-project/CallsSmartHousing.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"../main/Interface.sol\\\";\\n\\nabstract contract CallsSmartHousing {\\n\\t/// @notice The address of the main SmartHousing contract.\\n\\taddress immutable smartHousingAddr;\\n\\n\\tconstructor(address smartHousingAddr_) {\\n\\t\\tsmartHousingAddr = smartHousingAddr_;\\n\\t}\\n\\n\\t/// @dev Gets the referrer address for a given original owner.\\n\\t/// @param userAddr The original owner of the token.\\n\\t/// @return The referrer address.\\n\\tfunction getReferrer(\\n\\t\\taddress userAddr\\n\\t) internal view returns (uint, address) {\\n\\t\\treturn IUserModule(smartHousingAddr).getReferrer(userAddr);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd2ded3c751d669f079d12e7381e586b747cb9ae1b6d9bd4dbd87fc9db3b0371c\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/housing-project/HousingProject.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./RentsModule.sol\\\";\\n\\n/// @title HousingProject Contract\\n/// @notice Represents a unique real estate project within the SmartHousing ecosystem.\\n/// @dev This contract inherits from RentsModule and HousingSFT.\\ncontract HousingProject is RentsModule, Ownable {\\n\\t/// @notice Initializes the HousingProject contract.\\n\\t/// @param smartHousingAddr The address of the main SmartHousing contract.\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddr\\n\\t) CallsSmartHousing(smartHousingAddr) {\\n\\t\\tprojectSFT = new HousingSFT(name, symbol);\\n\\t}\\n\\n\\tevent TokenIssued(address tokenAddress, string name, uint256 amountRaised);\\n\\n\\tfunction setTokenDetails(\\n\\t\\tuint256 amountRaised,\\n\\t\\taddress housingTokenAddr\\n\\t) external onlyOwner {\\n\\t\\trequire(amountRaised == 0, \\\"Token details set already\\\");\\n\\n\\t\\thousingToken = ERC20Burnable(housingTokenAddr);\\n\\n\\t\\tprojectSFT.setAmountRaised(amountRaised);\\n\\t\\tstring memory name = projectSFT.name();\\n\\n\\t\\temit TokenIssued(address(projectSFT), name, amountRaised);\\n\\t}\\n\\n\\tfunction getMaxSupply() public view returns (uint256) {\\n\\t\\treturn projectSFT.getMaxSupply();\\n\\t}\\n}\\n\",\"keccak256\":\"0x159e6b338c47a2dacbec1254f582826b5584c338919e6e6908aba986f9a98350\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/housing-project/HousingSFT.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"../modules/SFT.sol\\\";\\n\\nstruct HousingAttributes {\\n\\tuint256 rewardsPerShare;\\n\\taddress originalOwner;\\n\\tuint256 tokenWeight;\\n}\\n\\n/// @title Housing SFT\\n/// @notice This contract represents a semi-fungible token (SFT) for housing projects.\\n/// @dev This contract will be inherited by the HousingProject contract.\\ncontract HousingSFT is SFT {\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct HousingSFTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tHousingAttributes attributes;\\n\\t}\\n\\n\\t// FIXME this value should be unique to each contract, should depend on\\n\\t// the total amount expected to raise as it determines the amount of SFTs to\\n\\t// be minted for investors\\n\\tuint256 public constant MAX_SUPPLY = 1_000_000;\\n\\n\\t/// @notice The amount of fungible tokens collected from investors to finance the development of this housing project.\\n\\tuint256 public amountRaised;\\n\\n\\t/// @notice The current amount out of the `MAX_SUPPLY` of tokens minted.\\n\\tuint256 public totalSupply;\\n\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\tfunction setAmountRaised(uint256 amountRaised_) external onlyOwner {\\n\\t\\tamountRaised = amountRaised_;\\n\\t}\\n\\n\\tmodifier canMint() {\\n\\t\\taddress sftOwner = owner();\\n\\n\\t\\trequire(\\n\\t\\t\\tOwnable(sftOwner).owner() == _msgSender(),\\n\\t\\t\\t\\\"not allowed to mint\\\"\\n\\t\\t);\\n\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Mints SFT tokens for a depositor based on the amount of deposit.\\n\\t/// @param depositAmt The amount of fungible token deposited.\\n\\t/// @param depositor The address of the depositor.\\n\\tfunction mintSFT(\\n\\t\\tuint256 depositAmt,\\n\\t\\taddress depositor,\\n\\t\\tuint256 amount_raised\\n\\t) external canMint returns (uint256) {\\n\\t\\t// TODO remove after demo due to not beign able to move blocks in public networks\\n\\t\\t{\\n\\t\\t\\tamountRaised = amount_raised;\\n\\t\\t}\\n\\n\\t\\tuint256 totalDeposits = amountRaised;\\n\\t\\tuint256 maxShares = MAX_SUPPLY;\\n\\n\\t\\trequire(totalDeposits > 0, \\\"HousingSFT: No deposits recorded\\\");\\n\\n\\t\\tuint256 mintShare = (depositAmt * maxShares) / totalDeposits;\\n\\t\\trequire(mintShare > 0, \\\"HousingSFT: Computed token shares is invalid\\\");\\n\\n\\t\\ttotalSupply += mintShare;\\n\\t\\trequire(totalSupply <= MAX_SUPPLY, \\\"HousingSFT: Max supply exceeded\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tHousingAttributes({\\n\\t\\t\\t\\trewardsPerShare: 0, // Should be 0 since they have never claimed any rent rewards\\n\\t\\t\\t\\toriginalOwner: depositor,\\n\\t\\t\\t\\ttokenWeight: mintShare\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\treturn _mint(depositor, mintShare, attributes, \\\"\\\");\\n\\t}\\n\\n\\t/// @notice Checks if an address owns this HousingSFT and returns the attributes.\\n\\t/// @param owner The address to check the balance of.\\n\\t/// @return `HousingAttributes` if the owner has a positive balance of the token, panics otherwise.\\n\\tfunction getUserSFT(\\n\\t\\taddress owner,\\n\\t\\tuint256 nonce\\n\\t) public view returns (HousingAttributes memory) {\\n\\t\\trequire(\\n\\t\\t\\thasSFT(owner, nonce),\\n\\t\\t\\t\\\"HouisingSFT: No tokens found for user at nonce\\\"\\n\\t\\t);\\n\\n\\t\\treturn abi.decode(getRawTokenAttributes(nonce), (HousingAttributes));\\n\\t}\\n\\n\\tfunction getMaxSupply() public pure returns (uint256) {\\n\\t\\treturn MAX_SUPPLY;\\n\\t}\\n\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (HousingSFTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tHousingSFTBalance[] memory balance = new HousingSFTBalance[](\\n\\t\\t\\t_sftBals.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = HousingSFTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (HousingAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction tokenDetails()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (string memory, string memory, uint256)\\n\\t{\\n\\t\\treturn (name(), symbol(), getMaxSupply());\\n\\t}\\n}\\n\",\"keccak256\":\"0x8fbbe8d670bc777eed8587d0a8b11acf1d7b40b9ae631fee4abc929f4275c160\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/housing-project/NewHousingProjectLib.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport { HousingProject } from \\\"./HousingProject.sol\\\";\\n\\nlibrary NewHousingProject {\\n\\tfunction create(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddr\\n\\t) external returns (HousingProject) {\\n\\t\\treturn new HousingProject(name, symbol, smartHousingAddr);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0ad286112bdc35e59e9424ffda000b7b6b582e228cca1cafc2b9cab28193628f\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/housing-project/RentsModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"./HousingSFT.sol\\\";\\nimport \\\"./RewardSharing.sol\\\";\\nimport \\\"../lib/TokenPayments.sol\\\";\\nimport \\\"./CallsSmartHousing.sol\\\";\\n\\n/// @title Rents Module\\n/// @notice Handles rent payments, reward calculations, and distribution for Housing projects.\\n/// @dev This abstract contract should be inherited by the HousingProject contract.\\nabstract contract RentsModule is CallsSmartHousing {\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\tusing RewardShares for rewardshares;\\n\\n\\tuint256 public rewardPerShare;\\n\\tuint256 public rewardsReserve;\\n\\tuint256 public facilityManagementFunds;\\n\\n\\tERC20Burnable housingToken;\\n\\tHousingSFT public projectSFT;\\n\\n\\t/// @notice Receives rent payments and distributes rewards.\\n\\t/// @param rentPayment The details of the rent payment.\\n\\tfunction receiveRent(ERC20TokenPayment calldata rentPayment) external {\\n\\t\\t// TODO set the appropriate rent per Project\\n\\t\\trequire(\\n\\t\\t\\trentPayment.amount > 0,\\n\\t\\t\\t\\\"RentsModule: Insufficient rent amount\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\trentPayment.token == housingToken,\\n\\t\\t\\t\\\"RentsModule: Invalid rent payment token\\\"\\n\\t\\t);\\n\\t\\trentPayment.receiveERC20();\\n\\n\\t\\tuint256 rentReward = (rentPayment.amount * 75) / 100;\\n\\t\\tuint256 ecosystemReward = (rentPayment.amount * 18) / 100;\\n\\t\\tuint256 facilityReward = (rentPayment.amount * 7) / 100;\\n\\n\\t\\tuint256 allShares = projectSFT.getMaxSupply();\\n\\t\\tuint256 rpsIncrease = (rentReward * DIVISION_SAFETY_CONST) / allShares;\\n\\n\\t\\trewardPerShare += rpsIncrease;\\n\\t\\trewardsReserve += rentReward;\\n\\t\\tfacilityManagementFunds += facilityReward;\\n\\n\\t\\thousingToken.burn(ecosystemReward);\\n\\t\\tISmartHousing(smartHousingAddr).addProjectRent(rentPayment.amount);\\n\\t}\\n\\n\\t/// @notice Claims rent rewards for a given token.\\n\\t/// @return The updated HousingAttributes.\\n\\tfunction claimRentReward(\\n\\t\\tuint256 nonce\\n\\t) external returns (HousingAttributes memory, rewardshares memory) {\\n\\t\\taddress caller = msg.sender;\\n\\t\\tuint256 currentRPS = rewardPerShare;\\n\\n\\t\\tHousingAttributes memory attr = projectSFT.getUserSFT(caller, nonce);\\n\\t\\trewardshares memory rewardShares = computeRewardShares(attr);\\n\\t\\tuint256 totalReward = rewardShares.total();\\n\\n\\t\\tif (totalReward == 0) {\\n\\t\\t\\t// Fail silently\\n\\t\\t\\treturn (attr, rewardShares);\\n\\t\\t}\\n\\n\\t\\trequire(rewardsReserve >= totalReward, \\\"Computed rewards too large\\\");\\n\\n\\t\\trewardsReserve -= totalReward;\\n\\n\\t\\t// We use original owner since we are certain they are registered\\n\\t\\t(, address referrer) = getReferrer(attr.originalOwner);\\n\\t\\tif (rewardShares.referrerValue > 0) {\\n\\t\\t\\tif (referrer != address(0)) {\\n\\t\\t\\t\\thousingToken.transfer(referrer, rewardShares.referrerValue); // Send to referrer\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thousingToken.burn(rewardShares.referrerValue); // Burn to add to ecosystem reward\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tattr.rewardsPerShare = currentRPS;\\n\\n\\t\\tprojectSFT.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\tnonce,\\n\\t\\t\\tprojectSFT.balanceOf(caller, nonce),\\n\\t\\t\\tabi.encode(attr)\\n\\t\\t);\\n\\n\\t\\thousingToken.transfer(caller, rewardShares.userValue); // Send to user\\n\\n\\t\\treturn (attr, rewardShares);\\n\\t}\\n\\n\\t/// @notice Computes the amount of rent claimable for a given token.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return The amount of rent claimable.\\n\\tfunction rentClaimable(\\n\\t\\tHousingAttributes memory attr\\n\\t) public view returns (uint256) {\\n\\t\\treturn computeRewardShares(attr).userValue;\\n\\t}\\n\\n\\t/// @dev Computes the reward shares for a given token.\\n\\t/// @param attr The attributes of the token.\\n\\t/// @return The computed RewardShares.\\n\\tfunction computeRewardShares(\\n\\t\\tHousingAttributes memory attr\\n\\t) internal view returns (rewardshares memory) {\\n\\t\\tuint256 currentRPS = rewardPerShare;\\n\\n\\t\\tif (currentRPS == 0 || attr.rewardsPerShare >= currentRPS) {\\n\\t\\t\\treturn rewardshares({ userValue: 0, referrerValue: 0 });\\n\\t\\t}\\n\\n\\t\\tuint256 reward = computeReward(attr, currentRPS);\\n\\n\\t\\treturn splitReward(reward);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe97c64b7d4f5a945493aa8492c4412248f60ec1e6e8cd74e3f805e40cc672768\",\"license\":\"MIT\"},\"contracts/housing-project/RewardSharing.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"./HousingSFT.sol\\\";\\n\\nuint256 constant DIVISION_SAFETY_CONST = 1_000_000_000_000_000_000;\\n\\nstruct rewardshares {\\n\\tuint256 userValue;\\n\\tuint256 referrerValue;\\n}\\n\\nlibrary RewardShares {\\n\\tfunction total(rewardshares memory self) internal pure returns (uint256) {\\n\\t\\treturn self.userValue + self.referrerValue;\\n\\t}\\n}\\n\\nfunction splitReward(uint256 reward) pure returns (rewardshares memory) {\\n\\tuint256 referrerValue = (reward * 6_66) / 100_00; // would amount to approximately 5% of grand total\\n\\tuint256 userValue = reward - referrerValue;\\n\\n\\treturn rewardshares(userValue, referrerValue);\\n}\\n\\nfunction computeReward(\\n\\tHousingAttributes memory attr,\\n\\tuint256 contractRPS\\n) pure returns (uint256) {\\n\\tif (contractRPS <= attr.rewardsPerShare) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\treturn\\n\\t\\t((contractRPS - attr.rewardsPerShare) * attr.tokenWeight) /\\n\\t\\tDIVISION_SAFETY_CONST;\\n}\\n\",\"keccak256\":\"0x9f07d2b3ee49b91e12ad7ce9ba248ab7dd30bc2efc4238a594e681d3f0348e54\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/lib/EpochsAndPeriods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/// @title Epochs and Periods Management Library\\n/// @notice This library provides functions to manage and calculate epochs and periods based on a genesis timestamp and an epoch length.\\n/// @dev The epoch length is specified in hours, and the period is calculated as 30 epochs.\\nlibrary EpochsAndPeriods {\\n\\tstruct Storage {\\n\\t\\tuint256 genesis;\\n\\t\\tuint256 epochLength;\\n\\t}\\n\\n\\t/// @notice Initializes the storage with the current timestamp as the genesis and sets the epoch length.\\n\\t/// @param self The storage struct to initialize.\\n\\t/// @param _epochLength The length of an epoch in hours. This determines how long each epoch lasts.\\n\\t/// @dev This function should be called in the contract constructor to set the initial genesis timestamp and epoch length.\\n\\tfunction initialize(Storage storage self, uint256 _epochLength) internal {\\n\\t\\tself.genesis = block.timestamp;\\n\\t\\tself.epochLength = _epochLength;\\n\\t}\\n\\n\\t/// @notice Returns the current epoch based on the genesis timestamp and epoch length.\\n\\t/// @param self The storage struct containing the genesis timestamp and epoch length.\\n\\t/// @return The current epoch number.\\n\\t/// @dev The epoch is calculated by dividing the time elapsed since genesis by the epoch length in seconds.\\n\\tfunction currentEpoch(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\trequire(self.genesis > 0, \\\"Invalid genesis timestamp\\\");\\n\\t\\treturn (block.timestamp - self.genesis) / (self.epochLength * 60 * 60);\\n\\t}\\n\\n\\t/// @notice Returns the current period based on the current epoch.\\n\\t/// @param self The storage struct containing the genesis timestamp and epoch length.\\n\\t/// @return The current period number.\\n\\t/// @dev The period is calculated by dividing the current epoch by 30.\\n\\tfunction currentPeriod(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\treturn currentEpoch(self) / 30;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1f41385e5d5eb0a27b0b7262b8caf99e89806036a8fd6c512bc123e7eb1fbbbd\",\"license\":\"MIT\"},\"contracts/lib/LkSHTAttributes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LkSHTAttributes\\n * @dev Library for handling attributes and unlocking of the Locked SmartHousing Token.\\n */\\nlibrary LkSHTAttributes {\\n\\tusing SafeMath for uint256;\\n\\n\\t// TODO use this for mainnet uint256 constant LOCK_DURATION = 3 * 365 days; // 3 years\\n\\tuint256 constant LOCK_DURATION = 5 hours;\\n\\n\\tstruct Attributes {\\n\\t\\tuint256 initialAmount;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 startTimestamp;\\n\\t\\tuint256 endTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new attributes for a Locked SmartHousing Token.\\n\\t * @param startTimestamp The start time of the lock.\\n\\t * @param amount The amount of SmartHousing Tokens locked.\\n\\t * @return attributes The initialized attributes.\\n\\t */\\n\\tfunction newAttributes(\\n\\t\\tuint256 startTimestamp,\\n\\t\\tuint256 amount\\n\\t) internal pure returns (Attributes memory) {\\n\\t\\treturn\\n\\t\\t\\tAttributes({\\n\\t\\t\\t\\tinitialAmount: amount,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tstartTimestamp: startTimestamp,\\n\\t\\t\\t\\tendTimestamp: startTimestamp.add(LOCK_DURATION)\\n\\t\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates and deducts the unlocked amount based on the elapsed time.\\n\\t * @param self The attributes to update.\\n\\t * @return unlockedAmount The amount of tokens unlocked.\\n\\t */\\n\\tfunction unlockMatured(\\n\\t\\tAttributes memory self\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 unlockedAmount, Attributes memory newSelf)\\n\\t{\\n\\t\\tuint256 elapsed = elapsedTime(self);\\n\\t\\tunlockedAmount = self.amount.mul(elapsed).div(LOCK_DURATION);\\n\\n\\t\\tself.amount = self.amount.sub(unlockedAmount);\\n\\t\\tnewSelf = self;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the elapsed time since the lock started.\\n\\t * @param self The attributes to use.\\n\\t * @return elapsedTime The elapsed time in seconds.\\n\\t */\\n\\tfunction elapsedTime(\\n\\t\\tAttributes memory self\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 currentTime = block.timestamp;\\n\\t\\tif (currentTime >= self.endTimestamp) {\\n\\t\\t\\treturn LOCK_DURATION;\\n\\t\\t} else {\\n\\t\\t\\treturn currentTime.sub(self.startTimestamp);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xbaf851bef9603c72b3cce96d93f8f243f36187d31c8c94233101d802b9ae129d\",\"license\":\"MIT\"},\"contracts/lib/ProjectStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenPayments.sol\\\";\\n\\nlibrary ProjectStorage {\\n\\tusing SafeMath for uint256;\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing ProjectStorage for Data;\\n\\n\\tenum Status {\\n\\t\\tFundingPeriod,\\n\\t\\tSuccessful,\\n\\t\\tFailed\\n\\t}\\n\\n\\tstruct Data {\\n\\t\\tuint256 id; // Unique identifier for the project\\n\\t\\taddress tokenAddress;\\n\\t\\taddress projectAddress; // Address of the deployed HousingProject contract\\n\\t\\tuint256 fundingGoal; // Target funding amount for the project\\n\\t\\tuint256 fundingDeadline; // Deadline timestamp for the project funding\\n\\t\\taddress fundingToken; // Address of the ERC20 token used for funding\\n\\t\\tuint256 collectedFunds; // Amount of funds collected for the project\\n\\t}\\n\\n\\tfunction status(Data storage self) internal view returns (Status) {\\n\\t\\tif (self.collectedFunds >= self.fundingGoal) {\\n\\t\\t\\treturn Status.Successful;\\n\\t\\t} else if (block.timestamp < self.fundingDeadline) {\\n\\t\\t\\treturn Status.FundingPeriod;\\n\\t\\t} else {\\n\\t\\t\\treturn Status.Failed;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction createNew(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage projectsId,\\n\\t\\tuint256 projectCount,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline,\\n\\t\\taddress fundingToken,\\n\\t\\taddress projectAddress,\\n\\t\\taddress tokenAddress\\n\\t) internal returns (Data memory) {\\n\\t\\trequire(fundingGoal > 0, \\\"Funding goal must be more than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tfundingDeadline > block.timestamp,\\n\\t\\t\\t\\\"Deadline can't be in the past\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 newId = projectCount.add(1);\\n\\n\\t\\tData memory newProjectData = Data({\\n\\t\\t\\tid: newId,\\n\\t\\t\\tprojectAddress: projectAddress,\\n\\t\\t\\tfundingGoal: fundingGoal,\\n\\t\\t\\tfundingDeadline: fundingDeadline,\\n\\t\\t\\tfundingToken: fundingToken,\\n\\t\\t\\tcollectedFunds: 0,\\n\\t\\t\\ttokenAddress: tokenAddress\\n\\t\\t});\\n\\n\\t\\tprojects[newId] = newProjectData;\\n\\t\\tprojectsId[newProjectData.projectAddress] = newProjectData.id;\\n\\n\\t\\treturn newProjectData;\\n\\t}\\n\\n\\tfunction fund(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage usersDeposit,\\n\\t\\tuint256 projectId,\\n\\t\\taddress depositor,\\n\\t\\tTokenPayment calldata payment\\n\\t) internal {\\n\\t\\trequire(payment.amount > 0, \\\"Invalid funding amount\\\");\\n\\n\\t\\tData storage project = projects[projectId];\\n\\n\\t\\trequire(\\n\\t\\t\\tproject.status() == Status.FundingPeriod,\\n\\t\\t\\t\\\"Cannot fund project after deadline\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\taddress(payment.token) == project.fundingToken,\\n\\t\\t\\t\\\"Wrong token payment\\\"\\n\\t\\t);\\n\\t\\tpayment.receiveToken();\\n\\n\\t\\tproject.collectedFunds = project.collectedFunds.add(payment.amount);\\n\\t\\tusersDeposit[depositor] = usersDeposit[depositor].add(payment.amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Retrieves and updates the user's deposit for a specific project.\\n\\t * @param projectId The ID of the project to retrieve the deposit for.\\n\\t * @param depositor The address of the depositor.\\n\\t * @return (ProjectStorage.Data, uint256) The project data and deposit amount.\\n\\t */\\n\\tfunction takeDeposit(\\n\\t\\tmapping(uint256 => Data) storage projects,\\n\\t\\tmapping(address => uint256) storage usersDeposit,\\n\\t\\tuint256 projectId,\\n\\t\\taddress depositor\\n\\t) internal returns (ProjectStorage.Data memory, uint256) {\\n\\t\\tProjectStorage.Data storage project = projects[projectId];\\n\\t\\trequire(project.id != 0, \\\"Invalid project ID\\\");\\n\\t\\trequire(\\n\\t\\t\\tproject.status() == Status.Successful,\\n\\t\\t\\t\\\"Project not yet successful\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 depositAmount = usersDeposit[depositor];\\n\\t\\trequire(depositAmount > 0, \\\"No deposit found\\\");\\n\\n\\t\\t// Update the deposit amount to zero\\n\\t\\tusersDeposit[depositor] = 0;\\n\\n\\t\\treturn (project, depositAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x652aab2dc03764c430b91f35e908430208d6a1bd27a4cc8060adb1ec7f249ad5\",\"license\":\"MIT\"},\"contracts/lib/TokenPayments.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SFT } from \\\"../modules/SFT.sol\\\";\\n\\nstruct ERC20TokenPayment {\\n\\tIERC20 token;\\n\\tuint256 amount;\\n}\\n\\nstruct TokenPayment {\\n\\taddress token;\\n\\tuint256 amount;\\n\\tuint256 nonce;\\n}\\n\\nlibrary TokenPayments {\\n\\tfunction accept(ERC20TokenPayment calldata self) internal {\\n\\t\\tTokenPayments.receiveERC20(self, msg.sender);\\n\\t}\\n\\n\\tfunction receiveERC20(ERC20TokenPayment calldata payment) internal {\\n\\t\\tTokenPayments.receiveERC20(payment, msg.sender);\\n\\t}\\n\\n\\tfunction receiveERC20(\\n\\t\\tERC20TokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\tpayment.token.transferFrom(from, address(this), payment.amount);\\n\\t}\\n\\n\\t// Receives both Native, SFTs and ERC20; ERC20 have nonce as 0, Native coins have address 0 as token value\\n\\tfunction receiveToken(TokenPayment memory payment) internal {\\n\\t\\treceiveToken(payment, msg.sender);\\n\\t}\\n\\n\\tfunction receiveToken(TokenPayment memory payment, address from) internal {\\n\\t\\tif (payment.token == address(0)) {\\n\\t\\t\\t// Native payment\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpayment.amount == msg.value,\\n\\t\\t\\t\\t\\\"expected payment amount must equal sent amount\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfrom == msg.sender,\\n\\t\\t\\t\\t\\\"can receive native payment only from caller\\\"\\n\\t\\t\\t);\\n\\t\\t\\t\\n\\t\\t\\t// Nothing to do again since the VM will handle balance movements\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\tIERC20(payment.token).transferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.amount\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x06bd73e8da1bde18d9aaf6d4b6a1bdec6e0718af6354fe2d7ce87251d6fd1ac5\",\"license\":\"MIT\"},\"contracts/main/HST.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport { TokenPayment } from \\\"../lib/TokenPayments.sol\\\";\\nimport { SFT } from \\\"../modules/SFT.sol\\\";\\n\\nlibrary NewHousingStakingToken {\\n\\tfunction create() external returns (HousingStakingToken) {\\n\\t\\treturn new HousingStakingToken();\\n\\t}\\n}\\n\\nstruct HstAttributes {\\n\\tTokenPayment[] projectTokens;\\n\\tuint256 projectsShareCheckpoint;\\n\\tuint256 shtRewardPerShare;\\n\\tuint256 shtAmount;\\n\\tuint256 stakeWeight;\\n\\tuint256 lkDuration;\\n\\tuint256 lkShtNonce;\\n}\\n\\ncontract HousingStakingToken is SFT {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint256 public constant MIN_EPOCHS_LOCK = 180;\\n\\tuint256 public constant MAX_EPOCHS_LOCK = 1080;\\n\\n\\tevent MintHstToken(\\n\\t\\taddress indexed to,\\n\\t\\tuint256 nonce,\\n\\t\\tHstAttributes attributes\\n\\t);\\n\\n\\tconstructor() SFT(\\\"Housing Staking Token\\\", \\\"HST\\\") {}\\n\\n\\tfunction mint(\\n\\t\\tTokenPayment[] calldata projectTokens,\\n\\t\\tuint256 projectsShareCheckpoint,\\n\\t\\tuint256 shtRewardPerShare,\\n\\t\\tuint256 lkDuration,\\n\\t\\tuint256 shtAmount,\\n\\t\\tuint256 lkShtNonce\\n\\t) external onlyOwner returns (HstAttributes memory attr) {\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\t// Validate lock duration\\n\\t\\trequire(\\n\\t\\t\\tlkDuration >= MIN_EPOCHS_LOCK && lkDuration <= MAX_EPOCHS_LOCK,\\n\\t\\t\\t\\\"Invalid lock duration\\\"\\n\\t\\t);\\n\\n\\t\\trequire(shtAmount > 0 || lkShtNonce > 0, \\\"Must send SHT\\\");\\n\\t\\tuint256 projectTokenCount = projectTokens.length;\\n\\t\\trequire(\\n\\t\\t\\tprojectTokenCount > 0 && projectTokenCount <= 10,\\n\\t\\t\\t\\\"Must send project tokens of approved number\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 stakeWeight = shtAmount.mul(lkDuration);\\n\\t\\tattr = HstAttributes({\\n\\t\\t\\tprojectTokens: projectTokens,\\n\\t\\t\\tprojectsShareCheckpoint: projectsShareCheckpoint,\\n\\t\\t\\tshtRewardPerShare: shtRewardPerShare,\\n\\t\\t\\tshtAmount: shtAmount,\\n\\t\\t\\tstakeWeight: stakeWeight,\\n\\t\\t\\tlkDuration: lkDuration,\\n\\t\\t\\tlkShtNonce: lkShtNonce\\n\\t\\t});\\n\\n\\t\\t// Mint the HST token\\n\\t\\tuint256 nonce = _mint(caller, 1, abi.encode(attr), \\\"\\\");\\n\\n\\t\\temit MintHstToken(caller, nonce, attr);\\n\\t}\\n}\\n\",\"keccak256\":\"0x4f0e5e502fd02a59ed29b264e0894e4a79230d59a42e6f1fe389c5078d3f6d0d\",\"license\":\"MIT\"},\"contracts/main/Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"../lib/TokenPayments.sol\\\";\\n\\ninterface ISmartHousing {\\n\\tfunction addProjectRent(uint256 amount) external;\\n\\n\\tfunction createRefIDViaProxy(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) external returns (uint256);\\n\\n\\tfunction addProject(address projectAddress) external;\\n\\n\\tfunction setUpSHT(ERC20TokenPayment calldata payment) external;\\n}\\n\\ninterface IUserModule {\\n\\tfunction getReferrer(address user) external view returns (uint, address);\\n}\\n\",\"keccak256\":\"0x066719eed5c5ff2394d78ce027aada5a8555713c9f4abf8b5135975981ba9989\",\"license\":\"MIT\"},\"contracts/main/SmartHousing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"../lib/TokenPayments.sol\\\";\\nimport \\\"../modules/sht-module/SHT.sol\\\";\\nimport \\\"../project-funding/ProjectFunding.sol\\\";\\n\\nimport \\\"./Interface.sol\\\";\\nimport \\\"./User.sol\\\";\\n\\nimport { Distribution } from \\\"./distribution/Storage.sol\\\";\\nimport { EpochsAndPeriods } from \\\"../lib/EpochsAndPeriods.sol\\\";\\nimport { HousingStakingToken, NewHousingStakingToken, HstAttributes } from \\\"./HST.sol\\\";\\n\\nimport { HousingProject } from \\\"../housing-project/HousingProject.sol\\\";\\nimport { rewardshares } from \\\"../housing-project/RewardSharing.sol\\\";\\n\\n/// @title SmartHousing\\n/// @notice SmartHousing leverages blockchain technology to revolutionize real estate investment and development by enabling the tokenization of properties.\\n/// @dev This contract allows for fractional ownership and ease of investment.\\n/// This innovative approach addresses the high costs and limited access to real estate investments in Abuja, Nigeria, making the market more inclusive and accessible.\\n/// By selling tokens, SmartHousing provides developers with immediate access to liquid funds, ensuring the timely and quality completion of affordable development projects.\\n/// The SmartHousing Contract is the main contract for the SmartHousing ecosystem.\\n/// This contract owns and deploys HousingProject contracts, which will represent the properties owned and managed by the SmartHousing project.\\n/// The management of ecosystem users will also be done in this contract.\\ncontract SmartHousing is\\n\\tISmartHousing,\\n\\tOwnable,\\n\\tUserModule,\\n\\tHousingStakingToken\\n{\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\tusing Distribution for Distribution.Storage;\\n\\tusing EpochsAndPeriods for EpochsAndPeriods.Storage;\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing SafeMath for uint256;\\n\\n\\taddress public projectFundingAddress;\\n\\taddress public coinbaseAddress;\\n\\taddress public shtTokenAddress;\\n\\tHousingStakingToken public hst;\\n\\n\\tDistribution.Storage public distributionStorage;\\n\\tEpochsAndPeriods.Storage public epochsAndPeriodsStorage;\\n\\n\\tenum Permissions {\\n\\t\\tNONE,\\n\\t\\tHOUSING_PROJECT\\n\\t}\\n\\n\\tmapping(address => Permissions) public permissions;\\n\\tEnumerableSet.AddressSet private _projectsToken; // Enumerable list of project addresses\\n\\n\\tconstructor(address conibase, address projectFunding) {\\n\\t\\tcoinbaseAddress = conibase;\\n\\t\\tprojectFundingAddress = projectFunding;\\n\\t\\thst = NewHousingStakingToken.create();\\n\\n\\t\\t// TODO use this for mainnet epochsAndPeriodsStorage.initialize(24); // One epoch will span 24 hours\\n\\t\\tepochsAndPeriodsStorage.initialize(1); // One epoch will span 1 hour\\n\\t}\\n\\n\\t/// @notice Register a new user via proxy or get the referral ID if already registered.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The ID of the registered user.\\n\\tfunction createRefIDViaProxy(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) external onlyProjectFunding returns (uint256) {\\n\\t\\treturn _createOrGetUserId(userAddr, referrerId);\\n\\t}\\n\\n\\tfunction setUpSHT(ERC20TokenPayment calldata payment) external {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == coinbaseAddress,\\n\\t\\t\\t\\\"Caller is not the coinbase address\\\"\\n\\t\\t);\\n\\n\\t\\t// Ensure that the SHT token has not been set already\\n\\t\\trequire(shtTokenAddress == address(0), \\\"SHT token already set\\\");\\n\\t\\tshtTokenAddress = address(payment.token);\\n\\n\\t\\t// Verify that the correct amount of SHT has been sent\\n\\t\\trequire(\\n\\t\\t\\tpayment.amount == SHT.ECOSYSTEM_DISTRIBUTION_FUNDS,\\n\\t\\t\\t\\\"Must send all ecosystem funds\\\"\\n\\t\\t);\\n\\t\\tpayment.accept();\\n\\n\\t\\t// Set the total funds in distribution storage\\n\\t\\tdistributionStorage.setTotalFunds(\\n\\t\\t\\tepochsAndPeriodsStorage,\\n\\t\\t\\tpayment.amount\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Adds a new project and sets its permissions.\\n\\t/// @param projectAddress The address of the new project.\\n\\tfunction addProject(address projectAddress) external onlyProjectFunding {\\n\\t\\t_setPermissions(projectAddress, Permissions.HOUSING_PROJECT);\\n\\t\\t_projectsToken.add(projectAddress); // Register the project address\\n\\t}\\n\\n\\t/// @notice Adds rent to a project and updates the distribution storage.\\n\\t/// @dev projectAddress is the msg.msg.sender which must be a recognised HousingProject contract\\n\\t/// @param amount The amount of rent received.\\n\\tfunction addProjectRent(uint256 amount) external onlyHousingProject {\\n\\t\\taddress projectAddress = msg.sender;\\n\\t\\tdistributionStorage.addProjectRent(projectAddress, amount);\\n\\t}\\n\\n\\tfunction stake(\\n\\t\\tTokenPayment[] calldata stakingTokens,\\n\\t\\tuint256 epochsLock,\\n\\t\\tuint256 referrerId\\n\\t) external payable {\\n\\t\\trequire(\\n\\t\\t\\tepochsLock >= MIN_EPOCHS_LOCK && epochsLock <= MAX_EPOCHS_LOCK,\\n\\t\\t\\t\\\"Invalid epochs lock period\\\"\\n\\t\\t);\\n\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\t// Try create ID\\n\\t\\t_createOrGetUserId(caller, referrerId);\\n\\n\\t\\t// Generate rewards before staking\\n\\t\\tdistributionStorage.generateRewards(epochsAndPeriodsStorage);\\n\\n\\t\\tHstAttributes memory newAttr = _mintHstToken(\\n\\t\\t\\tstakingTokens,\\n\\t\\t\\tdistributionStorage.projectsStakingRewards.checkpoint,\\n\\t\\t\\tdistributionStorage.shtRewardPerShare,\\n\\t\\t\\tepochsLock,\\n\\t\\t\\tshtTokenAddress,\\n\\t\\t\\taddress(ProjectFunding(projectFundingAddress).lkSht())\\n\\t\\t);\\n\\n\\t\\tdistributionStorage.enterStaking(newAttr.stakeWeight);\\n\\t}\\n\\n\\tfunction claimRewards(uint256 hstTokenId, uint256 referrerId) external {\\n\\t\\taddress caller = msg.sender;\\n\\t\\t_createOrGetUserId(caller, referrerId);\\n\\n\\t\\tuint256 callerHstBal = hst.balanceOf(caller, hstTokenId);\\n\\n\\t\\trequire(callerHstBal > 0, \\\"Caller does not own the hst token\\\");\\n\\n\\t\\tdistributionStorage.generateRewards(epochsAndPeriodsStorage);\\n\\n\\t\\t(uint256 claimedSHT, HstAttributes memory hstAttr) = distributionStorage\\n\\t\\t\\t.claimRewards(\\n\\t\\t\\t\\tabi.decode(getRawTokenAttributes(hstTokenId), (HstAttributes))\\n\\t\\t\\t);\\n\\t\\tuint256 rentRewards = 0;\\n\\n\\t\\t// Claim rent rewards from HousingProjects\\n\\t\\tfor (uint256 i = 0; i < hstAttr.projectTokens.length; i++) {\\n\\t\\t\\tTokenPayment memory projectToken = hstAttr.projectTokens[i];\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tprojectToken.token != address(0),\\n\\t\\t\\t\\t\\\"Invalid project address\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Call the external contract's claimRentReward function\\n\\t\\t\\t(, rewardshares memory rewardShares) = HousingProject(\\n\\t\\t\\t\\tprojectToken.token\\n\\t\\t\\t).claimRentReward(projectToken.nonce);\\n\\n\\t\\t\\trentRewards = rentRewards.add(rewardShares.userValue);\\n\\t\\t}\\n\\n\\t\\t// Update the attributes in the hst token\\n\\t\\thst.update(caller, hstTokenId, callerHstBal, abi.encode(hstAttr));\\n\\n\\t\\tERC20Burnable shtToken = ERC20Burnable(shtTokenAddress);\\n\\n\\t\\tif (claimedSHT > 0) {\\n\\t\\t\\tuint256 referrerValue = claimedSHT.mul(25).div(1000);\\n\\t\\t\\tclaimedSHT = claimedSHT.sub(referrerValue);\\n\\n\\t\\t\\t// Do referrer operations\\n\\t\\t\\t(, address referrerAddr) = getReferrer(caller);\\n\\t\\t\\tif (referrerAddr != address(0)) {\\n\\t\\t\\t\\tshtToken.transfer(referrerAddr, referrerValue);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tshtToken.burn(referrerValue);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tshtToken.transfer(caller, claimedSHT.add(rentRewards));\\n\\t}\\n\\n\\tfunction projectDets(\\n\\t\\taddress project\\n\\t) public view returns (Distribution.ProjectDistributionData memory) {\\n\\t\\treturn distributionStorage.projectDets[project];\\n\\t}\\n\\n\\tfunction projectsToken() public view returns (address[] memory) {\\n\\t\\treturn _projectsToken.values();\\n\\t}\\n\\n\\t/// @notice Sets the permissions for a given address.\\n\\t/// @param addr The address to set permissions for.\\n\\t/// @param perm The permissions to set.\\n\\tfunction _setPermissions(address addr, Permissions perm) internal {\\n\\t\\tpermissions[addr] = perm;\\n\\t}\\n\\n\\tfunction _mintHstToken(\\n\\t\\tTokenPayment[] calldata payments,\\n\\t\\tuint256 projectsShareCheckpoint,\\n\\t\\tuint256 shtRewardPerShare,\\n\\t\\tuint256 lkDuration,\\n\\t\\taddress shtAddress,\\n\\t\\taddress lkShtAddress\\n\\t) internal returns (HstAttributes memory attr) {\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\tuint256 maxProjectTokens = 10;\\n\\t\\tTokenPayment[] memory projectTokens = new TokenPayment[](\\n\\t\\t\\tmaxProjectTokens\\n\\t\\t);\\n\\t\\tuint256 projectTokenCount = 0;\\n\\t\\tuint256 shtAmount = 0;\\n\\t\\tuint256 lkShtNonce = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < payments.length; i++) {\\n\\t\\t\\tTokenPayment memory payment = payments[i];\\n\\n\\t\\t\\tif (payment.token == shtAddress) {\\n\\t\\t\\t\\tshtAmount = payment.amount;\\n\\t\\t\\t} else if (payment.token == lkShtAddress) {\\n\\t\\t\\t\\tlkShtNonce = payment.nonce;\\n\\t\\t\\t} else if (_projectsToken.contains(payment.token)) {\\n\\t\\t\\t\\t// Validate that the payment is for an allowed project token\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tprojectTokens.length < maxProjectTokens,\\n\\t\\t\\t\\t\\t\\\"Max project tokens exceeded\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tprojectTokens[projectTokenCount] = payment;\\n\\t\\t\\t\\tprojectTokenCount++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\\"Invalid Sent Token\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tpayment.receiveToken(caller);\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\thst.mint(\\n\\t\\t\\t\\tprojectTokens,\\n\\t\\t\\t\\tprojectsShareCheckpoint,\\n\\t\\t\\t\\tshtRewardPerShare,\\n\\t\\t\\t\\tlkDuration,\\n\\t\\t\\t\\tshtAmount,\\n\\t\\t\\t\\tlkShtNonce\\n\\t\\t\\t);\\n\\t}\\n\\n\\tmodifier onlyProjectFunding() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == projectFundingAddress,\\n\\t\\t\\t\\\"Caller is not the project funder\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyHousingProject() {\\n\\t\\trequire(\\n\\t\\t\\tpermissions[msg.sender] == Permissions.HOUSING_PROJECT,\\n\\t\\t\\t\\\"Caller is not an accepted housing project\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0xea1ab05257afd6f7fd39b3bc0208df82c9935977135cff846ccad9bd1f1bfd32\",\"license\":\"MIT\"},\"contracts/main/User.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.24;\\n\\nimport \\\"./Interface.sol\\\";\\n\\nabstract contract UserModule is IUserModule {\\n\\tstruct ReferralInfo {\\n\\t\\tuint256 id;\\n\\t\\taddress referralAddress;\\n\\t}\\n\\n\\tstruct User {\\n\\t\\tuint256 id;\\n\\t\\taddress addr;\\n\\t\\tuint256 referrerId;\\n\\t\\tuint256[] referrals;\\n\\t}\\n\\n\\tuint256 public userCount;\\n\\tmapping(address => User) public users;\\n\\tmapping(uint256 => address) public userIdToAddress;\\n\\n\\tevent UserRegistered(\\n\\t\\tuint256 userId,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 referrerId\\n\\t);\\n\\tevent ReferralAdded(uint256 referrerId, uint256 referralId);\\n\\n\\t/// @notice Register a new user or get the referral ID if already registered.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The ID of the registered user.\\n\\tfunction createRefID(uint256 referrerId) external returns (uint256) {\\n\\t\\taddress userAddr = msg.sender;\\n\\t\\treturn _createOrGetUserId(userAddr, referrerId);\\n\\t}\\n\\n\\t/// @notice Gets the referrer and referrer ID of a user.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return referrerId The ID of the referrer, 0 if none.\\n\\t/// @return referrerAddress The address of the referrer, address(0) if none.\\n\\tfunction getReferrer(\\n\\t\\taddress userAddress\\n\\t) public view returns (uint256 referrerId, address referrerAddress) {\\n\\t\\tUser storage user = users[userAddress];\\n\\t\\treferrerId = user.referrerId;\\n\\t\\treferrerAddress = userIdToAddress[referrerId];\\n\\t}\\n\\n\\tfunction getUserId(\\n\\t\\taddress userAddress\\n\\t) external view returns (uint256 userId) {\\n\\t\\treturn users[userAddress].id;\\n\\t}\\n\\n\\tfunction getReferrals(\\n\\t\\taddress userAddress\\n\\t) external view returns (ReferralInfo[] memory) {\\n\\t\\tuint256[] memory referralIds = users[userAddress].referrals;\\n\\t\\tReferralInfo[] memory referrals = new ReferralInfo[](\\n\\t\\t\\treferralIds.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < referralIds.length; i++) {\\n\\t\\t\\tuint256 id = referralIds[i];\\n\\t\\t\\taddress refAddr = userIdToAddress[id];\\n\\t\\t\\treferrals[i] = ReferralInfo({ id: id, referralAddress: refAddr });\\n\\t\\t}\\n\\n\\t\\treturn referrals;\\n\\t}\\n\\n\\t/// @notice Internal function to create or get the user ID.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The ID of the user.\\n\\tfunction _createOrGetUserId(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) internal returns (uint256) {\\n\\t\\tif (users[userAddr].id != 0) {\\n\\t\\t\\treturn users[userAddr].id;\\n\\t\\t}\\n\\n\\t\\tuserCount++;\\n\\t\\tusers[userAddr] = User({\\n\\t\\t\\tid: userCount,\\n\\t\\t\\taddr: userAddr,\\n\\t\\t\\treferrerId: referrerId,\\n\\t\\t\\treferrals: new uint256[](0)\\n\\t\\t});\\n\\t\\tuserIdToAddress[userCount] = userAddr;\\n\\n\\t\\tif (\\n\\t\\t\\treferrerId != 0 &&\\n\\t\\t\\treferrerId != userCount &&\\n\\t\\t\\tuserIdToAddress[referrerId] != address(0)\\n\\t\\t) {\\n\\t\\t\\tusers[userIdToAddress[referrerId]].referrals.push(userCount);\\n\\t\\t\\temit ReferralAdded(referrerId, userCount);\\n\\t\\t}\\n\\n\\t\\temit UserRegistered(userCount, userAddr, referrerId);\\n\\t\\treturn userCount;\\n\\t}\\n}\\n\",\"keccak256\":\"0x206c6860f427559d04d53cac1b2e1481c8d23776afc6d54ac6ec7e76b11eb687\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/main/distribution/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../../lib/EpochsAndPeriods.sol\\\";\\nimport \\\"../../housing-project/HousingProject.sol\\\";\\nimport \\\"../../modules/sht-module/Economics.sol\\\";\\nimport { HstAttributes } from \\\"../HST.sol\\\";\\n\\nlibrary ProjectStakingRewards {\\n\\tusing SafeMath for uint256;\\n\\n\\tstruct Value {\\n\\t\\tuint256 toShare;\\n\\t\\tuint256 checkpoint;\\n\\t}\\n\\n\\tfunction add(Value storage self, uint256 rhs) internal {\\n\\t\\tself.toShare = self.toShare.add(rhs);\\n\\t\\tself.checkpoint = self.checkpoint.add(rhs);\\n\\t}\\n\\n\\tfunction sub(Value storage self, uint256 rhs) internal {\\n\\t\\tself.toShare = self.toShare.sub(rhs);\\n\\t}\\n}\\n\\nlibrary Distribution {\\n\\tusing SafeMath for uint256;\\n\\tusing EpochsAndPeriods for EpochsAndPeriods.Storage;\\n\\tusing Entities for Entities.Value;\\n\\tusing ProjectStakingRewards for ProjectStakingRewards.Value;\\n\\n\\tstruct Storage {\\n\\t\\tuint256 totalFunds;\\n\\t\\tuint256 genesisEpoch;\\n\\t\\tuint256 projectsTotalReceivedRents;\\n\\t\\tmapping(address => ProjectDistributionData) projectDets;\\n\\t\\tuint256 lastFundsDispatchEpoch;\\n\\t\\tuint256 shtTotalStakeWeight;\\n\\t\\tuint256 shtRewardPerShare;\\n\\t\\tuint256 shtStakingRewards;\\n\\t\\tProjectStakingRewards.Value projectsStakingRewards;\\n\\t\\tEntities.Value entityFunds;\\n\\t}\\n\\n\\tstruct ProjectDistributionData {\\n\\t\\tuint256 maxShares;\\n\\t\\tuint256 receivedRents;\\n\\t}\\n\\n\\t/// @notice Sets the total funds and the genesis epoch. This can only be done once.\\n\\t/// @param self The storage struct to set the total funds and genesis epoch.\\n\\t/// @param amount The amount of total funds to set.\\n\\t/// @param epochsAndPeriods The storage struct for epoch and period management.\\n\\tfunction setTotalFunds(\\n\\t\\tStorage storage self,\\n\\t\\tEpochsAndPeriods.Storage storage epochsAndPeriods,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\trequire(self.totalFunds == 0, \\\"Total funds already set\\\");\\n\\t\\tself.totalFunds = amount;\\n\\t\\tself.genesisEpoch = epochsAndPeriods.currentEpoch();\\n\\t}\\n\\n\\t/// @notice Returns the total funds.\\n\\t/// @param self The storage struct containing the total funds.\\n\\t/// @return The total funds.\\n\\tfunction getTotalFunds(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\treturn self.totalFunds;\\n\\t}\\n\\n\\t/// @notice Returns the genesis epoch when the total funds were set.\\n\\t/// @param self The storage struct containing the genesis epoch.\\n\\t/// @return The genesis epoch.\\n\\tfunction getGenesisEpoch(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\treturn self.genesisEpoch;\\n\\t}\\n\\n\\t/// @notice Adds the rent received for a project and updates the total received rents and project-specific data.\\n\\t/// @dev This function updates the total amount of rent received across all projects and updates the specific project data.\\n\\t/// If the `maxShares` for the project has not been set, it retrieves and sets it from the `HousingProject` contract.\\n\\t/// @param self The storage struct for the `Distribution` contract where project and rent data is stored.\\n\\t/// @param projectAddress The address of the project whose rent is being added.\\n\\t/// @param amount The amount of rent received to be added to the project and total received rents.\\n\\tfunction addProjectRent(\\n\\t\\tStorage storage self,\\n\\t\\taddress projectAddress,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\t// Update the total received rents across all projects\\n\\t\\tself.projectsTotalReceivedRents += amount;\\n\\n\\t\\t// Retrieve or initialize project-specific data\\n\\t\\tProjectDistributionData storage projectData = self.projectDets[\\n\\t\\t\\tprojectAddress\\n\\t\\t];\\n\\n\\t\\t// If `maxShares` is not set, initialize it with the maximum supply from the HousingProject contract\\n\\t\\tif (projectData.maxShares == 0) {\\n\\t\\t\\tprojectData.maxShares = HousingProject(projectAddress)\\n\\t\\t\\t\\t.getMaxSupply();\\n\\t\\t}\\n\\n\\t\\t// Add the received rent amount to the project's accumulated rents\\n\\t\\tprojectData.receivedRents += amount;\\n\\t}\\n\\n\\t/// @notice Generates rewards for the current epoch.\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\tfunction generateRewards(\\n\\t\\tStorage storage self,\\n\\t\\tEpochsAndPeriods.Storage storage epochsAndPeriods\\n\\t) internal {\\n\\t\\tuint256 currentEpoch = epochsAndPeriods.currentEpoch();\\n\\t\\tif (currentEpoch <= self.lastFundsDispatchEpoch) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 toDispatch = Emission.throughEpochRange(\\n\\t\\t\\tself.lastFundsDispatchEpoch,\\n\\t\\t\\tcurrentEpoch\\n\\t\\t);\\n\\t\\tEntities.Value memory entitiesValue = Entities.fromTotalValue(\\n\\t\\t\\ttoDispatch\\n\\t\\t);\\n\\n\\t\\t// Take staking value\\n\\t\\tuint256 stakingRewards = entitiesValue.staking;\\n\\t\\tentitiesValue.staking = 0;\\n\\t\\tself.entityFunds.add(entitiesValue);\\n\\n\\t\\tuint256 shtStakersShare = stakingRewards.mul(7).div(10); // 70% goes to SHT stakers\\n\\n\\t\\tuint256 totalShtWeight = self.shtTotalStakeWeight;\\n\\t\\tif (totalShtWeight > 0) {\\n\\t\\t\\tuint256 rpsIncrease = shtStakersShare\\n\\t\\t\\t\\t.mul(DIVISION_SAFETY_CONST)\\n\\t\\t\\t\\t.div(totalShtWeight);\\n\\t\\t\\tself.shtRewardPerShare = self.shtRewardPerShare.add(rpsIncrease);\\n\\t\\t}\\n\\n\\t\\tself.shtStakingRewards = self.shtStakingRewards.add(shtStakersShare);\\n\\t\\tself.projectsStakingRewards.add(stakingRewards.sub(shtStakersShare));\\n\\n\\t\\tself.lastFundsDispatchEpoch = currentEpoch;\\n\\t}\\n\\n\\t/// @notice Claims rewards for a given attribute.\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param attr The attributes struct for which rewards are being claimed.\\n\\t/// @return The total amount of rewards claimed.\\n\\tfunction claimRewards(\\n\\t\\tStorage storage self,\\n\\t\\tHstAttributes memory attr\\n\\t) internal returns (uint256, HstAttributes memory) {\\n\\t\\tuint256 shtClaimed = 0;\\n\\n\\t\\t// Claim PT rewards\\n\\t\\tuint256 ptRewardCheckpoint = self.projectsStakingRewards.checkpoint;\\n\\t\\tif (ptRewardCheckpoint > 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < attr.projectTokens.length; i++) {\\n\\t\\t\\t\\tshtClaimed = shtClaimed.add(\\n\\t\\t\\t\\t\\tcomputeRewardForPT(\\n\\t\\t\\t\\t\\t\\tself,\\n\\t\\t\\t\\t\\t\\tattr.projectTokens[i],\\n\\t\\t\\t\\t\\t\\tattr.projectsShareCheckpoint,\\n\\t\\t\\t\\t\\t\\tptRewardCheckpoint\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (self.projectsStakingRewards.toShare < shtClaimed) {\\n\\t\\t\\t\\tshtClaimed = self.projectsStakingRewards.toShare;\\n\\t\\t\\t}\\n\\t\\t\\tself.projectsStakingRewards.toShare = self\\n\\t\\t\\t\\t.projectsStakingRewards\\n\\t\\t\\t\\t.toShare\\n\\t\\t\\t\\t.sub(shtClaimed);\\n\\t\\t}\\n\\n\\t\\t// Claim SHT rewards\\n\\t\\tuint256 shtRPS = self.shtRewardPerShare;\\n\\t\\tif (shtRPS > 0 && attr.shtRewardPerShare < shtRPS) {\\n\\t\\t\\tuint256 shtReward = (shtRPS.sub(attr.shtRewardPerShare))\\n\\t\\t\\t\\t.mul(attr.stakeWeight)\\n\\t\\t\\t\\t.div(DIVISION_SAFETY_CONST);\\n\\t\\t\\tif (self.shtStakingRewards < shtReward) {\\n\\t\\t\\t\\tshtClaimed = self.shtStakingRewards;\\n\\t\\t\\t}\\n\\t\\t\\tself.shtStakingRewards = self.shtStakingRewards.sub(shtReward);\\n\\n\\t\\t\\tshtClaimed = shtClaimed.add(shtReward);\\n\\t\\t}\\n\\n\\t\\t// Update claim parameters\\n\\t\\tattr.shtRewardPerShare = shtRPS;\\n\\t\\tattr.projectsShareCheckpoint = ptRewardCheckpoint;\\n\\n\\t\\treturn (shtClaimed, attr);\\n\\t}\\n\\n\\t/// @notice Computes the reward for a given PT (Housing Project Token).\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param tokenPayment The token payment of the housing project.\\n\\t/// @param stakingCheckPoint The previous checkpoint value.\\n\\t/// @param tokenCheckPoint The new checkpoint value.\\n\\t/// @return reward The computed reward for the given PT.\\n\\tfunction computeRewardForPT(\\n\\t\\tStorage storage self,\\n\\t\\tTokenPayment memory tokenPayment,\\n\\t\\tuint256 stakingCheckPoint,\\n\\t\\tuint256 tokenCheckPoint\\n\\t) internal view returns (uint256 reward) {\\n\\t\\tif (stakingCheckPoint >= tokenCheckPoint) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tProjectDistributionData storage projectData = self.projectDets[\\n\\t\\t\\ttokenPayment.token\\n\\t\\t];\\n\\t\\trequire(\\n\\t\\t\\ttokenPayment.amount <= projectData.maxShares,\\n\\t\\t\\t\\\"Project token amount too large\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 shareIncrease = tokenCheckPoint.sub(stakingCheckPoint);\\n\\t\\t// Project's allocation is dynamic, as rents received chages\\n\\t\\tuint256 projectAllocation = shareIncrease\\n\\t\\t\\t.mul(projectData.receivedRents)\\n\\t\\t\\t.div(self.projectsTotalReceivedRents);\\n\\n\\t\\treward = projectAllocation.mul(tokenPayment.amount).div(\\n\\t\\t\\tprojectData.maxShares\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Enters staking for the given attributes.\\n\\t/// @param self The storage struct for the `Distribution` contract.\\n\\t/// @param stakeWeight The stake weight to be added.\\n\\tfunction enterStaking(Storage storage self, uint256 stakeWeight) internal {\\n\\t\\tself.shtTotalStakeWeight = self.shtTotalStakeWeight.add(stakeWeight);\\n\\t}\\n}\\n\",\"keccak256\":\"0x9fb3f9b3c9b1731783433460c46eacc05feeb3345cd9a175a65c7dacf01c46d6\",\"license\":\"MIT\"},\"contracts/modules/LockedSmartHousingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../lib/LkSHTAttributes.sol\\\";\\nimport \\\"../lib/TokenPayments.sol\\\";\\nimport \\\"../modules/SFT.sol\\\";\\n\\nlibrary NewLkSHT {\\n\\tfunction create() external returns (LkSHT) {\\n\\t\\treturn new LkSHT(\\\"Locked Housing Token\\\", \\\"LkSHT\\\");\\n\\t}\\n}\\n\\n/**\\n * @title LockedSmartHousingToken\\n * @dev SFT token that locks SmartHousing Tokens (SHT) during ICO.\\n * Allows transfers only to whitelisted addresses.\\n */\\ncontract LkSHT is SFT {\\n\\tusing SafeMath for uint256;\\n\\tusing TokenPayments for ERC20TokenPayment;\\n\\n\\tstruct LkSHTBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tLkSHTAttributes.Attributes attributes;\\n\\t}\\n\\n\\tuint256 immutable startTimestamp = block.timestamp;\\n\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) SFT(name_, symbol_) {}\\n\\n\\tevent TokensMinted(address indexed to, uint256 amount);\\n\\n\\tfunction sftBalance(\\n\\t\\taddress user\\n\\t) public view returns (LkSHTBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tLkSHTBalance[] memory balance = new LkSHTBalance[](_sftBals.length);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = LkSHTBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(\\n\\t\\t\\t\\t\\t_sftBal.attributes,\\n\\t\\t\\t\\t\\t(LkSHTAttributes.Attributes)\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints new Locked SmartHousing Tokens (LkSHT) by locking SHT.\\n\\t * @param amount The amount of SHT to lock.\\n\\t * @param to The address to mint the tokens to.\\n\\t */\\n\\tfunction mint(uint256 amount, address to) external onlyOwner {\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tLkSHTAttributes.newAttributes(startTimestamp, amount)\\n\\t\\t);\\n\\n\\t\\tsuper._mint(to, amount, attributes, \\\"LockedSmartHousingToken\\\");\\n\\n\\t\\temit TokensMinted(to, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x33e840a42e8bab335538d2ab9a8973c97423b17caac5fd50a802b53f6db7357d\",\"license\":\"MIT\"},\"contracts/modules/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// TODO I think we should create a standard of this\\nabstract contract SFT is ERC1155, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\tCounters.Counter private _nonceCounter;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t// Mapping from nonce to token attributes as bytes\\n\\tmapping(uint256 => bytes) private _tokenAttributes;\\n\\n\\t// Mapping from address to list of owned token nonces\\n\\tmapping(address => EnumerableSet.UintSet) private _addressToNonces;\\n\\n\\tconstructor(string memory name_, string memory symbol_) ERC1155(\\\"\\\") {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t// Private function to mint new tokens\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes,\\n\\t\\tbytes memory data\\n\\t) internal returns (uint256) {\\n\\t\\t_nonceCounter.increment();\\n\\t\\tuint256 nonce = _nonceCounter.current();\\n\\n\\t\\t// Store the attributes\\n\\t\\t_tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, data);\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t_addressToNonces[to].add(nonce);\\n\\n\\t\\treturn nonce;\\n\\t}\\n\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (_name, _symbol);\\n\\t}\\n\\n\\t// Function to get token attributes by nonce\\n\\tfunction getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) public view returns (bytes memory) {\\n\\t\\treturn _tokenAttributes[nonce];\\n\\t}\\n\\n\\t// Function to get list of nonces owned by an address\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _addressToNonces[owner].values();\\n\\t}\\n\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/// Burns all the NFT balance of user at nonce, creates new with balance and attributes\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) external onlyOwner {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\t_mint(user, amount, attr, \\\"\\\");\\n\\t}\\n\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _tokenAttributes[nonce];\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t// Override _beforeTokenTransfer to handle address-to-nonce mapping\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\t_addressToNonces[from].remove(ids[i]);\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\t_addressToNonces[to].add(ids[i]);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x8098c36137bbb9a342d16fd64f7d57c03a77841a872dd44641b9db1623a699aa\",\"license\":\"MIT\"},\"contracts/modules/sht-module/Economics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nlibrary Emission {\\n\\tusing PRBMathUD60x18 for uint256;\\n\\n\\tuint256 private constant DECAY_RATE = 9998e14; // 0.9998 with 18 decimals\\n\\tuint256 private constant E0 = 2729727036845720116116; // Example initial emission\\n\\n\\tfunction atEpoch(uint256 epoch) internal pure returns (uint256) {\\n\\t\\tuint256 decayFactor = PRBMathUD60x18.pow(DECAY_RATE, epoch);\\n\\t\\treturn E0.mul(decayFactor) / 1e18;\\n\\t}\\n\\n\\t/// @notice Computes E0 * \\u200b\\u200b(0.9998^epochStart \\u2212 0.9998^epochEnd\\u200b)\\n\\t/// @param epochStart the starting epoch\\n\\t/// @param epochEnd the end epoch\\n\\tfunction throughEpochRange(\\n\\t\\tuint256 epochStart,\\n\\t\\tuint256 epochEnd\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(epochEnd > epochStart, \\\"Invalid epoch range\\\");\\n\\n\\t\\tuint256 startFactor = PRBMathUD60x18.pow(DECAY_RATE, epochStart);\\n\\t\\tuint256 endFactor = PRBMathUD60x18.pow(DECAY_RATE, epochEnd);\\n\\n\\t\\tuint256 totalEmission = E0\\n\\t\\t\\t.mul(SafeMath.sub(startFactor, endFactor))\\n\\t\\t\\t.div(DECAY_RATE.ln());\\n\\t\\treturn totalEmission;\\n\\t}\\n}\\n\\nlibrary Entities {\\n\\tusing SafeMath for uint256;\\n\\n\\tuint32 public constant UNITY = 100_00;\\n\\n\\tuint32 public constant TEAM_AND_ADVISORS_RATIO = 23_05;\\n\\tuint32 public constant PROTOCOL_DEVELOPMENT_RATIO = 30_05;\\n\\tuint32 public constant GROWTH_RATIO = 15_35;\\n\\tuint32 public constant STAKING_RATIO = 16_55;\\n\\tuint32 public constant PROJECTS_RESERVE_RATIO = 8_00;\\n\\tuint32 public constant LP_AND_LISTINGS_RATIO = 7_00;\\n\\n\\tstruct Value {\\n\\t\\tuint256 team;\\n\\t\\tuint256 protocol;\\n\\t\\tuint256 growth;\\n\\t\\tuint256 staking;\\n\\t\\tuint256 projectsReserve;\\n\\t\\tuint256 lpAndListing;\\n\\t}\\n\\n\\tfunction fromTotalValue(\\n\\t\\tuint256 totalValue\\n\\t) internal pure returns (Value memory) {\\n\\t\\tuint256 othersTotal = totalValue\\n\\t\\t\\t.mul(UNITY - PROTOCOL_DEVELOPMENT_RATIO)\\n\\t\\t\\t.div(UNITY);\\n\\n\\t\\tuint256 team = othersTotal.mul(TEAM_AND_ADVISORS_RATIO).div(UNITY);\\n\\t\\tuint256 growth = othersTotal.mul(GROWTH_RATIO).div(UNITY);\\n\\t\\tuint256 staking = othersTotal.mul(STAKING_RATIO).div(UNITY);\\n\\t\\tuint256 projectsReserve = othersTotal.mul(PROJECTS_RESERVE_RATIO).div(\\n\\t\\t\\tUNITY\\n\\t\\t);\\n\\t\\tuint256 lpAndListing = othersTotal.mul(LP_AND_LISTINGS_RATIO).div(\\n\\t\\t\\tUNITY\\n\\t\\t);\\n\\n\\t\\tuint256 protocol = totalValue\\n\\t\\t\\t.sub(team)\\n\\t\\t\\t.sub(growth)\\n\\t\\t\\t.sub(staking)\\n\\t\\t\\t.sub(projectsReserve)\\n\\t\\t\\t.sub(lpAndListing);\\n\\n\\t\\treturn\\n\\t\\t\\tValue({\\n\\t\\t\\t\\tteam: team,\\n\\t\\t\\t\\tprotocol: protocol,\\n\\t\\t\\t\\tgrowth: growth,\\n\\t\\t\\t\\tstaking: staking,\\n\\t\\t\\t\\tprojectsReserve: projectsReserve,\\n\\t\\t\\t\\tlpAndListing: lpAndListing\\n\\t\\t\\t});\\n\\t}\\n\\n\\tfunction total(Value memory value) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tvalue\\n\\t\\t\\t\\t.team\\n\\t\\t\\t\\t.add(value.protocol)\\n\\t\\t\\t\\t.add(value.growth)\\n\\t\\t\\t\\t.add(value.staking)\\n\\t\\t\\t\\t.add(value.projectsReserve)\\n\\t\\t\\t\\t.add(value.lpAndListing);\\n\\t}\\n\\n\\tfunction add(Value storage self, Value memory rhs) internal {\\n\\t\\tself.team = self.team.add(rhs.team);\\n\\t\\tself.protocol = self.protocol.add(rhs.protocol);\\n\\t\\tself.growth = self.growth.add(rhs.growth);\\n\\t\\tself.staking = self.staking.add(rhs.staking);\\n\\t\\tself.projectsReserve = self.projectsReserve.add(rhs.projectsReserve);\\n\\t\\tself.lpAndListing = self.lpAndListing.add(rhs.lpAndListing);\\n\\t}\\n}\\n\",\"keccak256\":\"0xeb86637b933f394907cff1d0a8cf706bd3f737a34d660d87feffbaee09de1c32\",\"license\":\"MIT\"},\"contracts/modules/sht-module/SHT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nlibrary SHT {\\n\\tuint256 public constant DECIMALS = 18;\\n\\tuint256 public constant ONE = 10 ** DECIMALS;\\n\\tuint256 public constant MAX_SUPPLY = 21_000_000 * ONE;\\n\\tuint256 public constant ECOSYSTEM_DISTRIBUTION_FUNDS =\\n\\t\\t(13_650_000 * ONE) + 2_248_573_618_499_339;\\n\\tuint256 public constant ICO_FUNDS =\\n\\t\\tMAX_SUPPLY - ECOSYSTEM_DISTRIBUTION_FUNDS;\\n}\\n\",\"keccak256\":\"0x66b511a7932bd0f6ceea118f9440cac3a6fd470d11e4d7fa337de8b178627dd7\",\"license\":\"MIT\"},\"contracts/project-funding/ProjectFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../lib/ProjectStorage.sol\\\";\\nimport \\\"../lib/LkSHTAttributes.sol\\\";\\n\\nimport \\\"../main/Interface.sol\\\";\\n\\nimport \\\"../modules/LockedSmartHousingToken.sol\\\";\\nimport \\\"../modules/sht-module/SHT.sol\\\";\\n\\nimport { HousingSFT } from \\\"../housing-project/HousingSFT.sol\\\";\\nimport { TokenPayment } from \\\"../lib/TokenPayments.sol\\\";\\nimport { NewHousingProject, HousingProject } from \\\"../housing-project/NewHousingProjectLib.sol\\\";\\n\\n/**\\n * @title ProjectFunding\\n * @dev This contract is used for initializing and deploying housing projects.\\n * It allows the deployment of a new housing project and manages project data.\\n */\\ncontract ProjectFunding is Ownable {\\n\\tusing SafeMath for uint256;\\n\\tusing ProjectStorage for mapping(uint256 => ProjectStorage.Data);\\n\\tusing ProjectStorage for ProjectStorage.Data;\\n\\tusing LkSHTAttributes for LkSHTAttributes.Attributes;\\n\\n\\taddress public coinbase; // Address authorized to initialize the first project, also the housingToken\\n\\taddress public smartHousingAddress; // Address of the SmartHousing contract\\n\\n\\tmapping(uint256 => ProjectStorage.Data) public projects; // Mapping of project ID to ProjectData\\n\\tmapping(address => uint256) public projectsId; // Mapping of project address to project ID\\n\\tuint256 public projectCount; // Counter for the total number of projects\\n\\n\\tmapping(uint256 => mapping(address => uint256)) public usersProjectDeposit;\\n\\n\\tIERC20 public housingToken; // Token used for funding projects\\n\\tLkSHT public lkSht; // The locked version\\n\\n\\t/**\\n\\t * @dev Emitted when a new project is deployed.\\n\\t * @param projectAddress Address of the newly deployed HousingProject contract.\\n\\t */\\n\\tevent ProjectDeployed(address indexed projectAddress);\\n\\tevent ProjectFunded(\\n\\t\\tuint256 indexed projectId,\\n\\t\\taddress indexed depositor,\\n\\t\\tTokenPayment payment\\n\\t);\\n\\tevent ProjectTokensClaimed(\\n\\t\\taddress indexed depositor,\\n\\t\\tuint256 projectId,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t/**\\n\\t * @param _coinbase Address authorized to initialize the first project.\\n\\t */\\n\\tconstructor(address _coinbase) {\\n\\t\\tcoinbase = _coinbase;\\n\\t\\tlkSht = NewLkSHT.create();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to deploy a new HousingProject contract.\\n\\t * @param fundingToken Address of the ERC20 token used for funding.\\n\\t * @param fundingGoal The funding goal for the new project.\\n\\t * @param fundingDeadline The deadline for the project funding.\\n\\t */\\n\\tfunction _deployProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) internal {\\n\\t\\tHousingProject newProject = NewHousingProject.create(\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tsmartHousingAddress\\n\\t\\t);\\n\\t\\tProjectStorage.Data memory projectData = projects.createNew(\\n\\t\\t\\tprojectsId,\\n\\t\\t\\tprojectCount,\\n\\t\\t\\tfundingGoal,\\n\\t\\t\\tfundingDeadline,\\n\\t\\t\\tfundingToken,\\n\\t\\t\\taddress(newProject),\\n\\t\\t\\taddress(newProject.projectSFT())\\n\\t\\t);\\n\\t\\tprojectCount = projectData.id;\\n\\n\\t\\temit ProjectDeployed(projectData.projectAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes the first project.\\n\\t * This function must be called by the coinbase address and can only be called once.\\n\\t * It sets up the token and deploys the first project.\\n\\t * @param shtPayment Payment details for the Smart Housing Token (SHT).\\n\\t * @param smartHousingAddress_ Address of the Smart Housing contract.\\n\\t * @param fundingToken Address of the ERC20 token used for funding.\\n\\t * @param fundingGoal The funding goal for the new project.\\n\\t * @param fundingDeadline The deadline for the project funding.\\n\\t */\\n\\tfunction initFirstProject(\\n\\t\\tERC20TokenPayment calldata shtPayment,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress smartHousingAddress_,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) external {\\n\\t\\trequire(msg.sender == coinbase, \\\"Caller is not the coinbase\\\");\\n\\t\\trequire(projectCount == 0, \\\"Project already initialized\\\");\\n\\n\\t\\tTokenPayments.receiveERC20(shtPayment);\\n\\t\\thousingToken = shtPayment.token;\\n\\n\\t\\tsmartHousingAddress = smartHousingAddress_;\\n\\n\\t\\t_deployProject(\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tfundingToken,\\n\\t\\t\\tfundingGoal,\\n\\t\\t\\tfundingDeadline\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deploys a new project.\\n\\t * This function can be called multiple times to deploy additional projects.\\n\\t * @param fundingToken Address of the ERC20 token used for funding.\\n\\t * @param fundingGoal The funding goal for the new project.\\n\\t * @param fundingDeadline The deadline for the project funding.\\n\\t */\\n\\tfunction deployProject(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\taddress fundingToken,\\n\\t\\tuint256 fundingGoal,\\n\\t\\tuint256 fundingDeadline\\n\\t) public onlyOwner {\\n\\t\\t_deployProject(\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tfundingToken,\\n\\t\\t\\tfundingGoal,\\n\\t\\t\\tfundingDeadline\\n\\t\\t);\\n\\t}\\n\\n\\tfunction fundProject(\\n\\t\\tTokenPayment calldata depositPayment,\\n\\t\\tuint256 projectId,\\n\\t\\tuint256 referrerId\\n\\t) external payable {\\n\\t\\trequire(\\n\\t\\t\\tprojectId > 0 && projectId <= projectCount,\\n\\t\\t\\t\\\"Invalid project ID\\\"\\n\\t\\t);\\n\\n\\t\\taddress depositor = msg.sender;\\n\\n\\t\\t// Register user with referrer (if needed)\\n\\t\\tISmartHousing(smartHousingAddress).createRefIDViaProxy(\\n\\t\\t\\tdepositor,\\n\\t\\t\\treferrerId\\n\\t\\t);\\n\\n\\t\\t// Update project funding\\n\\t\\tprojects.fund(\\n\\t\\t\\tusersProjectDeposit[projectId],\\n\\t\\t\\tprojectId,\\n\\t\\t\\tdepositor,\\n\\t\\t\\tdepositPayment\\n\\t\\t);\\n\\n\\t\\temit ProjectFunded(projectId, depositor, depositPayment);\\n\\t}\\n\\n\\tfunction setProjectToken(uint256 projectId) external onlyOwner {\\n\\t\\tProjectStorage.Data storage project = projects[projectId];\\n\\n\\t\\t// TODO Add this after demo\\n\\t\\t// require(\\n\\t\\t// \\tproject.status() == ProjectStorage.Status.Successful,\\n\\t\\t// \\t\\\"Project Funding not yet successful\\\"\\n\\t\\t// );\\n\\n\\t\\tISmartHousing(smartHousingAddress).addProject(project.projectAddress);\\n\\n\\t\\tHousingProject(project.projectAddress).setTokenDetails(\\n\\t\\t\\tproject.collectedFunds,\\n\\t\\t\\tcoinbase\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Claims project tokens for a given project ID.\\n\\t * @param projectId The ID of the project to claim tokens from.\\n\\t */\\n\\tfunction claimProjectTokens(uint256 projectId) external {\\n\\t\\taddress depositor = msg.sender;\\n\\n\\t\\t// Retrieve the project and deposit amount\\n\\t\\t(ProjectStorage.Data memory project, uint256 depositAmount) = projects\\n\\t\\t\\t.takeDeposit(usersProjectDeposit[projectId], projectId, depositor);\\n\\n\\t\\tHousingSFT(project.tokenAddress).mintSFT(\\n\\t\\t\\tdepositAmount,\\n\\t\\t\\tdepositor,\\n\\t\\t\\tproject.collectedFunds\\n\\t\\t);\\n\\n\\t\\t// Mint LkSHT tokens if the project ID is 1\\n\\t\\tif (project.id == 1) {\\n\\t\\t\\tuint256 shtAmount = depositAmount.mul(SHT.ICO_FUNDS).div(\\n\\t\\t\\t\\tproject.collectedFunds\\n\\t\\t\\t);\\n\\n\\t\\t\\tlkSht.mint(shtAmount, depositor);\\n\\t\\t}\\n\\n\\t\\temit ProjectTokensClaimed(depositor, projectId, depositAmount);\\n\\t}\\n\\n\\tfunction unlockSHT(uint256 nonce) external {\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\tuint256 lkShtBal = lkSht.balanceOf(caller, nonce);\\n\\t\\trequire(lkShtBal > 0, \\\"ProjectFunding: Nothing to unlock\\\");\\n\\n\\t\\tLkSHTAttributes.Attributes memory attr = abi.decode(\\n\\t\\t\\tlkSht.getRawTokenAttributes(nonce),\\n\\t\\t\\t(LkSHTAttributes.Attributes)\\n\\t\\t);\\n\\t\\t(\\n\\t\\t\\tuint256 totalUnlockedAmount,\\n\\t\\t\\tLkSHTAttributes.Attributes memory newAttr\\n\\t\\t) = attr.unlockMatured();\\n\\n\\t\\tlkSht.update(\\n\\t\\t\\tcaller,\\n\\t\\t\\tnonce,\\n\\t\\t\\tlkShtBal.sub(totalUnlockedAmount),\\n\\t\\t\\tabi.encode(newAttr)\\n\\t\\t);\\n\\n\\t\\t// Transfer the total unlocked SHT tokens to the user's address\\n\\t\\tif (totalUnlockedAmount > 0) {\\n\\t\\t\\thousingToken.transfer(caller, totalUnlockedAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an array of all project IDs and their associated data.\\n\\t * @return projectList An array of tuples containing project details.\\n\\t */\\n\\tfunction allProjects() public view returns (ProjectStorage.Data[] memory) {\\n\\t\\tProjectStorage.Data[] memory projectList = new ProjectStorage.Data[](\\n\\t\\t\\tprojectCount\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 1; i <= projectCount; i++) {\\n\\t\\t\\tprojectList[i - 1] = projects[i];\\n\\t\\t}\\n\\n\\t\\treturn projectList;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the HousingProject contract for a given project ID.\\n\\t * @param projectId The ID of the project.\\n\\t * @return projectAddress The address of the HousingProject contract.\\n\\t */\\n\\tfunction getProjectAddress(\\n\\t\\tuint256 projectId\\n\\t) external view returns (address projectAddress) {\\n\\t\\tProjectStorage.Data storage project = projects[projectId];\\n\\t\\treturn project.projectAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the details of a project by its ID.\\n\\t * @param projectId The ID of the project.\\n\\t * @return id The project ID.\\n\\t * @return fundingGoal The funding goal of the project.\\n\\t * @return fundingDeadline The deadline for the project funding.\\n\\t * @return fundingToken The address of the ERC20 token used for funding.\\n\\t * @return projectAddress The address of the HousingProject contract.\\n\\t * @return status The funding status of the project.\\n\\t * @return collectedFunds The amount of funds collected.\\n\\t */\\n\\tfunction getProjectData(\\n\\t\\tuint256 projectId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 id,\\n\\t\\t\\tuint256 fundingGoal,\\n\\t\\t\\tuint256 fundingDeadline,\\n\\t\\t\\taddress fundingToken,\\n\\t\\t\\taddress projectAddress,\\n\\t\\t\\tuint8 status,\\n\\t\\t\\tuint256 collectedFunds\\n\\t\\t)\\n\\t{\\n\\t\\tProjectStorage.Data storage project = projects[projectId];\\n\\t\\treturn (\\n\\t\\t\\tproject.id,\\n\\t\\t\\tproject.fundingGoal,\\n\\t\\t\\tproject.fundingDeadline,\\n\\t\\t\\tproject.fundingToken,\\n\\t\\t\\tproject.projectAddress,\\n\\t\\t\\tuint8(project.status()),\\n\\t\\t\\tproject.collectedFunds\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xba3518a6288e777e4b2b51d944cbc298200458d0f09f3c5b701f52547991a4e1\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c8062fdd58e146131ca57806301e882081461316f57806301ffc9a71461310057806306fdde03146130dc57806307973ccf146130be5780630e89341c14612fdc5780631958561214612ea757806325da499a14612e7e5780632b956ff714612e455780632eb2c2d614612b1d5780632fd2b55f1461287657806341a0894d146127055780634a9fefc7146126a15780634e1273f41461250c5780634fa3d25d146124b65780635124ae951461242f578063553c991214612406578063594dd43214611df9578063610bdf5d14611dd05780636addb66314611d77578063715018a614611d195780637c373a5014611c5c5780637c56b79814611c085780637c89f5df14611bd35780637d42082c14611b965780638b2ef8b114611b795780638da5cb5b14611b5057806395d89b4114611b11578063a22cb46514611a2d578063a476941c1461192b578063a87430ba146118c4578063af5ad2181461125a578063b169520114611227578063b81d481514611202578063c398bf3a146111da578063cbd91ab4146111be578063d73ca9d314610c0c578063d8938f26146106d0578063e985e9c51461067c578063f242432a14610352578063f2fde38b1461028c578063f7157af6146102205763fdc052a3146101f557600080fd5b3461021d578060031936011261021d57600e546040516001600160a01b039091168152602090f35b80fd5b503461021d57602036600319011261021d576040809161023e6131f2565b60006020845161024d81613277565b82815201526001600160a01b03168152601360205220815161026e81613277565b60206001835493848452015491019081528251918252516020820152f35b503461021d57602036600319011261021d576102a66131f2565b6102ae613e99565b6001600160a01b039081169081156102fe57600354826001600160601b0360a01b821617600355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461021d5760a036600319011261021d5761036c6131f2565b9061037561320d565b60643591604435916084356001600160401b0381116106785761039c90369060040161338e565b6001600160a01b03958616959093903387148015610651575b6103be9061377d565b82166103cb811515613a22565b6103d482614198565b946103de87614198565b50845b865181101561041457600190898752600b60205261040d60408820610406838b613816565b51906141bd565b50016103e1565b509092969195845b865181101561044f57600190858752600b60205261044860408820610441838b613816565b5190614141565b500161041c565b509194509294808652602096868852604087208660005288528260406000205461047b82821015613a7c565b838952888a5260408920886000528a52036040600020558187528688526040872084600052885260406000206104b2848254613809565b90558386604051848152858b8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a43b6104f0578580f35b916105369391600088946040519687958694859363f23a6e6160e01b9b8c865233600487015260248601526044850152606484015260a0608484015260a4830190613237565b03925af160009181610622575b506105ae5783610551613f11565b6308c379a014610579575b60405162461bcd60e51b81528061057560048201613fa0565b0390fd5b610581613f2f565b908161058d575061055c565b61057560405192839262461bcd60e51b845260048401526024830190613237565b9192506001600160e01b0319909116036105cc578038808080808580f35b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608490fd5b610643919250853d871161064a575b61063b81836132f6565b810190613ef1565b9038610543565b503d610631565b50868452600160205260408420336000526020526103be60ff6040600020541690506103b5565b8280fd5b503461021d57604036600319011261021d576106966131f2565b60406106a061320d565b9260018060a01b0380931681526001602052209116600052602052602060ff604060002054166040519015158152f35b503461021d57608036600319011261021d576106ea6131f2565b604435916001600160401b0391602480359190606435858111610c085761071590369060040161338e565b9461071e613e99565b6001600160a01b038316938415610bb85761073881614198565b9761074281614198565b5086604051610750816132db565b52865b895181101561078057600190878952600b6020526107798b6104068360408d2092613816565b5001610753565b50909294919396865b89518110156107b657600190888052600b6020526107af8b6104418360408d2092613816565b5001610789565b508796959684875260209487865260408820856000528652604060002054848110610b69578490828a5289885260408a2087600052885203604060002055604051908152838682015287857fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62928360403392a487604051610836816132db565b5260405192610844846132db565b8884526001908160075401988960075589600052600a89526040600020918051918211610b54578190610877845461356b565b8b601f8211610b18575b50508a90601f8311600114610ab257600092610aa7575b5050600019600383901b1c191690831b1790558591905b6108b889614198565b6108c187614198565b506000825b610a64575b5081906000925b610a28575b505050600090888252818852604082208383528852604082206108fb878254613809565b905560405190898252868983015260403392a43b61092f575b8561092b86600b8787600052526040600020614141565b5080f35b8361097391604097969597518093819263f23a6e6160e01b9687845233600485015260008d850152896044850152606484015260a0608484015260a4830190613237565b03816000875af160009181610a09575b506109e8578686610992613f11565b6308c379a0146109b55760405162461bcd60e51b81528061057560048201613fa0565b6109bd613f2f565b806109c8575061055c565b6105759060405193849362461bcd60e51b85526004850152830190613237565b90919293955063ffffffff60e01b16036105cc57839290600b61092b610914565b610a21919250873d891161064a5761063b81836132f6565b9088610983565b9091938151851015610a5e578293948391600052600b8b52610a5260406000206104418386613816565b500191908894936108d2565b936108d7565b8293945081929151811015610a9b57819060008052600b8b52610a8f60406000206104068387613816565b500188949392916108c6565b889493509190916108cb565b015190508d80610898565b60008581528c8120879550929190601f198516908e5b828210610b015750508411610ae8575b505050811b0190559085916108af565b015160001960f88460031b161c191690558d8080610ad8565b83850151865589979095019493840193018e610ac8565b610b4391866000528160002090601f860160051c8201928610610b4a575b601f0160051c0190613aea565b8e8b610881565b9091508190610b36565b8c634e487b7160e01b60005260416004526000fd5b6084878b6040519162461bcd60e51b83526004830152808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152fd5b60405162461bcd60e51b8152602060048201526023818501527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b8480fd5b50606036600319011261021d576001600160401b0360043581811161067857610c39903690600401613418565b909160b46024351015806111b0575b1561116b57610c5960443533613b19565b50610c62613dbb565b601954926016549260018060a01b03600e5416906004602060018060a01b03600c541660405192838092632873b64760e11b82525afa90811561116057889161111a575b50610caf6139b0565b5060405194610160860190811186821017611104579188979491889693604052600a8452865b61014081106110ca57508687958894895b858110610e015750505050505060018060a01b03600f5416926040519687956315eb5a4360e31b875260c4870160c060048901528551809152602060e48901960190895b818110610db057505050928694919285938995602486015260448501526024356064850152608484015260a483015203925af1908115610da557610d7d916080918491610d83575b500151601554613809565b60155580f35b610d9f91503d8086833e610d9781836132f6565b81019061383e565b84610d72565b6040513d84823e3d90fd5b9294966020919496989a50829950610ded906001935190604060609260018060a01b03815116835260208101516020840152015160408201520190565b98019101908a989694928a98969492610d2a565b610e1c9b9a9192939495969897999b366060830285016139e9565b80519098906001600160a01b0316858103610fdf5750506020880151975b80516001600160a01b031680610eca5750602091925001513403610e6e576001905b01908b999a9896979594939291610ce6565b60405162461bcd60e51b815260206004820152602e60248201527f6578706563746564207061796d656e7420616d6f756e74206d7573742065717560448201526d185b081cd95b9d08185b5bdd5b9d60921b6064820152608490fd5b604082015180610f6157505080516020918201516040516323b872dd60e01b8152336004820152306024820152604481019190915293849160649183916001600160a01b03165af1918215610f5657600192610f27575b50610e5c565b610f489060203d602011610f4f575b610f4081836132f6565b81019061394d565b508d610f21565b503d610f36565b6040513d8f823e3d90fd5b90916020909493940151823b15610fdb5760c48492836040519586948593637921219560e11b85523360048601523060248601526044850152606484015260a060848401528160a48401525af18015610da557610fc3575b5050600190610e5c565b610fcc906132ad565b610fd7578b8d610fb9565b8b80fd5b8380fd5b989990986001600160a01b0388168103611000575050604089015198610e3a565b60009081526024602052604090205490999592501561109057600a8a51101561104b5761104582868f94611034908e613816565b5261103f818d613816565b50613adb565b94610e3a565b60405162461bcd60e51b815260206004820152601b60248201527f4d61782070726f6a65637420746f6b656e7320657863656564656400000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21029b2b73a102a37b5b2b760711b6044820152606490fd5b60209192939594969897506040516110e181613292565b8a81528a838201528a604082015282828901015201908896979593949291610cd5565b634e487b7160e01b600052604160045260246000fd5b90506020813d602011611158575b81611135602093836132f6565b8101031261115457516001600160a01b03811681036111545738610ca6565b8780fd5b3d9150611128565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642065706f636873206c6f636b20706572696f640000000000006044820152606490fd5b506104386024351115610c48565b503461021d578060031936011261021d57602060405160b48152f35b503461021d57602036600319011261021d5760206111fa60043533613b19565b604051908152f35b503461021d578060031936011261021d57604060205460215482519182526020820152f35b503461021d57602036600319011261021d57602090600435815260068252604060018060a01b0391205416604051908152f35b503461021d5760c036600319011261021d576004356001600160401b0381116118c05761128b903690600401613418565b906112946139b0565b5061129d613e99565b60b46064351015806118b2575b15611875576084351580159061186a575b15611835578115158061182a575b156117d1576112dc6064356084356137f6565b90604051926112ea846132c0565b6112f381613317565b9161130160405193846132f6565b818352602083019036606084028201116117cd5780915b60608402820183106117b057505050508252602435602083015260443560408301526084356060830152608082015260643560a082015260a43560c08201526040516020808201528061136e6040820184613448565b0392611382601f19948581018452836132f6565b6040519061138f826132db565b81526001918260075401948560075585600052600a6020526040600020918051916001600160401b0383116111045782916113ca855461356b565b601f811161177e575b50602091601f841160011461171d5750600092611712575b5050600019600383901b1c191690841b1790555b33156116c35761140e84614198565b60405161141a81613277565b8381526020810190602036833751156116ad57839052826000815b61165e575b50906000825b61162b575b50505083600052600060205260406000203360005260205260406000208054908382018092116116155755604051848152826020820152600033917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a4333b611523575b61151f838533600052600b6020526114c9816040600020614141565b50604051908152604060208201527f4c04859a2c5c5d82310b4e9457a381ad4d4b599fdd102495d18131c90b2e4ea53391806115086040820186613448565b0390a2604051918291602083526020830190613448565b0390f35b6020611565916040518093819263f23a6e6160e01b9687845233600485015260006024850152896044850152606484015260a0608484015260a4830190613237565b03816000335af1600091816115f4575b506115dc57611582613f11565b6308c379a0146115a55760405162461bcd60e51b81528061057560048201613fa0565b6115ad613f2f565b806115b8575061055c565b60405162461bcd60e51b815260206004820152908190610575906024830190613237565b6001600160e01b031916036105cc5761151f386114ad565b61160e91925060203d60201161064a5761063b81836132f6565b9038611575565b634e487b7160e01b600052601160045260246000fd5b815181101561165957829033600052600b60205261165160406000206104418386613816565b500182611440565b611445565b82518110156116a85760008052600b60205281906116a07fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f766104068387613816565b500181611435565b61143a565b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b0151905038806113eb565b879492919216918560005260206000209260005b8181106117665750841161174d575b505050811b0190556113ff565b015160001960f88460031b161c19169055388080611740565b82840151855589969094019360209384019301611731565b6117aa90866000526020600020601f860160051c81019160208710610b4a57601f0160051c0190613aea565b386113d3565b6060602081926117c036876139e9565b8152019301929050611318565b8680fd5b60405162461bcd60e51b815260206004820152602b60248201527f4d7573742073656e642070726f6a65637420746f6b656e73206f66206170707260448201526a37bb32b210373ab6b132b960a91b6064820152608490fd5b50600a8211156112c9565b60405162461bcd60e51b815260206004820152600d60248201526c135d5cdd081cd95b990814d215609a1b6044820152606490fd5b5060a43515156112bb565b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103637b1b590323ab930ba34b7b760591b6044820152606490fd5b5061043860643511156112aa565b5080fd5b503461021d57602036600319011261021d576001600160a01b0390604090826118eb6131f2565b1681526005602052209061151f6002835492600185015416930154604051938493846040919493926060820195825260018060a01b031660208201520152565b503461021d578060031936011261021d576010546011546012549060145491601554926016549360175460405161196181613277565b601854815260195491602082019283526040519760c089018981106001600160401b0382111761110457604052601a548952601b549460208a01958652601c549660408b01978852601d549860608c01998a52601e549a60808d019b8c528c601f549060a00152604051809e81526020015260408d015260608c015260808b015260a08a015260c08901525160e0880152516101008701528451610120870152516101408601525161016085015251610180840152516101a083015260a001516101c08201526101e090f35b503461021d57604036600319011261021d57611a476131f2565b60243590811515809203610678576001600160a01b031690338214611aba5733835260016020526040832082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608490fd5b503461021d578060031936011261021d5761151f604051611b3c81611b3581613659565b03826132f6565b604051918291602083526020830190613237565b503461021d578060031936011261021d576003546040516001600160a01b039091168152602090f35b503461021d578060031936011261021d5760206040516104388152f35b503461021d57604036600319011261021d5760206111fa611bb56131f2565b611bca60018060a01b03600c54163314613965565b60243590613b19565b503461021d57602036600319011261021d57611b35611b3c604061151f936004358152600a60205220604051928380926136e7565b503461021d57602036600319011261021d5761092b611c256131f2565b600c546001600160a01b039190611c3f9083163314613965565b16808352602260205260408320805460ff191660011790556140a9565b503461021d578060031936011261021d5760405180916023549081835260208093018092602383527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f423090835b818110611d055750505084611cbe9103856132f6565b60405193838594850191818652518092526040850193925b828110611ce557505050500390f35b83516001600160a01b031685528695509381019392810192600101611cd6565b825484529286019260019283019201611ca8565b503461021d578060031936011261021d57611d32613e99565b600380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461021d578060031936011261021d57611dc2604051611d9b81611b35816135a5565b61151f604051611dae81611b3581613659565b604051938493604085526040850190613237565b908382036020850152613237565b503461021d578060031936011261021d57600f546040516001600160a01b039091168152602090f35b503461021d57604036600319011261021d57602490600435611e1c833533613b19565b50600f54604051627eeac760e11b81523360048201526024810183905292906020906001600160a01b039082908690604490829085165afa9485156121315783956123d7575b50841561238957611e71613dbb565b838352600a8252611e9f611b35611e9160408620604051928380926136e7565b83808251830101910161383e565b93611ea86139b0565b508360195480612314575b60165480151580612307575b6122ae575b60408801528487015280859786985b885180518b1015612027578a611ee891613816565b518681511615611fe35788816040898f94511691015160405193849163f59002e360e01b835260048301528160a09485945af1918215611fd8578a92611f41575b5050600191611f39915190613809565b990198611ed3565b81819293503d8411611fd1575b611f5881836132f6565b810103918212611fc957606091828112611fcd576040908151611f7a81613292565b83518152611f898c850161382a565b818d01528383015190830152605f190112611fc95791611f3991608060019460405192611fb584613277565b810151835201518a82015291819350611f29565b8980fd5b8a80fd5b503d611f4e565b6040513d8c823e3d90fd5b60405162461bcd60e51b8152600481018990526017818e01527f496e76616c69642070726f6a65637420616464726573730000000000000000006044820152606490fd5b5093908a959293986120519261205f85600f5416926040519586918c808401526040830190613448565b03601f1981018652856132f6565b813b15611fc9579089929183896120a260405197889687958694636c49c79360e11b86523360048701528501526044840152608060648401526084830190613237565b03925af180156122a357612290575b5080600e5416938715801561213c575b505050849550916120d86121029285969594613809565b60405163a9059cbb60e01b8152336004820152602481019190915293849283919082906044820190565b03925af1801561213157612114578280f35b8161212a92903d10610f4f57610f4081836132f6565b5081808280f35b6040513d85823e3d90fd5b9093919492506019880290888204601914171561227d579486976121676103e8839998048092613e8c565b336000908152600560209081526040808320600201548084526006909252909120549197916001600160a01b031691821615905061221b5760405163a9059cbb60e01b81526001600160a01b03919091166004820152602481019190915293508360448188865af1908115612210578694612102946120d8936121f3575b505b929495968194506120c1565b61220990873d8911610f4f57610f4081836132f6565b50896121e5565b6040513d87823e3d90fd5b509050823b15612279578590604051948591630852cd8d60e31b835260048301528183865af180156122105786938691612260575b50506120d89061210293946121e7565b61226c919294506132ad565b610fdb5784918488612250565b8580fd5b634e487b7160e01b875260116004528387fd5b61229c909691966132ad565b94876120b1565b6040513d89823e3d90fd5b916122f990670de0b6b3a76400006122d86122cd60408c015187613e8c565b60808c0151906137f6565b049060175490828083106122ff575b6122f19192613e8c565b601755613809565b91611ec4565b8291506122e7565b5080604089015110611ebf565b959094809893979294808301965b835180518c10156123585760019161234a8b6123418f61235095613816565b518c5190613ff5565b90613809565b9a0199612322565b509297919650949297939850601854828110612381575b8261237991613e8c565b601855611eb3565b91508161236f565b60405162461bcd60e51b8152600481018390526021818801527f43616c6c657220646f6573206e6f74206f776e207468652068737420746f6b656044820152603760f91b6064820152608490fd5b9094508181813d83116123ff575b6123ef81836132f6565b8101031261067857519338611e62565b503d6123e5565b503461021d578060031936011261021d57600d546040516001600160a01b039091168152602090f35b503461021d576020806003193601126118c0576001600160a01b036124526131f2565b168252600b81526040822091604051809384918482549182815201918452848420935b858282106124a05750505061248c925003836132f6565b61151f6040519282849384528301906133e4565b8554845260019586019588955093019201612475565b503461021d57604036600319011261021d57602090612502906001600160a01b036124df6131f2565b168152600b83526040602435912060019160005201602052604060002054151590565b6040519015158152f35b503461021d57604036600319011261021d576001600160401b0360043581811161067857366023820112156106785780600401359161254a83613317565b9161255860405193846132f6565b83835260209360248585019160051b830101913683116117cd576024869101915b8383106126895750505050602435908111610fdb5761259c90369060040161332e565b908051825103612632578051936125b285613317565b946125c060405196876132f6565b8086526125cf601f1991613317565b0136858701375b815181101561261b5760019061260a6001600160a01b036125f78386613816565b51166126038387613816565b51906134e6565b6126148288613816565b52016125d6565b50505061151f6040519282849384528301906133e4565b60405162461bcd60e51b815260048101849052602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608490fd5b819061269484613223565b8152019101908590612579565b503461021d57602036600319011261021d5760406126f06126c06131f2565b9060018060a01b038092166000526005602052600260406000200154918260005260066020526040600020541690565b82519182526001600160a01b03166020820152f35b503461021d576020908160031936011261021d576001600160a01b03918261272b6131f2565b168252600581526003604083200191604051808484829654938481520190845284842092845b8682821061286057505050612768925003846132f6565b82519161278d61277784613317565b9361278560405195866132f6565b808552613317565b601f190181835b82811061283e57505050815b84518110156127f457806127b660019287613816565b518085526006845287604086205416604051916127d283613277565b8252848201526127e28287613816565b526127ed8186613816565b50016127a0565b5092506040519280840190808552835180925280604086019401925b82811061281d5785850386f35b83518051865282015187168583015260409094019392810192600101612810565b60405161284a81613277565b8581528583820152828288010152018290612794565b8554845260019586019589955093019201612751565b503461021d57604036600319011261021d57600d546001600160a01b03919082163303612acd57600e54828116612a9057826128b06137e0565b16906001600160601b0360a01b1617600e556024918235906a0b4a7ffb9b9d8947082f0b8203612a4c576128e26137e0565b6040516323b872dd60e01b8152336004820152306024820152604481018490526020939290918491839160649183918991165af18015612a4157612a24575b506010546129e05760105580549081156129a157506129409042613e8c565b60215490603c820291808304603c148115171561298d57610e100291808304603c149015171561297a579061297491613e6c565b60115580f35b5050634e487b7160e01b81526011600452fd5b5050634e487b7160e01b8252506011600452fd5b6064906019856040519262461bcd60e51b84526004840152820152780496e76616c69642067656e657369732074696d657374616d7603c1b6044820152fd5b60405162461bcd60e51b8152600481018390526017818601527f546f74616c2066756e647320616c7265616479207365740000000000000000006044820152606490fd5b612a3a90833d8511610f4f57610f4081836132f6565b5038612921565b6040513d86823e3d90fd5b60405162461bcd60e51b815260206004820152601d818601527f4d7573742073656e6420616c6c2065636f73797374656d2066756e64730000006044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527414d215081d1bdad95b88185b1c9958591e481cd95d605a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f43616c6c6572206973206e6f742074686520636f696e62617365206164647265604482015261737360f01b6064820152608490fd5b503461021d5760031960a0368201126118c057612b386131f2565b90612b4161320d565b916001600160401b039160443583811161227957612b6390369060040161332e565b926064358181116117cd57612b7c90369060040161332e565b906084359081116117cd57612b9590369060040161338e565b946001600160a01b03938416933385148015612e20575b612bb59061377d565b8551835103612dca57811691612bcc831515613a22565b875b8651811015612bfa57600190868a52600b602052612bf360408b20610406838b613816565b5001612bce565b509193909295875b8651811015612c2e57600190868a52600b602052612c2760408b20610441838b613816565b5001612c02565b50909295949194875b888451821015612cba575080612c4f60019286613816565b51612c5a828a613816565b5190808c526020908c82528c8960408220915282528c60408481832054612c8382821015613a7c565b8484528386528284208d85528652039120558c528b815260408c2090898d5252612cb260408c20918254613809565b905501612c37565b959050869186898388604051604081527f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb612cf8604083018c6133e4565b91808303602082015280612d0d33948c6133e4565b0390a43b612d185780f35b612d6895612d77612d5893602097604051998a988997889663bc197c8160e01b9e8f89523360048a0152602489015260a0604489015260a48801906133e4565b90848783030160648801526133e4565b91848303016084850152613237565b03925af1839181612da9575b50612d9057611582613f11565b6001600160e01b031916036105cc578180808080808680f35b612dc391925060203d60201161064a5761063b81836132f6565b9084612d83565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b50848852600160205260408820338952602052612bb560ff60408a2054169050612bac565b503461021d57602036600319011261021d576020906040906001600160a01b03612e6d6131f2565b168152600583522054604051908152f35b503461021d578060031936011261021d57600c546040516001600160a01b039091168152602090f35b503461021d576020806003193601126118c057600435903383526022815260ff6040842054166002811015612fc857600103612f7257612ee982601254613809565b601255338352601381526040832090815415612f15575b506001612f109101918254613809565b905580f35b6040516326079c6160e11b81528181600481335afa918215612210578592612f43575b505081556001612f00565b90809250813d8311612f6b575b612f5a81836132f6565b81010312610fdb5751816001612f38565b503d612f50565b6084906040519062461bcd60e51b82526004820152602960248201527f43616c6c6572206973206e6f7420616e20616363657074656420686f7573696e60448201526819c81c1c9bda9958dd60ba1b6064820152fd5b634e487b7160e01b84526021600452602484fd5b503461021d576020806003193601126118c0576040519182816002546130018161356b565b938484526001918660018216918260001461309c575050600114613042575b505061302e925003836132f6565b61151f604051928284938452830190613237565b90859250600282527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b85831061308457505061302e93508201013880613020565b8054838901850152879450869390920191810161306c565b925093505061302e94915060ff191682840152151560051b8201013880613020565b503461021d578060031936011261021d576020600454604051908152f35b503461021d578060031936011261021d5761151f604051611b3c81611b35816135a5565b503461021d57602036600319011261021d5760043563ffffffff60e01b81168091036118c057602090636cdb3d1360e11b811490811561315e575b811561314d575b506040519015158152f35b6301ffc9a760e01b14905082613142565b6303a24d0760e21b8114915061313b565b503461021d57602036600319011261021d576001600160a01b036131916131f2565b168152602260205260ff6040822054166040519060028110156131b657602092508152f35b634e487b7160e01b83526021600452602483fd5b503461021d57604036600319011261021d5760206111fa6131e96131f2565b602435906134e6565b600435906001600160a01b038216820361320857565b600080fd5b602435906001600160a01b038216820361320857565b35906001600160a01b038216820361320857565b919082519283825260005b848110613263575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201613242565b604081019081106001600160401b0382111761110457604052565b606081019081106001600160401b0382111761110457604052565b6001600160401b03811161110457604052565b60e081019081106001600160401b0382111761110457604052565b602081019081106001600160401b0382111761110457604052565b90601f801991011681019081106001600160401b0382111761110457604052565b6001600160401b0381116111045760051b60200190565b9080601f8301121561320857602090823561334881613317565b9361335660405195866132f6565b81855260208086019260051b82010192831161320857602001905b82821061337f575050505090565b81358152908301908301613371565b81601f82011215613208578035906001600160401b03821161110457604051926133c2601f8401601f1916602001856132f6565b8284526020838301011161320857816000926020809301838601378301015290565b90815180825260208080930193019160005b828110613404575050505090565b8351855293810193928101926001016133f6565b9181601f84011215613208578235916001600160401b038311613208576020808501946060850201011161320857565b9060e0810191805160e08352805180945261010083019360208092019160005b8281106134b1575050505060c081602082930151602085015260408101516040850152606081015160608501526080810151608085015260a081015160a0850152015191015290565b835180516001600160a01b03168852602080820151908901526040908101519088015260609096019592810192600101613468565b6001600160a01b031690811561351357600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b90600182811c9216801561359b575b602083101461358557565b634e487b7160e01b600052602260045260246000fd5b91607f169161357a565b600854600092916135b58261356b565b8082529160209060019081811690811561363457506001146135d8575b50505050565b9293945060086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3926000935b8585106136215750505060209250010190388080806135d2565b8054858501840152938201938101613607565b92505050602093945060ff929192191683830152151560051b010190388080806135d2565b600954600092916136698261356b565b80825291602090600190818116908115613634575060011461368b5750505050565b9293945060096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af926000935b8585106136d45750505060209250010190388080806135d2565b80548585018401529382019381016136ba565b8054600093926136f68261356b565b9182825260209360019160018116908160001461375e575060011461371d575b5050505050565b90939495506000929192528360002092846000945b83861061374a57505050500101903880808080613716565b805485870183015294019385908201613732565b60ff19168685015250505090151560051b010191503880808080613716565b1561378457565b60405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b6064820152608490fd5b6004356001600160a01b03811681036132085790565b8181029291811591840414171561161557565b9190820180921161161557565b80518210156116ad5760209160051b010190565b51906001600160a01b038216820361320857565b919091602080828503126132085781516001600160401b039283821161320857019060e08286031261320857604090815193613879856132c0565b83519081116132085783019580601f880112156132085786519661389c88613317565b916138a9855193846132f6565b88835283830190846060809b0284010192818411613208578501915b83831061391057505050508460c0959697505280830151908501528082015190840152606081015160608401526080810151608084015260a081015160a0840152015160c082015290565b8a8383031261320857858b91885161392781613292565b6139308661382a565b81528286015183820152898601518a8201528152019201916138c5565b90816020910312613208575180151581036132085790565b1561396c57565b606460405162461bcd60e51b815260206004820152602060248201527f43616c6c6572206973206e6f74207468652070726f6a6563742066756e6465726044820152fd5b604051906139bd826132c0565b816060815260c06000918260208201528260408201528260608201528260808201528260a08201520152565b919082606091031261320857604051613a0181613292565b6040808294613a0f81613223565b8452602081013560208501520135910152565b15613a2957565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b15613a8357565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b60001981146116155760010190565b818110613af5575050565b60008155600101613aea565b80548210156116ad5760005260206000200190600090565b91909160018060a01b0392838216916000838152602090600582526040948582205480613db15750600497613b4e8954613adb565b808a55875192613b5d846132db565b84845288516001600160401b03926080820184811183821017613d9d578b5281528681019282845260038b8301928b84526060810197885284895260058a528c8920905181556001938760018301975116966001600160601b0360a01b9788825416179055516002820155019551958651918211613d9d57600160401b96878311613d8a5789908254848455808510613d70575b5001908852888820885b838110613d5f5750505050508a548552600686528885209182541617905585151580613d54575b80613d43575b613c81575b5050955493518481526001600160a01b039092166020830152506040810191909152919250907fb58d46e66658e855773af8232237e606476d7f0ad98813c081b540e6f435ea3e9080606081015b0390a190565b8583528683205416825260058352600386832001885492815492831015613d30575095613c7b9381989993613d18613d01857fb58d46e66658e855773af8232237e606476d7f0ad98813c081b540e6f435ea3e9b60017fa8b1f3acfefae9dbf6c7ffd8c16eda5db6950c383b34ca999d98f9998721c50c98018155613b01565b819391549060031b91821b91600019901b19161790565b90558354825191888352820152a19594933880613c2d565b634e487b7160e01b815260418a52602490fd5b508583528087842054161515613c28565b508854861415613c22565b825182820155918a01918401613bfb565b838b52828b20613d84918101908601613aea565b38613bf1565b634e487b7160e01b895260418f52602489fd5b50634e487b7160e01b875260418d52602487fd5b9750505050505050565b6020548015613e2b57613dce9042613e8c565b602154603c810290808204603c148115171561161557610e100290808204603c149015171561161557613e0091613e6c565b6014541015613e2957604051633621413760e21b8152670de000cd866f80006004820152602490fd5b565b60405162461bcd60e51b81526020600482015260196024820152780496e76616c69642067656e657369732074696d657374616d7603c1b6044820152606490fd5b8115613e76570490565b634e487b7160e01b600052601260045260246000fd5b9190820391821161161557565b6003546001600160a01b03163303613ead57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9081602091031261320857516001600160e01b0319811681036132085790565b60009060033d11613f1e57565b905060046000803e60005160e01c90565b600060443d10613f8c57604051600319913d83016004833e81516001600160401b03918282113d602484011117613f8f57818401948551938411613f97573d85010160208487010111613f8f5750613f8c929101602001906132f6565b90565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b828210156140a15760018060a01b038151166000526013602052602060406000209101805192825480941161405c5761404661405793600161403d61404f94613f8c99613e8c565b910154906137f6565b60125490613e6c565b9051906137f6565b613e6c565b60405162461bcd60e51b815260206004820152601e60248201527f50726f6a65637420746f6b656e20616d6f756e7420746f6f206c6172676500006044820152606490fd5b505050600090565b60008181526024602052604081205461413c57602354600160401b8110156141285760018101806023558110156141145790826040927fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f4230015560235492815260246020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b600082815260018201602052604090205461419157805490600160401b821015611104578261417a613d01846001809601855584613b01565b905580549260005201602052604060002055600190565b5050600090565b604051906141a582613277565b600182526020820160203682378251156116ad575290565b906001820190600092818452826020526040842054908115156000146142a657600019918083018181116142925782549084820191821161427e57808203614249575b50505080548015614235578201916142188383613b01565b909182549160031b1b191690555582526020526040812055600190565b634e487b7160e01b86526031600452602486fd5b614269614259613d019386613b01565b90549060031b1c92839286613b01565b90558652846020526040862055388080614200565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b505050509056fea26469706673582212202db0ebe05d10699f2baac20251bd3cd600b477a8b6be65acb79b176d49b1e54164736f6c63430008180033",
  "libraries": {
    "NewHousingStakingToken": "0xaCf3c12262CBD3e180C7A9F3BCBEA961D2b42198"
  },
  "devdoc": {
    "details": "This contract allows for fractional ownership and ease of investment. This innovative approach addresses the high costs and limited access to real estate investments in Abuja, Nigeria, making the market more inclusive and accessible. By selling tokens, SmartHousing provides developers with immediate access to liquid funds, ensuring the timely and quality completion of affordable development projects. The SmartHousing Contract is the main contract for the SmartHousing ecosystem. This contract owns and deploys HousingProject contracts, which will represent the properties owned and managed by the SmartHousing project. The management of ecosystem users will also be done in this contract.",
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "addProject(address)": {
        "params": {
          "projectAddress": "The address of the new project."
        }
      },
      "addProjectRent(uint256)": {
        "details": "projectAddress is the msg.msg.sender which must be a recognised HousingProject contract",
        "params": {
          "amount": "The amount of rent received."
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "createRefID(uint256)": {
        "params": {
          "referrerId": "The ID of the referrer."
        },
        "returns": {
          "_0": "The ID of the registered user."
        }
      },
      "createRefIDViaProxy(address,uint256)": {
        "params": {
          "referrerId": "The ID of the referrer.",
          "userAddr": "The address of the user."
        },
        "returns": {
          "_0": "The ID of the registered user."
        }
      },
      "getReferrer(address)": {
        "params": {
          "userAddress": "The address of the user."
        },
        "returns": {
          "referrerAddress": "The address of the referrer, address(0) if none.",
          "referrerId": "The ID of the referrer, 0 if none."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "title": "SmartHousing",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathUD60x18__Exp2InputTooBig(uint256)": [
        {
          "notice": "Emitted when the input is greater than 192."
        }
      ],
      "PRBMathUD60x18__LogInputTooSmall(uint256)": [
        {
          "notice": "Emitted when the input is less than 1."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addProject(address)": {
        "notice": "Adds a new project and sets its permissions."
      },
      "addProjectRent(uint256)": {
        "notice": "Adds rent to a project and updates the distribution storage."
      },
      "createRefID(uint256)": {
        "notice": "Register a new user or get the referral ID if already registered."
      },
      "createRefIDViaProxy(address,uint256)": {
        "notice": "Register a new user via proxy or get the referral ID if already registered."
      },
      "getReferrer(address)": {
        "notice": "Gets the referrer and referrer ID of a user."
      },
      "update(address,uint256,uint256,bytes)": {
        "notice": "Burns all the NFT balance of user at nonce, creates new with balance and attributes"
      }
    },
    "notice": "SmartHousing leverages blockchain technology to revolutionize real estate investment and development by enabling the tokenization of properties.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 141,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 147,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 149,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6214,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "userCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6219,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)6212_storage)"
      },
      {
        "astId": 6223,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "userIdToAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7263,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_nonceCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)2608_storage"
      },
      {
        "astId": 7265,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_name",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 7267,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_symbol",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 7271,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_tokenAttributes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 7276,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_addressToNonces",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(UintSet)3507_storage)"
      },
      {
        "astId": 5555,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "projectFundingAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 5557,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "coinbaseAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5559,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "shtTokenAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 5562,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "hst",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(HousingStakingToken)5459"
      },
      {
        "astId": 5565,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "distributionStorage",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Storage)6564_storage"
      },
      {
        "astId": 5568,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "epochsAndPeriodsStorage",
        "offset": 0,
        "slot": "32",
        "type": "t_struct(Storage)4631_storage"
      },
      {
        "astId": 5576,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "permissions",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_enum(Permissions)5571)"
      },
      {
        "astId": 5579,
        "contract": "contracts/main/SmartHousing.sol:SmartHousing",
        "label": "_projectsToken",
        "offset": 0,
        "slot": "35",
        "type": "t_struct(AddressSet)3350_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(HousingStakingToken)5459": {
        "encoding": "inplace",
        "label": "contract HousingStakingToken",
        "numberOfBytes": "20"
      },
      "t_enum(Permissions)5571": {
        "encoding": "inplace",
        "label": "enum SmartHousing.Permissions",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(Permissions)5571)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum SmartHousing.Permissions)",
        "numberOfBytes": "32",
        "value": "t_enum(Permissions)5571"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(ProjectDistributionData)6569_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Distribution.ProjectDistributionData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProjectDistributionData)6569_storage"
      },
      "t_mapping(t_address,t_struct(UintSet)3507_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)3507_storage"
      },
      "t_mapping(t_address,t_struct(User)6212_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserModule.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6212_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3350_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3349,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3035_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2608_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2607,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProjectDistributionData)6569_storage": {
        "encoding": "inplace",
        "label": "struct Distribution.ProjectDistributionData",
        "members": [
          {
            "astId": 6566,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "maxShares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6568,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "receivedRents",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3035_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3030,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3034,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)4631_storage": {
        "encoding": "inplace",
        "label": "struct EpochsAndPeriods.Storage",
        "members": [
          {
            "astId": 4628,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "genesis",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4630,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "epochLength",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)6564_storage": {
        "encoding": "inplace",
        "label": "struct Distribution.Storage",
        "members": [
          {
            "astId": 6540,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "totalFunds",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6542,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "genesisEpoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6544,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectsTotalReceivedRents",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6549,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectDets",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(ProjectDistributionData)6569_storage)"
          },
          {
            "astId": 6551,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "lastFundsDispatchEpoch",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6553,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "shtTotalStakeWeight",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6555,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "shtRewardPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6557,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "shtStakingRewards",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6560,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectsStakingRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Value)6474_storage"
          },
          {
            "astId": 6563,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "entityFunds",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Value)7720_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(UintSet)3507_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3506,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3035_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)6212_storage": {
        "encoding": "inplace",
        "label": "struct UserModule.User",
        "members": [
          {
            "astId": 6204,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6206,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6208,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "referrerId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6211,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "referrals",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Value)6474_storage": {
        "encoding": "inplace",
        "label": "struct ProjectStakingRewards.Value",
        "members": [
          {
            "astId": 6471,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "toShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6473,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "checkpoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Value)7720_storage": {
        "encoding": "inplace",
        "label": "struct Entities.Value",
        "members": [
          {
            "astId": 7709,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "team",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7711,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "protocol",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7713,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "growth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7715,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "staking",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7717,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "projectsReserve",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7719,
            "contract": "contracts/main/SmartHousing.sol:SmartHousing",
            "label": "lpAndListing",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}